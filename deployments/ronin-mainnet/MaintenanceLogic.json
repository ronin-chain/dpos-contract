{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cancelSchedule",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "checkCooldownEnded",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMaintained",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMaintainedById",
      "inputs": [
        {
          "name": "candidateId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMaintainedInBlockRange",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "fromBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "toBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintained",
      "inputs": [
        {
          "name": "addrList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintainedById",
      "inputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "atBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintainedInBlockRange",
      "inputs": [
        {
          "name": "addrList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        },
        {
          "name": "fromBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "toBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyMaintainedInBlockRangeById",
      "inputs": [
        {
          "name": "idList",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "fromBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "toBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkScheduled",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "cooldownSecsToMaintain",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "exitMaintenance",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSchedule",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct IMaintenance.Schedule",
          "components": [
            {
              "name": "from",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "to",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "lastUpdatedBlock",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "requestTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "validatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "minMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "minOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cooldownSecsToMaintain_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "profileContract_",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV4",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "maxMaintenanceDurationInBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxOffsetToStartSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minMaintenanceDurationInBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minOffsetToStartSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "schedule",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "startedAtBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "endedAtBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaintenanceConfig",
      "inputs": [
        {
          "name": "minMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxMaintenanceDurationInBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "minOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxOffsetToStartSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxSchedule_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cooldownSecsToMaintain_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "totalSchedule",
      "inputs": [],
      "outputs": [
        {
          "name": "count",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaintenanceConfigUpdated",
      "inputs": [
        {
          "name": "minMaintenanceDurationInBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxMaintenanceDurationInBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "minOffsetToStartSchedule",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxOffsetToStartSchedule",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxSchedules",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cooldownSecsToMaintain",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaintenanceExited",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaintenanceScheduleCancelled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaintenanceScheduled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct IMaintenance.Schedule",
          "components": [
            {
              "name": "from",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "to",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "lastUpdatedBlock",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "requestTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyOnMaintenance",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyScheduled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrCooldownTimeNotYetEnded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrEndBlockOutOfRange",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMaintenanceDuration",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMaintenanceDurationConfig",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidOffsetToStartScheduleConfigs",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrNotOnMaintenance",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrStartBlockOutOfRange",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrTotalOfSchedulesExceeded",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexistedSchedule",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "absolutePath": "Maintenance.sol",
  "address": "0x3e07aeEef99a1f6eBC9B236b8B0051ac18560a48",
  "ast": "",
  "blockNumber": 35601639,
  "bytecode": "0x6080604052348015600f57600080fd5b506016601a565b60e5565b600054600160a81b900460ff161560875760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff600160a01b9091048116101560e3576000805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6120e3806100f46000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063865e6fd3116100f9578063bfa89b9b11610097578063de981f1b11610071578063de981f1b1461037c578063dec36284146103a7578063f0caaafb146103af578063fdadda81146103c257600080fd5b8063bfa89b9b1461031b578063c09fe46014610323578063d39fee341461033657600080fd5b8063ac57bd76116100d3578063ac57bd76146102e5578063ba303755146102f8578063ba7e57bb1461030b578063bc1710e91461031357600080fd5b8063865e6fd31461029f5780638b042a72146102b25780638d5b6759146102d257600080fd5b80633101cfcb1161016657806371e21f971161014057806371e21f97146102695780637a50802d1461027c5780638142951a1461028457806384a9573b1461029757600080fd5b80633101cfcb1461024657806354a08606146102595780635cd8a76b1461026157600080fd5b80630fbeb37f116101975780630fbeb37f1461020b5780632d538c2c1461021e5780632ddc08a21461023357600080fd5b806301b50209146101be578063088e8de7146101e657806309e34c38146101f9575b600080fd5b6101d16101cc366004611bdb565b6103d5565b60405190151581526020015b60405180910390f35b6101d16101f4366004611bf8565b61040f565b6002545b6040519081526020016101dd565b6101d1610219366004611c2d565b61042c565b61023161022c366004611bf8565b610447565b005b6101d1610241366004611bdb565b6108d8565b610231610254366004611bdb565b610908565b610231610a10565b610231610c0a565b610231610277366004611bdb565b610d32565b6005546101fd565b610231610292366004611c59565b610e00565b6101fd610f5f565b6102316102ad366004611cbd565b610fab565b6102c56102c0366004611d40565b610fca565b6040516101dd9190611d91565b6101d16102e0366004611c2d565b611015565b6102c56102f3366004611dd7565b611021565b6102c5610306366004611d40565b611061565b6006546101fd565b6004546101fd565b6003546101fd565b610231610331366004611e23565b6110b8565b610349610344366004611bdb565b6110d6565b6040516101dd91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61038f61038a366004611e66565b611168565b6040516001600160a01b0390911681526020016101dd565b6007546101fd565b6102316103bd366004611bdb565b6111fc565b6102c56103d0366004611dd7565b611321565b60006104096103e38361136d565b6007546001600160a01b0390911660009081526001602052604090206003015401421190565b92915050565b600061042461041d8561136d565b84846113fe565b949350505050565b600061044061043a8461136d565b8361142d565b9392505050565b60006104536008611168565b905060006104608561136d565b6040517fe8712aa70000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192509083169063e8712aa790602401602060405180830381865afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190611e81565b61051d576000356001600160e01b0319166007604051620f948f60ea1b8152600401610514929190611eb9565b60405180910390fd5b6105268161145f565b6001600160a01b03811660009081526001602081905260409091200154431161057b576040517fb194497700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007546001600160a01b0382166000908152600160205260409020600301540142116105d3576040517f40fbfaee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546105de611524565b10610615576040517f437494d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61063b600454436106269190611efd565b6005546106339043611efd565b86919061159d565b610658576040516301f19fb760e61b815260040160405180910390fd5b828410610678576040516301f19fb760e61b815260040160405180910390fd5b60006106848585611f10565b61068f906001611efd565b90506106aa6002546003548361159d9092919063ffffffff16565b6106e0576040517fa1f1aaf500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038316637593ff716106fa600188611f10565b6040518263ffffffff1660e01b815260040161071891815260200190565b602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190611e81565b610776576040516301f19fb760e61b815260040160405180910390fd5b6040517f7593ff71000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03841690637593ff7190602401602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611e81565b61082e576040517fec67bbc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821660009081526001602081905260409091208681559081018590554360028201554260038201556108696008846115b4565b50826001600160a01b03167f48e8b2f7348b1ec693bbb999258a8d6bd514732a19c6057b6e2a56a4c405253b826040516108c79190815481526001820154602082015260028201546040820152600390910154606082015260800190565b60405180910390a250505050505050565b60006104096108e68361136d565b6001600160a01b03166000908152600160208190526040909120015443111590565b600054600390600160a81b900460ff16158015610933575060005460ff808316600160a01b90920416105b6109965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790556109c9600f836115c9565b6000805460ff60a81b1916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600490600160a81b900460ff16158015610a3b575060005460ff808316600160a01b90920416105b610a9e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b178155610ad06008611168565b6001600160a01b0316639a57bd936040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b0d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b359190810190611f44565b805190915060005b81811015610bc057610b84838281518110610b5a57610b5a612009565b60200260200101516001600160a01b03166000908152600160208190526040909120015443111590565b15610bb857610bb6838281518110610b9e57610b9e612009565b602002602001015160086115b490919063ffffffff16565b505b600101610b3d565b50506000805460ff60a81b191690555060405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b600054600290600160a81b900460ff16158015610c35575060005460ff808316600160a01b90920416105b610c985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790819055610cd7906008906001600160a01b03166115c9565b600080547fffffffffffffffffffff00ff000000000000000000000000000000000000000016905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610bff565b610d3a611524565b506000610d468261136d565b905043610d528261145f565b610d5c828261142d565b610d92576040517fb58ddf9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260016020819052604090912090810182905560028101829055610dc5600884611685565b506040516001600160a01b038416907f0203ae0082a4b3f0b71e461ab5245258799bdb5d52d0f224a6aaed75deca688990600090a250505050565b600054600160a81b900460ff1615808015610e2857506000546001600160a01b90910460ff16105b80610e495750303b158015610e495750600054600160a01b900460ff166001145b610eac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790558015610ef4576000805460ff60a81b1916600160a81b1790555b610eff6008896115c9565b610f0d87878787878761169a565b8015610f55576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600080610f6c6008611788565b805190915060005b81811015610fa557610f91838281518110610b5a57610b5a612009565b15610f9d578360010193505b600101610f74565b50505090565b610fb3611795565b610fbc816117f1565b610fc682826115c9565b5050565b606061100c8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508691506118409050565b95945050505050565b6000610440838361142d565b60606104248484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692506118ec915050565b606060006110a186868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061199692505050565b90506110ae818585611840565b9695505050505050565b6110c0611795565b6110ce86868686868661169a565b505050505050565b6111016040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600061110e8461136d565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083601081111561119f5761119f611ea3565b60ff1681526020810191909152604001600020546001600160a01b03169050806111f757816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610514919061201f565b919050565b611204611524565b5060006112108261136d565b905061121b8161145f565b6001600160a01b03811660009081526001602081905260409091200154431115611271576040517ff7050bef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61127b814361142d565b156112b2576040517f070dff8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811660009081526001602081905260408220828155908101919091554360028201556112e7600883611685565b506040516001600160a01b038316907f72720a31deb222f77bbf95b88a540154648466770e5f41328ee1e25e5050737790600090a2505050565b6060600061136185858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061199692505050565b905061100c81846118ec565b6000611379600f611168565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190612039565b6001600160a01b03831660009081526001602081905260408220805491810154909161100c9186918691611a12565b6001600160a01b0382166000908152600160205260408120805483108015906104245750600101549091111592915050565b6114696008611168565b6040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015233602483015291909116906346ebb23290604401602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190611e81565b611521576000356001600160e01b0319166004604051620f948f60ea1b8152600401610514929190611eb9565b50565b6000806115316008611788565b805190915060005b81811015610fa557611556838281518110610b5a57610b5a612009565b1561156657836001019350611595565b61159383828151811061157b5761157b612009565b6020026020010151600861168590919063ffffffff16565b505b600101611539565b600083831115801561042457505090911115919050565b6000610440836001600160a01b038416611a28565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb60008460108111156115ff576115ff611ea3565b60ff168152602081019190915260400160002080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316179055811682601081111561165857611658611ea3565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6000610440836001600160a01b038416611a77565b8486106116d3576040517f71e80c4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82841061170c576040517fb63e3f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002869055600385905560048490556005839055600682905560078190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527f4edb6adef66a4b8e1ffbc8c67640d4f244ce904193fd65e5cc316bbb74b2e59b9060c00160405180910390a1505050505050565b6060600061044083611b6a565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146117ef576000356001600160e01b0319166001604051620f948f60ea1b8152600401610514929190611eb9565b565b806001600160a01b03163b600003611521576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610514565b82516060908067ffffffffffffffff81111561185e5761185e611f23565b604051908082528060200260200182016040528015611887578160200160208202803683370190505b50915060005b818110156118e3576118b98682815181106118aa576118aa612009565b602002602001015186866113fe565b8382815181106118cb576118cb612009565b9115156020928302919091019091015260010161188d565b50509392505050565b81516060908067ffffffffffffffff81111561190a5761190a611f23565b604051908082528060200260200182016040528015611933578160200160208202803683370190505b50915060005b8181101561198e5761196485828151811061195657611956612009565b60200260200101518561142d565b83828151811061197657611976612009565b91151560209283029190910190910152600101611939565b505092915050565b60606119a2600f611168565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016119cd9190612056565b600060405180830381865afa1580156119ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104099190810190611f44565b600081851115801561100c575050501115919050565b6000818152600183016020526040812054611a6f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610409565b506000610409565b60008181526001830160205260408120548015611b60576000611a9b600183611f10565b8554909150600090611aaf90600190611f10565b9050818114611b14576000866000018281548110611acf57611acf612009565b9060005260206000200154905080876000018481548110611af257611af2612009565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b2557611b25612097565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610409565b6000915050610409565b606081600001805480602002602001604051908101604052809291908181526020018280548015611bba57602002820191906000526020600020905b815481526020019060010190808311611ba6575b50505050509050919050565b6001600160a01b038116811461152157600080fd5b600060208284031215611bed57600080fd5b813561044081611bc6565b600080600060608486031215611c0d57600080fd5b8335611c1881611bc6565b95602085013595506040909401359392505050565b60008060408385031215611c4057600080fd5b8235611c4b81611bc6565b946020939093013593505050565b600080600080600080600060e0888a031215611c7457600080fd5b8735611c7f81611bc6565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b8035601181106111f757600080fd5b60008060408385031215611cd057600080fd5b611cd983611cae565b91506020830135611ce981611bc6565b809150509250929050565b60008083601f840112611d0657600080fd5b50813567ffffffffffffffff811115611d1e57600080fd5b6020830191508360208260051b8501011115611d3957600080fd5b9250929050565b60008060008060608587031215611d5657600080fd5b843567ffffffffffffffff811115611d6d57600080fd5b611d7987828801611cf4565b90989097506020870135966040013595509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611dcb578351151583529284019291840191600101611dad565b50909695505050505050565b600080600060408486031215611dec57600080fd5b833567ffffffffffffffff811115611e0357600080fd5b611e0f86828701611cf4565b909790965060209590950135949350505050565b60008060008060008060c08789031215611e3c57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600060208284031215611e7857600080fd5b61044082611cae565b600060208284031215611e9357600080fd5b8151801515811461044057600080fd5b634e487b7160e01b600052602160045260246000fd5b6001600160e01b03198316815260408101600b8310611eda57611eda611ea3565b8260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561040957610409611ee7565b8181038181111561040957610409611ee7565b634e487b7160e01b600052604160045260246000fd5b80516111f781611bc6565b60006020808385031215611f5757600080fd5b825167ffffffffffffffff80821115611f6f57600080fd5b818501915085601f830112611f8357600080fd5b815181811115611f9557611f95611f23565b8060051b604051601f19603f83011681018181108582111715611fba57611fba611f23565b604052918252848201925083810185019188831115611fd857600080fd5b938501935b82851015611ffd57611fee85611f39565b84529385019392850192611fdd565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b602081016011831061203357612033611ea3565b91905290565b60006020828403121561204b57600080fd5b815161044081611bc6565b6020808252825182820181905260009190848201906040850190845b81811015611dcb5783516001600160a01b031683529284019291840191600101612072565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d915475f7f810fbcb003e5fbcbf904e07bf4c824f9c8aecdce27658e4b36b24364736f6c63430008190033",
  "callValue": 0,
  "chainId": 2020,
  "constructorArgs": "0x",
  "contractName": "Maintenance",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c8063865e6fd3116100f9578063bfa89b9b11610097578063de981f1b11610071578063de981f1b1461037c578063dec36284146103a7578063f0caaafb146103af578063fdadda81146103c257600080fd5b8063bfa89b9b1461031b578063c09fe46014610323578063d39fee341461033657600080fd5b8063ac57bd76116100d3578063ac57bd76146102e5578063ba303755146102f8578063ba7e57bb1461030b578063bc1710e91461031357600080fd5b8063865e6fd31461029f5780638b042a72146102b25780638d5b6759146102d257600080fd5b80633101cfcb1161016657806371e21f971161014057806371e21f97146102695780637a50802d1461027c5780638142951a1461028457806384a9573b1461029757600080fd5b80633101cfcb1461024657806354a08606146102595780635cd8a76b1461026157600080fd5b80630fbeb37f116101975780630fbeb37f1461020b5780632d538c2c1461021e5780632ddc08a21461023357600080fd5b806301b50209146101be578063088e8de7146101e657806309e34c38146101f9575b600080fd5b6101d16101cc366004611bdb565b6103d5565b60405190151581526020015b60405180910390f35b6101d16101f4366004611bf8565b61040f565b6002545b6040519081526020016101dd565b6101d1610219366004611c2d565b61042c565b61023161022c366004611bf8565b610447565b005b6101d1610241366004611bdb565b6108d8565b610231610254366004611bdb565b610908565b610231610a10565b610231610c0a565b610231610277366004611bdb565b610d32565b6005546101fd565b610231610292366004611c59565b610e00565b6101fd610f5f565b6102316102ad366004611cbd565b610fab565b6102c56102c0366004611d40565b610fca565b6040516101dd9190611d91565b6101d16102e0366004611c2d565b611015565b6102c56102f3366004611dd7565b611021565b6102c5610306366004611d40565b611061565b6006546101fd565b6004546101fd565b6003546101fd565b610231610331366004611e23565b6110b8565b610349610344366004611bdb565b6110d6565b6040516101dd91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61038f61038a366004611e66565b611168565b6040516001600160a01b0390911681526020016101dd565b6007546101fd565b6102316103bd366004611bdb565b6111fc565b6102c56103d0366004611dd7565b611321565b60006104096103e38361136d565b6007546001600160a01b0390911660009081526001602052604090206003015401421190565b92915050565b600061042461041d8561136d565b84846113fe565b949350505050565b600061044061043a8461136d565b8361142d565b9392505050565b60006104536008611168565b905060006104608561136d565b6040517fe8712aa70000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192509083169063e8712aa790602401602060405180830381865afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190611e81565b61051d576000356001600160e01b0319166007604051620f948f60ea1b8152600401610514929190611eb9565b60405180910390fd5b6105268161145f565b6001600160a01b03811660009081526001602081905260409091200154431161057b576040517fb194497700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007546001600160a01b0382166000908152600160205260409020600301540142116105d3576040517f40fbfaee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546105de611524565b10610615576040517f437494d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61063b600454436106269190611efd565b6005546106339043611efd565b86919061159d565b610658576040516301f19fb760e61b815260040160405180910390fd5b828410610678576040516301f19fb760e61b815260040160405180910390fd5b60006106848585611f10565b61068f906001611efd565b90506106aa6002546003548361159d9092919063ffffffff16565b6106e0576040517fa1f1aaf500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038316637593ff716106fa600188611f10565b6040518263ffffffff1660e01b815260040161071891815260200190565b602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190611e81565b610776576040516301f19fb760e61b815260040160405180910390fd5b6040517f7593ff71000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03841690637593ff7190602401602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611e81565b61082e576040517fec67bbc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821660009081526001602081905260409091208681559081018590554360028201554260038201556108696008846115b4565b50826001600160a01b03167f48e8b2f7348b1ec693bbb999258a8d6bd514732a19c6057b6e2a56a4c405253b826040516108c79190815481526001820154602082015260028201546040820152600390910154606082015260800190565b60405180910390a250505050505050565b60006104096108e68361136d565b6001600160a01b03166000908152600160208190526040909120015443111590565b600054600390600160a81b900460ff16158015610933575060005460ff808316600160a01b90920416105b6109965760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790556109c9600f836115c9565b6000805460ff60a81b1916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600054600490600160a81b900460ff16158015610a3b575060005460ff808316600160a01b90920416105b610a9e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b178155610ad06008611168565b6001600160a01b0316639a57bd936040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b0d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b359190810190611f44565b805190915060005b81811015610bc057610b84838281518110610b5a57610b5a612009565b60200260200101516001600160a01b03166000908152600160208190526040909120015443111590565b15610bb857610bb6838281518110610b9e57610b9e612009565b602002602001015160086115b490919063ffffffff16565b505b600101610b3d565b50506000805460ff60a81b191690555060405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b600054600290600160a81b900460ff16158015610c35575060005460ff808316600160a01b90920416105b610c985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b6000805460ff60a81b1960ff8416600160a01b021661ffff60a01b1990911617600160a81b1790819055610cd7906008906001600160a01b03166115c9565b600080547fffffffffffffffffffff00ff000000000000000000000000000000000000000016905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610bff565b610d3a611524565b506000610d468261136d565b905043610d528261145f565b610d5c828261142d565b610d92576040517fb58ddf9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260016020819052604090912090810182905560028101829055610dc5600884611685565b506040516001600160a01b038416907f0203ae0082a4b3f0b71e461ab5245258799bdb5d52d0f224a6aaed75deca688990600090a250505050565b600054600160a81b900460ff1615808015610e2857506000546001600160a01b90910460ff16105b80610e495750303b158015610e495750600054600160a01b900460ff166001145b610eac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610514565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790558015610ef4576000805460ff60a81b1916600160a81b1790555b610eff6008896115c9565b610f0d87878787878761169a565b8015610f55576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600080610f6c6008611788565b805190915060005b81811015610fa557610f91838281518110610b5a57610b5a612009565b15610f9d578360010193505b600101610f74565b50505090565b610fb3611795565b610fbc816117f1565b610fc682826115c9565b5050565b606061100c8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508691506118409050565b95945050505050565b6000610440838361142d565b60606104248484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508692506118ec915050565b606060006110a186868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061199692505050565b90506110ae818585611840565b9695505050505050565b6110c0611795565b6110ce86868686868661169a565b505050505050565b6111016040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600061110e8461136d565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600083601081111561119f5761119f611ea3565b60ff1681526020810191909152604001600020546001600160a01b03169050806111f757816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610514919061201f565b919050565b611204611524565b5060006112108261136d565b905061121b8161145f565b6001600160a01b03811660009081526001602081905260409091200154431115611271576040517ff7050bef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61127b814361142d565b156112b2576040517f070dff8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811660009081526001602081905260408220828155908101919091554360028201556112e7600883611685565b506040516001600160a01b038316907f72720a31deb222f77bbf95b88a540154648466770e5f41328ee1e25e5050737790600090a2505050565b6060600061136185858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061199692505050565b905061100c81846118ec565b6000611379600f611168565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190612039565b6001600160a01b03831660009081526001602081905260408220805491810154909161100c9186918691611a12565b6001600160a01b0382166000908152600160205260408120805483108015906104245750600101549091111592915050565b6114696008611168565b6040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015233602483015291909116906346ebb23290604401602060405180830381865afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190611e81565b611521576000356001600160e01b0319166004604051620f948f60ea1b8152600401610514929190611eb9565b50565b6000806115316008611788565b805190915060005b81811015610fa557611556838281518110610b5a57610b5a612009565b1561156657836001019350611595565b61159383828151811061157b5761157b612009565b6020026020010151600861168590919063ffffffff16565b505b600101611539565b600083831115801561042457505090911115919050565b6000610440836001600160a01b038416611a28565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb60008460108111156115ff576115ff611ea3565b60ff168152602081019190915260400160002080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03928316179055811682601081111561165857611658611ea3565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6000610440836001600160a01b038416611a77565b8486106116d3576040517f71e80c4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82841061170c576040517fb63e3f7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002869055600385905560048490556005839055600682905560078190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527f4edb6adef66a4b8e1ffbc8c67640d4f244ce904193fd65e5cc316bbb74b2e59b9060c00160405180910390a1505050505050565b6060600061044083611b6a565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146117ef576000356001600160e01b0319166001604051620f948f60ea1b8152600401610514929190611eb9565b565b806001600160a01b03163b600003611521576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610514565b82516060908067ffffffffffffffff81111561185e5761185e611f23565b604051908082528060200260200182016040528015611887578160200160208202803683370190505b50915060005b818110156118e3576118b98682815181106118aa576118aa612009565b602002602001015186866113fe565b8382815181106118cb576118cb612009565b9115156020928302919091019091015260010161188d565b50509392505050565b81516060908067ffffffffffffffff81111561190a5761190a611f23565b604051908082528060200260200182016040528015611933578160200160208202803683370190505b50915060005b8181101561198e5761196485828151811061195657611956612009565b60200260200101518561142d565b83828151811061197657611976612009565b91151560209283029190910190910152600101611939565b505092915050565b60606119a2600f611168565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016119cd9190612056565b600060405180830381865afa1580156119ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104099190810190611f44565b600081851115801561100c575050501115919050565b6000818152600183016020526040812054611a6f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610409565b506000610409565b60008181526001830160205260408120548015611b60576000611a9b600183611f10565b8554909150600090611aaf90600190611f10565b9050818114611b14576000866000018281548110611acf57611acf612009565b9060005260206000200154905080876000018481548110611af257611af2612009565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b2557611b25612097565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610409565b6000915050610409565b606081600001805480602002602001604051908101604052809291908181526020018280548015611bba57602002820191906000526020600020905b815481526020019060010190808311611ba6575b50505050509050919050565b6001600160a01b038116811461152157600080fd5b600060208284031215611bed57600080fd5b813561044081611bc6565b600080600060608486031215611c0d57600080fd5b8335611c1881611bc6565b95602085013595506040909401359392505050565b60008060408385031215611c4057600080fd5b8235611c4b81611bc6565b946020939093013593505050565b600080600080600080600060e0888a031215611c7457600080fd5b8735611c7f81611bc6565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b8035601181106111f757600080fd5b60008060408385031215611cd057600080fd5b611cd983611cae565b91506020830135611ce981611bc6565b809150509250929050565b60008083601f840112611d0657600080fd5b50813567ffffffffffffffff811115611d1e57600080fd5b6020830191508360208260051b8501011115611d3957600080fd5b9250929050565b60008060008060608587031215611d5657600080fd5b843567ffffffffffffffff811115611d6d57600080fd5b611d7987828801611cf4565b90989097506020870135966040013595509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611dcb578351151583529284019291840191600101611dad565b50909695505050505050565b600080600060408486031215611dec57600080fd5b833567ffffffffffffffff811115611e0357600080fd5b611e0f86828701611cf4565b909790965060209590950135949350505050565b60008060008060008060c08789031215611e3c57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600060208284031215611e7857600080fd5b61044082611cae565b600060208284031215611e9357600080fd5b8151801515811461044057600080fd5b634e487b7160e01b600052602160045260246000fd5b6001600160e01b03198316815260408101600b8310611eda57611eda611ea3565b8260208301529392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561040957610409611ee7565b8181038181111561040957610409611ee7565b634e487b7160e01b600052604160045260246000fd5b80516111f781611bc6565b60006020808385031215611f5757600080fd5b825167ffffffffffffffff80821115611f6f57600080fd5b818501915085601f830112611f8357600080fd5b815181811115611f9557611f95611f23565b8060051b604051601f19603f83011681018181108582111715611fba57611fba611f23565b604052918252848201925083810185019188831115611fd857600080fd5b938501935b82851015611ffd57611fee85611f39565b84529385019392850192611fdd565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b602081016011831061203357612033611ea3565b91905290565b60006020828403121561204b57600080fd5b815161044081611bc6565b6020808252825182820181905260009190848201906040850190845b81811015611dcb5783516001600160a01b031683529284019291840191600101612072565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d915475f7f810fbcb003e5fbcbf904e07bf4c824f9c8aecdce27658e4b36b24364736f6c63430008190033",
  "deployer": "0x08295771719b138a241F45023B13CC868D72827D",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "cancelSchedule(address)": {
        "details": "Cancel the schedule of maintenance for the `consensusAddr`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - A schedule for the `consensusAddr` must be existent and not executed yet. Emits the event `MaintenanceScheduleCancelled`."
      },
      "checkCooldownEnded(address)": {
        "details": "Returns whether the validator `consensusAddr` has finished cooldown."
      },
      "checkMaintained(address,uint256)": {
        "details": "Returns whether the validator `consensusAddr` maintained at the block number `_block`."
      },
      "checkMaintainedById(address,uint256)": {
        "details": "Returns whether the validator whose id `validatorId` maintained at the block number `_block`."
      },
      "checkMaintainedInBlockRange(address,uint256,uint256)": {
        "details": "Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks."
      },
      "checkManyMaintained(address[],uint256)": {
        "details": "Returns the bool array indicating the validators maintained at block number `k` or not."
      },
      "checkManyMaintainedInBlockRange(address[],uint256,uint256)": {
        "details": "Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not."
      },
      "checkScheduled(address)": {
        "details": "Returns whether the validator `consensusAddr` has schedule."
      },
      "cooldownSecsToMaintain()": {
        "details": "Returns the cooldown to maintain in seconds."
      },
      "exitMaintenance(address)": {
        "details": "Exits the maintenance status.",
        "params": {
          "consensusAddr": "The address of the consensus to exit maintenance status for."
        }
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getSchedule(address)": {
        "details": "Returns the detailed schedule of the validator `consensusAddr`."
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Initializes the contract storage."
      },
      "maxMaintenanceDurationInBlock()": {
        "details": "Returns the max duration for maintenance in block."
      },
      "maxOffsetToStartSchedule()": {
        "details": "The offset to the max block number that the schedule can start"
      },
      "maxSchedule()": {
        "details": "Returns the max number of scheduled maintenances."
      },
      "minMaintenanceDurationInBlock()": {
        "details": "Returns the min duration for maintenance in block."
      },
      "minOffsetToStartSchedule()": {
        "details": "The offset to the min block number that the schedule can start"
      },
      "schedule(address,uint256,uint256)": {
        "details": "Schedules for maintenance from `startedAtBlock` to `endedAtBlock`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - The candidate `consensusAddr` has no schedule yet or the previous is done. - The total number of schedules is not larger than `maxSchedules()`. - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block. - The end block is larger than the start block. - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`. - The start block is at the start of an epoch. - The end block is at the end of an epoch. Emits the event `MaintenanceScheduled`."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setMaintenanceConfig(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Sets the duration restriction, start time restriction, and max allowed for maintenance. Requirements: - The method caller is admin. - The max duration is larger than the min duration. - The max offset is larger than the min offset. Emits the event `MaintenanceConfigUpdated`."
      },
      "totalSchedule()": {
        "details": "Returns the total of current schedules."
      }
    },
    "events": {
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaintenanceConfigUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the maintenance config is updated."
      },
      "MaintenanceExited(address)": {
        "details": "Emitted when a maintenance is early exit in maintenance duration."
      },
      "MaintenanceScheduleCancelled(address)": {
        "details": "Emitted when a schedule of maintenance is cancelled."
      },
      "MaintenanceScheduled(address,(uint256,uint256,uint256,uint256))": {
        "details": "Emitted when a maintenance is scheduled."
      }
    },
    "errors": {
      "ErrAlreadyOnMaintenance()": [
        {
          "details": "Error thrown when attempting to initiate maintenance while already in maintenance mode."
        }
      ],
      "ErrAlreadyScheduled()": [
        {
          "details": "Error thrown when attempting to schedule an already scheduled event."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrCooldownTimeNotYetEnded()": [
        {
          "details": "Error thrown when attempting an action before the cooldown period has ended."
        }
      ],
      "ErrEndBlockOutOfRange()": [
        {
          "details": "Error thrown when the end block of a schedule is out of range."
        }
      ],
      "ErrInvalidMaintenanceDuration()": [
        {
          "details": "Error thrown when an invalid maintenance duration is specified."
        }
      ],
      "ErrInvalidMaintenanceDurationConfig()": [
        {
          "details": "Error thrown when an invalid maintenance duration configuration is provided."
        }
      ],
      "ErrInvalidOffsetToStartScheduleConfigs()": [
        {
          "details": "Error thrown when an invalid offset is specified to start the schedule configurations."
        }
      ],
      "ErrNotOnMaintenance()": [
        {
          "details": "Error thrown when attempting to exit maintenance status while not in maintenance duration."
        }
      ],
      "ErrStartBlockOutOfRange()": [
        {
          "details": "Error thrown when the start block of a schedule is out of range."
        }
      ],
      "ErrTotalOfSchedulesExceeded()": [
        {
          "details": "Error thrown when the total number of schedules exceeds the limit."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexistedSchedule()": [
        {
          "details": "Error thrown when referring to a non-existent schedule."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrAlreadyOnMaintenance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyScheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCooldownTimeNotYetEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEndBlockOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaintenanceDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaintenanceDurationConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidOffsetToStartScheduleConfigs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNotOnMaintenance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrStartBlockOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTotalOfSchedulesExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnexistedSchedule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMaintenanceDurationInBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOffsetToStartSchedule\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxOffsetToStartSchedule\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSchedules\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cooldownSecsToMaintain\",\"type\":\"uint256\"}],\"name\":\"MaintenanceConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"MaintenanceExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"MaintenanceScheduleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMaintenance.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"MaintenanceScheduled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"cancelSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"checkCooldownEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkMaintained\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkMaintainedById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"checkMaintainedInBlockRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintained\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintainedById\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"addrList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintainedInBlockRange\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"idList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"checkManyMaintainedInBlockRangeById\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"checkScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownSecsToMaintain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"exitMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IMaintenance.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSecsToMaintain_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileContract_\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMaintenanceDurationInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOffsetToStartSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMaintenanceDurationInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOffsetToStartSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMaintenanceDurationInBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOffsetToStartSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSchedule_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSecsToMaintain_\",\"type\":\"uint256\"}],\"name\":\"setMaintenanceConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyOnMaintenance()\":[{\"details\":\"Error thrown when attempting to initiate maintenance while already in maintenance mode.\"}],\"ErrAlreadyScheduled()\":[{\"details\":\"Error thrown when attempting to schedule an already scheduled event.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrCooldownTimeNotYetEnded()\":[{\"details\":\"Error thrown when attempting an action before the cooldown period has ended.\"}],\"ErrEndBlockOutOfRange()\":[{\"details\":\"Error thrown when the end block of a schedule is out of range.\"}],\"ErrInvalidMaintenanceDuration()\":[{\"details\":\"Error thrown when an invalid maintenance duration is specified.\"}],\"ErrInvalidMaintenanceDurationConfig()\":[{\"details\":\"Error thrown when an invalid maintenance duration configuration is provided.\"}],\"ErrInvalidOffsetToStartScheduleConfigs()\":[{\"details\":\"Error thrown when an invalid offset is specified to start the schedule configurations.\"}],\"ErrNotOnMaintenance()\":[{\"details\":\"Error thrown when attempting to exit maintenance status while not in maintenance duration.\"}],\"ErrStartBlockOutOfRange()\":[{\"details\":\"Error thrown when the start block of a schedule is out of range.\"}],\"ErrTotalOfSchedulesExceeded()\":[{\"details\":\"Error thrown when the total number of schedules exceeds the limit.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexistedSchedule()\":[{\"details\":\"Error thrown when referring to a non-existent schedule.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaintenanceConfigUpdated(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the maintenance config is updated.\"},\"MaintenanceExited(address)\":{\"details\":\"Emitted when a maintenance is early exit in maintenance duration.\"},\"MaintenanceScheduleCancelled(address)\":{\"details\":\"Emitted when a schedule of maintenance is cancelled.\"},\"MaintenanceScheduled(address,(uint256,uint256,uint256,uint256))\":{\"details\":\"Emitted when a maintenance is scheduled.\"}},\"kind\":\"dev\",\"methods\":{\"cancelSchedule(address)\":{\"details\":\"Cancel the schedule of maintenance for the `consensusAddr`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - A schedule for the `consensusAddr` must be existent and not executed yet. Emits the event `MaintenanceScheduleCancelled`.\"},\"checkCooldownEnded(address)\":{\"details\":\"Returns whether the validator `consensusAddr` has finished cooldown.\"},\"checkMaintained(address,uint256)\":{\"details\":\"Returns whether the validator `consensusAddr` maintained at the block number `_block`.\"},\"checkMaintainedById(address,uint256)\":{\"details\":\"Returns whether the validator whose id `validatorId` maintained at the block number `_block`.\"},\"checkMaintainedInBlockRange(address,uint256,uint256)\":{\"details\":\"Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\"},\"checkManyMaintained(address[],uint256)\":{\"details\":\"Returns the bool array indicating the validators maintained at block number `k` or not.\"},\"checkManyMaintainedInBlockRange(address[],uint256,uint256)\":{\"details\":\"Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\"},\"checkScheduled(address)\":{\"details\":\"Returns whether the validator `consensusAddr` has schedule.\"},\"cooldownSecsToMaintain()\":{\"details\":\"Returns the cooldown to maintain in seconds.\"},\"exitMaintenance(address)\":{\"details\":\"Exits the maintenance status.\",\"params\":{\"consensusAddr\":\"The address of the consensus to exit maintenance status for.\"}},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getSchedule(address)\":{\"details\":\"Returns the detailed schedule of the validator `consensusAddr`.\"},\"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Initializes the contract storage.\"},\"maxMaintenanceDurationInBlock()\":{\"details\":\"Returns the max duration for maintenance in block.\"},\"maxOffsetToStartSchedule()\":{\"details\":\"The offset to the max block number that the schedule can start\"},\"maxSchedule()\":{\"details\":\"Returns the max number of scheduled maintenances.\"},\"minMaintenanceDurationInBlock()\":{\"details\":\"Returns the min duration for maintenance in block.\"},\"minOffsetToStartSchedule()\":{\"details\":\"The offset to the min block number that the schedule can start\"},\"schedule(address,uint256,uint256)\":{\"details\":\"Schedules for maintenance from `startedAtBlock` to `endedAtBlock`. Requirements: - The candidate `consensusAddr` is the block producer. - The method caller is candidate admin of the candidate `consensusAddr`. - The candidate `consensusAddr` has no schedule yet or the previous is done. - The total number of schedules is not larger than `maxSchedules()`. - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block. - The end block is larger than the start block. - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`. - The start block is at the start of an epoch. - The end block is at the end of an epoch. Emits the event `MaintenanceScheduled`.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setMaintenanceConfig(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the duration restriction, start time restriction, and max allowed for maintenance. Requirements: - The method caller is admin. - The max duration is larger than the min duration. - The max offset is larger than the min offset. Emits the event `MaintenanceConfigUpdated`.\"},\"totalSchedule()\":{\"details\":\"Returns the total of current schedules.\"}},\"stateVariables\":{\"_cooldownSecsToMaintain\":{\"details\":\"The cooldown time to request new schedule.\"},\"_maxMaintenanceDurationInBlock\":{\"details\":\"The max duration to maintenance in blocks.\"},\"_maxOffsetToStartSchedule\":{\"details\":\"The offset to the max block number that the schedule can start.\"},\"_maxSchedule\":{\"details\":\"The max number of scheduled maintenances.\"},\"_minMaintenanceDurationInBlock\":{\"details\":\"The min duration to maintenance in blocks.\"},\"_minOffsetToStartSchedule\":{\"details\":\"The offset to the min block number that the schedule can start.\"},\"_schedule\":{\"details\":\"Mapping from candidate id => maintenance schedule.\"},\"_scheduledCandidates\":{\"details\":\"The set of scheduled candidates.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/Maintenance.sol\":\"Maintenance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/\",\":@contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":@fdk/=dependencies/@fdk-v0.3.0-beta/script/\",\":@openzeppelin-v5/contracts/=dependencies/@openzeppelin-contracts-5.0.2/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-4.7.3/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=dependencies/@prb-test-0.6.4/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":@solady/=dependencies/@fdk-v0.3.0-beta/dependencies/solady-0.0.206/src/\",\":chainlink/=lib/chainlink/\",\":contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":ds-test/=lib/oz-v5/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/oz-v5/lib/erc4626-tests/\",\":forge-std/=dependencies/@fdk-v0.3.0-beta/dependencies/forge-std-1.8.2/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":oz-v5/=lib/oz-v5/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":safe-smart-account/contracts/=lib/safe-smart-account/contracts/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/foundry-deployment-kit/lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport { ITransparentUpgradeableProxyV2 } from \\\"../interfaces/extensions/ITransparentUpgradeableProxyV2.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy, ITransparentUpgradeableProxyV2 {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) { }\\n\\n  /**\\n   * @inheritdoc ITransparentUpgradeableProxyV2\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb84a4f1655596602425260b6c9dcb0be80c817ed7b892a5b33d89299a59932ce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address payable contract_) {\\n    contract_ = payable(_getContractMap()[uint8(contractType)]);\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x53b9c2c44f39fa16fd4582b4667e808b8ab7c43437c263b59b5cbf5d2df47e78\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../udvts/Types.sol\\\";\\n\\ninterface IMaintenance {\\n  /**\\n   * @dev Error thrown when attempting to exit maintenance status while not in maintenance duration.\\n   */\\n  error ErrNotOnMaintenance();\\n  /**\\n   * @dev Error thrown when attempting to schedule an already scheduled event.\\n   */\\n  error ErrAlreadyScheduled();\\n\\n  /**\\n   * @dev Error thrown when referring to a non-existent schedule.\\n   */\\n  error ErrUnexistedSchedule();\\n\\n  /**\\n   * @dev Error thrown when the end block of a schedule is out of range.\\n   */\\n  error ErrEndBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when the start block of a schedule is out of range.\\n   */\\n  error ErrStartBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when attempting to initiate maintenance while already in maintenance mode.\\n   */\\n  error ErrAlreadyOnMaintenance();\\n\\n  /**\\n   * @dev Error thrown when attempting an action before the cooldown period has ended.\\n   */\\n  error ErrCooldownTimeNotYetEnded();\\n\\n  /**\\n   * @dev Error thrown when the total number of schedules exceeds the limit.\\n   */\\n  error ErrTotalOfSchedulesExceeded();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration is specified.\\n   */\\n  error ErrInvalidMaintenanceDuration();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration configuration is provided.\\n   */\\n  error ErrInvalidMaintenanceDurationConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid offset is specified to start the schedule configurations.\\n   */\\n  error ErrInvalidOffsetToStartScheduleConfigs();\\n\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is early exit in maintenance duration.\\n  event MaintenanceExited(address indexed cid);\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed cid, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed cid);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  function initialize(\\n    address validatorContract,\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedule_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external;\\n\\n  function initializeV2() external;\\n\\n  function initializeV3(address profileContract_) external;\\n\\n  function initializeV4() external;\\n\\n  /**\\n   * @dev Exits the maintenance status.\\n   * @param consensusAddr The address of the consensus to exit maintenance status for.\\n   */\\n  function exitMaintenance(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator whose id `validatorId` maintained at the block number `_block`.\\n   */\\n  function checkMaintainedById(address validatorId, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `k` or not.\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata consensusAddrList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedById(\\n    address[] calldata candidateIdList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata _consensusAddrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has finished cooldown.\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has schedule.\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `consensusAddr`.\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedule() external view returns (uint256 count);\\n\\n  /**\\n   * @dev Returns the cooldown to maintain in seconds.\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedules_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `startedAtBlock` to `endedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - The candidate `consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - A schedule for the `consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x8d9aa83cbca065cb1faad78a77a8646f7fd78cfd258ad843d760113083009a3e\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Validator\\u2019s admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Timestamp of last change of any profile info.\\n    uint256 profileLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n    /// @dev Old consensus\\n    TConsensus oldConsensus;\\n    /// @dev Timestamp where the profile is registered.\\n    uint256 registeredAt;\\n    /// @dev VRF key hash for the profile.\\n    bytes32 vrfKeyHash;\\n    /// @dev Timestamp of last change of VRF key hash. Only used in the logic of Beacon. Not used for checking for cooldown of updating the profile.\\n    uint256 vrfKeyHashLastChange;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the consensus of a non-governor profile is changed.\\n  event ConsensusAddressOfNonGovernorChanged(address indexed id);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the VRF key hash of the `id` is changed.\\n  event VRFKeyHashChanged(address indexed id, bytes32 vrfKeyHash);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change any address or pubkey in the profile because cooldown is not ended.\\n  error ErrProfileChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrDuplicatedVRFKeyHash(bytes32 vrfKeyHash);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n  error ErrLookUpIdFailed(TConsensus consensus);\\n  error ErrLookUpIdFromVRFKeyFailed(bytes32 vrfKeyHash);\\n  error ErrValidatorOnRenunciation(address cid);\\n\\n  function initialize(address validatorContract) external;\\n\\n  function initializeV2(address stakingContract, address trustedOrgContract) external;\\n\\n  function initializeV3(uint256 cooldown) external;\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to query required random beacon info from `vrfKeyHash`.\\n  function getVRFKeyHash2BeaconInfo(bytes32 vrfKeyHash)\\n    external\\n    view\\n    returns (address id, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query required random beacon info from `id` address.\\n  function getId2BeaconInfo(address id)\\n    external\\n    view\\n    returns (bytes32 vrfKeyHash, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query `admin` from `id` address.\\n  function getId2Admin(address id) external view returns (address);\\n\\n  /// @dev Getter to query `treasury` from `id` address.\\n  function getId2Treasury(address id) external view returns (address payable);\\n\\n  /// @dev Getter to query `pubkey` from `id` address.\\n  function getId2Pubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `profileLastChange` from `id` address.\\n  function getId2ProfileLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `oldPubkey` from `id` address.\\n  function getId2OldPubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `oldConsensus` from `id` address.\\n  function getId2OldConsensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `registeredAt` from `id` address.\\n  function getId2RegisteredAt(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `consensus` from `id` address.\\n  function getId2Consensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `vrfKeyHash` from `id` address.\\n  function getId2VRFKeyHash(address id) external view returns (bytes32);\\n\\n  /// @dev Getter to query `vrfKeyHashLastChange` from `id` address.\\n  function getId2VRFKeyHashLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to batch query from `id` to `registeredAt`.\\n  function getManyId2RegisteredAt(address[] calldata idList) external view returns (uint256[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `admin`, return address(0) if the profile not exist.\\n  function getManyId2Admin(address[] calldata idList) external view returns (address[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address, revert if not found.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address, revert if not found.\\n  function getVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address.\\n  function tryGetVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeAdminAddr(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @notice The candidate admin changes the VRF key hash.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New VRF key hash must not be duplicated.\\n   * - The VRF key hash change cooldown must be ended.\\n   */\\n  function changeVRFKeyHash(address id, bytes32 vrfKeyHash) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setCooldownConfig(uint256 cooldown) external;\\n\\n  /**\\n   * @dev Returns the config of cool down on change profile info.\\n   */\\n  function getCooldownConfig() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f467b38aaf18dbc09d6b054ba9c859b496bf5deb2a135a3663c2e0fca1e063a\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address payable contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x3cb6bc67853229163685bbba63469fb2ef103bf1cbfec0fed3e9e4686049f45b\",\"license\":\"MIT\"},\"contracts/interfaces/extensions/ITransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransparentUpgradeableProxyV2 {\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) external payable;\\n}\\n\",\"keccak256\":\"0x901e8701f77ca17d9c3483705741e31b3a1771e6900ef2462bdfd0b98c31f4e6\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfoById(address cid) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x995ebd44ad76f770f204e41833c3abe80da9b9a7d2465bb02a78a5d52ad4098d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeAdminAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddr(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddr(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeTreasuryAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddr(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xeb30738d0fdf8b2fc08241326bffa251128a13cb61d1878f864d062d80c10389\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the sum of fast finality score of current validator ids is zero.\\n  event ZeroSumFastFinalityScore(uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the validator set is returned empty from `RoninRandomBeacon` contract. Fallback to Governing Validator Set.\\n  event EmptyValidatorSet(uint256 indexed period, uint256 indexed epoch, address[] fallbackCids);\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(address indexed cid, uint256 rewardAmount, BlockRewardDeprecatedType deprecatedType);\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid, address indexed bridgeOperator, address indexed recipientAddr, uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount, address[] cids, uint256[] amounts, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0xf4c48285478c6815bb56b7080c7ac147ed4ba82e63931241432a361ed65b2267\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(address indexed cid, address indexed recipient, uint256 unlockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid, address indexed recipient, uint256 unlockedAmount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x1e702fcc28ecab3925b459cc1b9dd242308d7d9da55d4fd30c8b0f8382bc6c12\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ICandidateManager } from \\\"./ICandidateManager.sol\\\";\\nimport { ICandidateManagerCallback } from \\\"./ICandidateManagerCallback.sol\\\";\\nimport { ICommonInfo } from \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport { ICoinbaseExecution } from \\\"./ICoinbaseExecution.sol\\\";\\nimport { ISlashingExecution } from \\\"./ISlashingExecution.sol\\\";\\nimport { IEmergencyExit } from \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __slashIndicatorContract,\\n    address __stakingContract,\\n    address __stakingVestingContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address, /* __bridgeTrackingContract */\\n    uint256, /* __maxValidatorNumber */\\n    uint256 __maxValidatorCandidate,\\n    uint256, /* __maxPrioritizedValidatorNumber */\\n    uint256 __minEffectiveDaysOnwards,\\n    uint256 __numberOfBlocksInEpoch,\\n    // __emergencyExitConfigs[0]: emergencyExitLockedAmount\\n    // __emergencyExitConfigs[1]: emergencyExpiryDuration\\n    uint256[2] calldata __emergencyExitConfigs\\n  ) external;\\n\\n  function initializeV2() external;\\n  function initializeV3(address fastFinalityTrackingContract) external;\\n  function initializeV4(address profileContract) external;\\n}\\n\",\"keccak256\":\"0x6d3e6bf7ebde255fed05b13a89d3de0c4fcd963f45e9376cb909bd9be63bfaed\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(TConsensus addr)\\n    external\\n    view\\n    returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcaf9e1294ce8e49bb5a95201face19e11b659fa40dd1e79971bdb9429b2e917d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /// @dev Throws if the period has not ended yet or the period ending block does not exist.\\n  error ErrPeriodNotEndedYet(uint256 period);\\n  /// @dev Throws if the period ending block does not exist.\\n  error ErrPeriodEndingBlockNotTracked(uint256 period, uint256 firstTrackedPeriod);\\n\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the block number that `period` ending at.\\n   *\\n   * Throws error if the period has not ended yet.\\n   * Throws error if the period ending block does not exist.\\n   *\\n   * @param period The period index.\\n   */\\n  function getPeriodEndBlock(uint256 period) external view returns (uint256 blockNumber);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf19183475274410e62bb5b57ccf89b2dc688986b21f0f4179de0692c618a3301\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the consensus address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the id is block producer or not.\\n   */\\n  function isBlockProducerById(address id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa81c50d30de1e9475d868f3c1930aa5ba2a74024eba27e0d33bd62dcc799a764\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xb6ca1ee184facb21437c9703c2041019cbd9b58a27f09efdcbfa5704f2b7716f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LibArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IndexMap } from \\\"./LibIndexMap.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibArray\\n * @dev A library for array-related utility functions in Solidity.\\n */\\nlibrary LibArray {\\n  /**\\n   * @dev Error indicating a length mismatch between two arrays.\\n   */\\n  error ErrLengthMismatch();\\n\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Calculates the sum of an array of uint256 values.\\n   *\\n   * Modified from: https://docs.soliditylang.org/en/v0.8.25/assembly.html#example\\n   *\\n   * @param data The array of uint256 values for which the sum is calculated.\\n   * @return result The sum of the provided array.\\n   */\\n  function sum(uint256[] memory data) internal pure returns (uint256 result) {\\n    assembly (\\\"memory-safe\\\") {\\n      // Load the length (first 32 bytes)\\n      let len := mload(data)\\n      let dataElementLocation := add(data, 0x20)\\n\\n      // Iterate until the bound is not met.\\n      for { let end := add(dataElementLocation, mul(len, 0x20)) } lt(dataElementLocation, end) {\\n        dataElementLocation := add(dataElementLocation, 0x20)\\n      } { result := add(result, mload(dataElementLocation)) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    uint256 length = A.length;\\n    if (length == 0) return false;\\n\\n    unchecked {\\n      for (uint256 i; i < length - 1; ++i) {\\n        for (uint256 j = i + 1; j < length; ++j) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @notice This method normalized the descending-sorted array `values` so that all elements in the `values`\\n   * are still in correct order, have 'relative' diffs and not greater than `sum(normed(values))/divisor`.\\n   * Returns the `normSum` and the `pivot` after normalizing the array.\\n   *\\n   * @dev Given a tuple of `(a, s, k)` and divisor `d` where:\\n   *    - `a` is the array of values of length `n`,\\n   *    - `s` is the sum of the array,\\n   *    - `k` is the pivot value, `k = s / d` initially.\\n   *\\n   * This method normalizes `a` to `a'` such that:\\n   *    (1) Elements in `a` and `a'` are decreased relatively\\n   *    (2) `k' = (s' / d)` and `\\u2200x \\u2208 a': x \\u2264 k'`\\n   *\\n   * Algorithm:\\n   *    1. Init `s = sum(a)`, `k = s/d`.\\n   *    2. While `k` changes:\\n   *       * Replace all `a[i] > k` by `k`\\n   *       * k := sum(unchanged(a[i])) / (d - count(changed(a[i])))\\n   *\\n   * For example:\\n   *    Input:\\n   *      a = [100, 70, 20, 15, 3]\\n   *      d = 3\\n   *    Calculation:\\n   *      Init:    a = [ 100,  70,  20,  15,  3 ];    s = 208;   k = 69\\n   *      Round 1: a = [  69,  69,  20,  15,  3 ];    s = 177;   k = 38\\n   *      Round 2: a = [  38,  38,  20,  15,  3 ];    s = 114;   k = 38\\n   *\\n   *      The calculation stop since all elements in a is \\u2264 k, in other words, `k` is unchanged.\\n   *    Output:\\n   *      s = 114\\n   *      k = 38\\n   *\\n   * Implementation denotes:\\n   *    `pivot`: k\\n   *    `left`:  to-be-changed elements\\n   *    `right`: unchanged elements\\n   *\\n   *    Input:\\n   *                     pivot\\n   *                       v\\n   *            --*-----*--|--------*---------*--------*------\\n   *              ^     ^           ^         ^        ^\\n   *              a[0]  a[1]        a[2]      a[3]     a[4]\\n   *\\n   *    Output:\\n   *                         pivot = a[0] = a[1]\\n   *                           v\\n   *            ---------------|----*---------*--------*------\\n   *                                ^         ^        ^\\n   *                                a[2]      a[3]     a[4]\\n   *\\n   *\\n   */\\n  function findNormalizedSumAndPivot(\\n    uint256[] memory values,\\n    uint256 divisor\\n  ) internal pure returns (uint256 normSum, uint256 pivot) {\\n    divisor = Math.min(values.length, divisor);\\n    values = inplaceDescSort(values);\\n\\n    uint256 sLeft;\\n    uint256 nLeft;\\n    uint256 sRight;\\n    bool shouldExit;\\n\\n    normSum = sum(values);\\n    pivot = normSum / divisor;\\n\\n    while (!shouldExit) {\\n      shouldExit = true;\\n\\n      while (values[nLeft] > pivot) {\\n        sLeft += values[nLeft++];\\n        shouldExit = false;\\n      }\\n\\n      if (shouldExit) break;\\n\\n      sRight = normSum - sLeft;\\n      pivot = sRight / (divisor - nLeft); // Mathematically proven `divisor` is always larger than `nLeft`\\n      sLeft = pivot * nLeft;\\n      normSum = sRight + sLeft;\\n    }\\n  }\\n\\n  /**\\n   * @dev Clips the values in the given array to be within the specified lower and upper bounds.\\n   *\\n   * - The input array is modified in place.\\n   *\\n   * - Examples:\\n   * `inplaceClip([1, 2, 3, 4, 5], 2, 4)` => `[2, 2, 3, 4, 4]`\\n   */\\n  function inplaceClip(\\n    uint256[] memory values,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256[] memory clippedValues) {\\n    uint256 length = values.length;\\n\\n    for (uint256 i; i < length; ++i) {\\n      if (values[i] < lower) values[i] = lower;\\n      if (values[i] > upper) values[i] = upper;\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      clippedValues := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory self, address[] memory other) internal pure returns (bool yes) {\\n    return hash(self) == hash(other);\\n  }\\n\\n  /**\\n   * @dev Hash dynamic size array\\n   * @param self The array of uint256\\n   * @return digest The hash result of the array\\n   */\\n  function hash(uint256[] memory self) internal pure returns (bytes32 digest) {\\n    assembly (\\\"memory-safe\\\") {\\n      digest := keccak256(add(self, 0x20), mul(mload(self), 0x20))\\n    }\\n  }\\n\\n  function hash(address[] memory self) internal pure returns (bytes32 digest) {\\n    return hash(toUint256s(self));\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (uint256) from a and b.\\n   */\\n  function concat(uint256[] memory a, uint256[] memory b) internal pure returns (uint256[] memory c) {\\n    unchecked {\\n      uint256 lengthA = a.length;\\n      uint256 lengthB = b.length;\\n\\n      if (lengthA == 0) return b;\\n      if (lengthB == 0) return a;\\n\\n      c = new uint256[](lengthA + lengthB);\\n\\n      uint256 i;\\n\\n      for (; i < lengthA;) {\\n        c[i] = a[i];\\n        ++i;\\n      }\\n      for (uint256 j; j < lengthB;) {\\n        c[i] = b[j];\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (address) from a and b.\\n   */\\n  function concat(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    return unsafeToAddresses(concat(toUint256s(a), toUint256s(b)));\\n  }\\n\\n  /**\\n   * @dev Converts an array of address to an array of uint256.\\n   */\\n  function toUint256s(address[] memory self) internal pure returns (uint256[] memory uint256s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint256s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of uint96.\\n   */\\n  function unsafeToUint96s(uint256[] memory self) internal pure returns (uint96[] memory uint96s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint96s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of address.\\n   */\\n  function unsafeToAddresses(uint256[] memory self) internal pure returns (address[] memory addresses) {\\n    assembly (\\\"memory-safe\\\") {\\n      addresses := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Create an array of indices (an index array) with provided range.\\n   * @param length The array size\\n   * @return data an array of indices\\n   */\\n  function arange(uint256 length) internal pure returns (uint256[] memory data) {\\n    unchecked {\\n      data = new uint256[](length);\\n      for (uint256 i; i < length; ++i) {\\n        data[i] = i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (uint256) given an array of indices.\\n   *\\n   * Inspiration from: https://numpy.org/doc/stable/reference/generated/numpy.take.html\\n   */\\n  function take(uint256[] memory self, uint256[] memory ids) internal pure returns (uint256[] memory result) {\\n    uint256 length = ids.length;\\n    result = new uint256[](length);\\n    for (uint256 i; i < length; ++i) {\\n      result[i] = self[ids[i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (address) given an array of indices.\\n   */\\n  function take(address[] memory self, uint256[] memory indices) internal pure returns (address[] memory result) {\\n    return unsafeToAddresses(take(toUint256s(self), indices));\\n  }\\n\\n  /**\\n   * @dev Pick the top `k` `keys` of type address[] based on their corresponding `values`.\\n   */\\n  function pickTopKByValues(\\n    address[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (address[] memory pickeds) {\\n    return unsafeToAddresses(pickTopKByValues(toUint256s(keys), values, k));\\n  }\\n\\n  /**\\n   * @dev Picks the top `k` `keys` based on their corresponding `values`.\\n   *\\n   * WARNING: The input array size will be changed. Besides, this fn does not guarantee all elements are sorted\\n   */\\n  function pickTopKByValues(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (uint256[] memory pickeds) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      if (k >= length) return keys;\\n\\n      inplaceDescSortByValue(keys, values);\\n      unsafeResize(keys, k);\\n\\n      return keys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding `indexMap` with the filter function `filterFn`.\\n   */\\n  function filterByIndexMap(\\n    uint256[] memory keys,\\n    IndexMap memory indexMap,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    return filterBy(keys, indexMap._inner, filterFn);\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding value array `values` with the filter function `filterFn`.\\n   */\\n  function filterBy(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      filteredKeys = new uint256[](length);\\n      uint256 nFiltered;\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (filterFn(i, values)) {\\n          filteredKeys[nFiltered++] = keys[i];\\n        }\\n      }\\n\\n      unsafeResize(filteredKeys, nFiltered);\\n\\n      return filteredKeys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of uint256 `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `values`.\\n   */\\n  function inplaceDescSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSort(values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function inplaceDescQuickSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = values.length;\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSort(values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function _inplaceDescQuickSort(uint256[] memory values, int256 left, int256 right) private pure {\\n    unchecked {\\n      if (left < right) {\\n        if (left == right) return;\\n        int256 i = left;\\n        int256 j = right;\\n        uint256 pivot = values[uint256(left + right) >> 1];\\n\\n        while (i <= j) {\\n          while (pivot < values[uint256(i)]) ++i;\\n          while (pivot > values[uint256(j)]) --j;\\n\\n          if (i <= j) {\\n            (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n            ++i;\\n            --j;\\n          }\\n        }\\n\\n        if (left < j) _inplaceDescQuickSort(values, left, j);\\n        if (i < right) _inplaceDescQuickSort(values, i, right);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of addresses `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    address[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (address[] memory sorted) {\\n    return unsafeToAddresses(inplaceDescQuickSortByValue(toUint256s(self), values));\\n  }\\n\\n  /**\\n   * @dev Resize a memory array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(uint256[] memory self, uint256 length) internal pure returns (uint256[] memory resized) {\\n    assembly (\\\"memory-safe\\\") {\\n      resized := self\\n      mstore(resized, length)\\n    }\\n  }\\n\\n  /**\\n   * @dev Resize a memory address array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(address[] memory self, uint256 length) internal pure returns (address[] memory resized) {\\n    return unsafeToAddresses(unsafeResize(toUint256s(self), length));\\n  }\\n\\n  /**\\n   * @dev Sorts `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSortByValue(self, values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `self` and `values`\\n   */\\n  function inplaceDescQuickSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = self.length;\\n    if (length != values.length) revert ErrLengthMismatch();\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSortByValue(self, values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values` based on a corresponding `arr`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `arr` and `values`\\n   */\\n  function _inplaceDescQuickSortByValue(\\n    uint256[] memory arr,\\n    uint256[] memory values,\\n    int256 left,\\n    int256 right\\n  ) private pure {\\n    unchecked {\\n      if (left == right) return;\\n      int256 i = left;\\n      int256 j = right;\\n      uint256 pivot = values[uint256(left + right) >> 1];\\n\\n      while (i <= j) {\\n        while (pivot < values[uint256(i)]) ++i;\\n        while (values[uint256(j)] < pivot) --j;\\n\\n        if (i <= j) {\\n          (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n          (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n          ++i;\\n          --j;\\n        }\\n      }\\n\\n      if (left < j) _inplaceDescQuickSortByValue(arr, values, left, j);\\n      if (i < right) _inplaceDescQuickSortByValue(arr, values, i, right);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe602052be2234f57b7040de8f34aaa934ca1c00d5edec95d607843a16718142a\",\"license\":\"MIT\"},\"contracts/libraries/LibIndexMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nstruct IndexMap {\\n  uint256[] _inner;\\n}\\n\\nusing LibIndexMap for IndexMap global;\\n\\n/**\\n * @title LibIndexMap\\n * @author TuDo1403\\n * @dev The `IndexMap` is a bitmap that represents the presence or absence of elements at specific indices.\\n * It is implemented as an array of uint256 values, where each element in an array is a bitmap which can represent the presence or absence of an element at a particular index.\\n * Each element in an array of bitmap can represent the presence or absence of 256 elements.\\n * The Presence of a particular index is represented by setting the corresponding bit in the bitmap to 1.\\n * Example:\\n * - Given an array of values: [11, 24, 33, 52]. Returns the indexes of odd numbers.\\n * - The values of odd numbers are: [11, 33]. Therefore, the indices of odd numbers are: [0, 2].\\n * - However, we can save more gas by using a bitmap to represent the indices of odd numbers.\\n * - Index 0 is an odd number, so we set the first bit of the bitmap to 1, (bitmap = 0001)\\n * - Index 2 is an odd number, so we set the third bit of the bitmap to 1, (bitmap = 0100)\\n * - The bitmap for the indices of odd number is: b'0001' | b'0100' = b'0101' = 5 in decimal\\n */\\nlibrary LibIndexMap {\\n  /// @dev Throws if the index is out of bitmap length.\\n  error ErrOutOfRange(uint256 index);\\n\\n  /// @dev Maximum number of bits in an indexmap slot.\\n  uint256 internal constant MAX_BIT = 256;\\n\\n  /**\\n   * @dev Wraps an array of uint256 values into an IndexMap struct.\\n   * @param inner The array of uint256 values to wrap.\\n   * @return The wrapped IndexMap struct.\\n   */\\n  function wrap(uint256[] memory inner) internal pure returns (IndexMap memory) {\\n    return IndexMap(inner);\\n  }\\n\\n  /**\\n   * @dev Creates a indexmap array based on the given number of elements.\\n   * @param numElement The number of elements to create the indexmap for.\\n   * @return indexmap The created indexmap array.\\n   */\\n  function create(uint16 numElement) internal pure returns (IndexMap memory indexmap) {\\n    unchecked {\\n      indexmap._inner = new uint256[](1 + uint256(numElement) / MAX_BIT);\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if an index is present in the map.\\n   * @param indexmap The map to check.\\n   * @param index The index to check.\\n   * @return A boolean indicating whether the index is present in the map.\\n   */\\n  function contains(IndexMap memory indexmap, uint256 index) internal pure returns (bool) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      // if index is out of range, return false\\n      if (index >= indexmap._inner.length * size) return false;\\n      return (indexmap._inner[index / size] & (1 << (index % size))) != 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of an element in a indexmap based on its value.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of the element.\\n   * @param index The value to record.\\n   * @return The updated indexmap with recorded existence of the element.\\n   */\\n  function set(IndexMap memory indexmap, uint256 index) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      uint256 pos = index / size;\\n\\n      if (pos >= indexmap._inner.length) revert ErrOutOfRange(index);\\n\\n      indexmap._inner[index / size] |= 1 << (index % size);\\n\\n      return indexmap;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of elements in a indexmap based on their values.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of elements.\\n   * @param indices The array of indices to record.\\n   * @return The updated indexmap with recorded existence of elements.\\n   */\\n  function setBatch(IndexMap memory indexmap, uint256[] memory indices) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 pos;\\n      uint256 size = MAX_BIT;\\n      uint256 length = indices.length;\\n      uint256 bitmapLength = indexmap._inner.length;\\n\\n      for (uint256 i; i < length; ++i) {\\n        pos = indices[i] / size;\\n\\n        if (pos >= bitmapLength) revert ErrOutOfRange(indices[i]);\\n\\n        indexmap._inner[pos] |= 1 << (indices[i] % size);\\n      }\\n\\n      return indexmap;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xce4278abfd4fbdc0de4a7605e8003c248984ed07e8ff3f2eb20183f5f302a6d4\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/Maintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMaintenance.sol\\\";\\nimport \\\"../interfaces/IProfile.sol\\\";\\nimport \\\"../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../utils/DeprecatedSlots.sol\\\";\\nimport { ErrUnauthorized, RoleAccess } from \\\"../utils/CommonErrors.sol\\\";\\n\\ncontract Maintenance is IMaintenance, HasContracts, HasValidatorDeprecated, Initializable {\\n  using Math for uint256;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @dev Mapping from candidate id => maintenance schedule.\\n  mapping(address => Schedule) internal _schedule;\\n\\n  /// @dev The min duration to maintenance in blocks.\\n  uint256 internal _minMaintenanceDurationInBlock;\\n  /// @dev The max duration to maintenance in blocks.\\n  uint256 internal _maxMaintenanceDurationInBlock;\\n  /// @dev The offset to the min block number that the schedule can start.\\n  uint256 internal _minOffsetToStartSchedule;\\n  /// @dev The offset to the max block number that the schedule can start.\\n  uint256 internal _maxOffsetToStartSchedule;\\n  /// @dev The max number of scheduled maintenances.\\n  uint256 internal _maxSchedule;\\n  /// @dev The cooldown time to request new schedule.\\n  uint256 internal _cooldownSecsToMaintain;\\n  /// @dev The set of scheduled candidates.\\n  EnumerableSet.AddressSet internal _scheduledCandidates;\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  modifier syncSchedule() {\\n    _syncSchedule();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address validatorContract,\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedule_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, validatorContract);\\n    _setMaintenanceConfig(\\n      minMaintenanceDurationInBlock_,\\n      maxMaintenanceDurationInBlock_,\\n      minOffsetToStartSchedule_,\\n      maxOffsetToStartSchedule_,\\n      maxSchedule_,\\n      cooldownSecsToMaintain_\\n    );\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    delete ______deprecatedValidator;\\n  }\\n\\n  function initializeV3(address profileContract_) external reinitializer(3) {\\n    _setContract(ContractType.PROFILE, profileContract_);\\n  }\\n\\n  function initializeV4() external reinitializer(4) {\\n    unchecked {\\n      address[] memory validatorIds = IRoninValidatorSet(getContract(ContractType.VALIDATOR)).getValidatorIds();\\n      uint256 length = validatorIds.length;\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (_checkScheduledById(validatorIds[i])) {\\n          _scheduledCandidates.add(validatorIds[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256) {\\n    return _minMaintenanceDurationInBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256) {\\n    return _maxMaintenanceDurationInBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256) {\\n    return _minOffsetToStartSchedule;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256) {\\n    return _maxOffsetToStartSchedule;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function maxSchedule() external view returns (uint256) {\\n    return _maxSchedule;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256) {\\n    return _cooldownSecsToMaintain;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedule_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external onlyAdmin {\\n    _setMaintenanceConfig(\\n      minMaintenanceDurationInBlock_,\\n      maxMaintenanceDurationInBlock_,\\n      minOffsetToStartSchedule_,\\n      maxOffsetToStartSchedule_,\\n      maxSchedule_,\\n      cooldownSecsToMaintain_\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external override {\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    address candidateId = __css2cid(consensusAddr);\\n\\n    if (!validatorContract.isBlockProducerById(candidateId)) revert ErrUnauthorized(msg.sig, RoleAccess.BLOCK_PRODUCER);\\n    _requireCandidateAdmin(candidateId);\\n    if (_checkScheduledById(candidateId)) revert ErrAlreadyScheduled();\\n    if (!_checkCooldownEndedById(candidateId)) revert ErrCooldownTimeNotYetEnded();\\n    if (_syncSchedule() >= _maxSchedule) revert ErrTotalOfSchedulesExceeded();\\n    if (!startedAtBlock.inRange(block.number + _minOffsetToStartSchedule, block.number + _maxOffsetToStartSchedule)) {\\n      revert ErrStartBlockOutOfRange();\\n    }\\n    if (startedAtBlock >= endedAtBlock) revert ErrStartBlockOutOfRange();\\n\\n    uint256 maintenanceElapsed = endedAtBlock - startedAtBlock + 1;\\n\\n    if (!maintenanceElapsed.inRange(_minMaintenanceDurationInBlock, _maxMaintenanceDurationInBlock)) {\\n      revert ErrInvalidMaintenanceDuration();\\n    }\\n    if (!validatorContract.epochEndingAt(startedAtBlock - 1)) revert ErrStartBlockOutOfRange();\\n    if (!validatorContract.epochEndingAt(endedAtBlock)) revert ErrEndBlockOutOfRange();\\n\\n    Schedule storage _sSchedule = _schedule[candidateId];\\n    _sSchedule.from = startedAtBlock;\\n    _sSchedule.to = endedAtBlock;\\n    _sSchedule.lastUpdatedBlock = block.number;\\n    _sSchedule.requestTimestamp = block.timestamp;\\n    _scheduledCandidates.add(candidateId);\\n\\n    emit MaintenanceScheduled(candidateId, _sSchedule);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external override syncSchedule {\\n    address candidateId = __css2cid(consensusAddr);\\n\\n    _requireCandidateAdmin(candidateId);\\n\\n    if (!_checkScheduledById(candidateId)) revert ErrUnexistedSchedule();\\n    if (_checkMaintainedById(candidateId, block.number)) revert ErrAlreadyOnMaintenance();\\n\\n    Schedule storage _sSchedule = _schedule[candidateId];\\n    delete _sSchedule.from;\\n    delete _sSchedule.to;\\n    _sSchedule.lastUpdatedBlock = block.number;\\n    _scheduledCandidates.remove(candidateId);\\n\\n    emit MaintenanceScheduleCancelled(candidateId);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function exitMaintenance(TConsensus consensusAddr) external syncSchedule {\\n    address candidateId = __css2cid(consensusAddr);\\n    uint256 currentBlock = block.number;\\n\\n    _requireCandidateAdmin(candidateId);\\n\\n    if (!_checkMaintainedById(candidateId, currentBlock)) revert ErrNotOnMaintenance();\\n\\n    Schedule storage _sSchedule = _schedule[candidateId];\\n    _sSchedule.to = currentBlock;\\n    _sSchedule.lastUpdatedBlock = currentBlock;\\n    _scheduledCandidates.remove(candidateId);\\n\\n    emit MaintenanceExited(candidateId);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view override returns (Schedule memory) {\\n    return _schedule[__css2cid(consensusAddr)];\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata addrList,\\n    uint256 atBlock\\n  ) external view override returns (bool[] memory) {\\n    address[] memory idList = __css2cidBatch(addrList);\\n    return _checkManyMaintainedById(idList, atBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkManyMaintainedById(\\n    address[] calldata idList,\\n    uint256 atBlock\\n  ) external view override returns (bool[] memory) {\\n    return _checkManyMaintainedById(idList, atBlock);\\n  }\\n\\n  function _checkManyMaintainedById(\\n    address[] memory idList,\\n    uint256 atBlock\\n  ) internal view returns (bool[] memory resList) {\\n    uint256 length = idList.length;\\n    resList = new bool[](length);\\n\\n    for (uint256 i; i < length; ++i) {\\n      resList[i] = _checkMaintainedById(idList[i], atBlock);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata addrList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view override returns (bool[] memory) {\\n    address[] memory idList = __css2cidBatch(addrList);\\n    return _checkManyMaintainedInBlockRangeById(idList, fromBlock, toBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view override returns (bool[] memory) {\\n    return _checkManyMaintainedInBlockRangeById(idList, fromBlock, toBlock);\\n  }\\n\\n  function _checkManyMaintainedInBlockRangeById(\\n    address[] memory idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) internal view returns (bool[] memory resList) {\\n    uint256 length = idList.length;\\n    resList = new bool[](length);\\n\\n    for (uint256 i; i < length; ++i) {\\n      resList[i] = _maintainingInBlockRange(idList[i], fromBlock, toBlock);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function totalSchedule() public view returns (uint256 count) {\\n    unchecked {\\n      address[] memory mSchedules = _scheduledCandidates.values();\\n      uint256 length = mSchedules.length;\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (_checkScheduledById(mSchedules[i])) ++count;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 atBlock) external view override returns (bool) {\\n    return _checkMaintainedById(__css2cid(consensusAddr), atBlock);\\n  }\\n\\n  /**\\n   * @dev Synchronizes the schedule by checking if the scheduled candidates are still in maintenance and removes the candidates that are no longer in maintenance.\\n   * @return count The number of active schedules.\\n   */\\n  function _syncSchedule() internal returns (uint256 count) {\\n    unchecked {\\n      address[] memory mSchedules = _scheduledCandidates.values();\\n      uint256 length = mSchedules.length;\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (_checkScheduledById(mSchedules[i])) {\\n          ++count;\\n        } else {\\n          _scheduledCandidates.remove(mSchedules[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkMaintainedById(address candidateId, uint256 atBlock) external view override returns (bool) {\\n    return _checkMaintainedById(candidateId, atBlock);\\n  }\\n\\n  function _checkMaintainedById(address candidateId, uint256 atBlock) internal view returns (bool) {\\n    Schedule storage _s = _schedule[candidateId];\\n    return _s.from <= atBlock && atBlock <= _s.to;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) public view override returns (bool) {\\n    return _maintainingInBlockRange(__css2cid(consensusAddr), fromBlock, toBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view override returns (bool) {\\n    return _checkScheduledById(__css2cid(consensusAddr));\\n  }\\n\\n  function _checkScheduledById(address candidateId) internal view returns (bool) {\\n    return block.number <= _schedule[candidateId].to;\\n  }\\n\\n  /**\\n   * @inheritdoc IMaintenance\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view override returns (bool) {\\n    return _checkCooldownEndedById(__css2cid(consensusAddr));\\n  }\\n\\n  function _checkCooldownEndedById(address candidateId) internal view returns (bool) {\\n    unchecked {\\n      return block.timestamp > _schedule[candidateId].requestTimestamp + _cooldownSecsToMaintain;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the min block period and max block period to maintenance.\\n   *\\n   * Requirements:\\n   * - The max period is larger than the min period.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function _setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedule_,\\n    uint256 cooldownSecsToMaintain_\\n  ) internal {\\n    if (minMaintenanceDurationInBlock_ >= maxMaintenanceDurationInBlock_) revert ErrInvalidMaintenanceDurationConfig();\\n    if (minOffsetToStartSchedule_ >= maxOffsetToStartSchedule_) revert ErrInvalidOffsetToStartScheduleConfigs();\\n\\n    _minMaintenanceDurationInBlock = minMaintenanceDurationInBlock_;\\n    _maxMaintenanceDurationInBlock = maxMaintenanceDurationInBlock_;\\n    _minOffsetToStartSchedule = minOffsetToStartSchedule_;\\n    _maxOffsetToStartSchedule = maxOffsetToStartSchedule_;\\n    _maxSchedule = maxSchedule_;\\n    _cooldownSecsToMaintain = cooldownSecsToMaintain_;\\n    emit MaintenanceConfigUpdated(\\n      minMaintenanceDurationInBlock_,\\n      maxMaintenanceDurationInBlock_,\\n      minOffsetToStartSchedule_,\\n      maxOffsetToStartSchedule_,\\n      maxSchedule_,\\n      cooldownSecsToMaintain_\\n    );\\n  }\\n\\n  /**\\n   * @dev Check if the validator was maintaining in the current period.\\n   *\\n   * Note: This method should be called at the end of the period.\\n   */\\n  function _maintainingInBlockRange(\\n    address candidateId,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) private view returns (bool) {\\n    Schedule storage s = _schedule[candidateId];\\n    return Math.twoRangeOverlap(fromBlock, toBlock, s.from, s.to);\\n  }\\n\\n  /**\\n   * @dev Checks if the caller is a candidate admin for the given candidate ID.\\n   */\\n  function _requireCandidateAdmin(address candidateId) internal view {\\n    if (!IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isCandidateAdminById(candidateId, msg.sender)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n    }\\n  }\\n\\n  function __css2cid(TConsensus consensusAddr) internal view returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view returns (address[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n}\\n\",\"keccak256\":\"0x25a82e05347e04ee071ce739fb2af6f7a0b7a53b7b54540c80af01d7a4c65896\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\n\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x48a81c14acbe613ff334674f913cf287eb14d52134abba5a7e44ebaba3b3adfc\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */\\n  UNKNOWN,\\n  /*  1 */\\n  PAUSE_ENFORCER,\\n  /*  2 */\\n  BRIDGE,\\n  /*  3 */\\n  BRIDGE_TRACKING,\\n  /*  4 */\\n  GOVERNANCE_ADMIN,\\n  /*  5 */\\n  MAINTENANCE,\\n  /*  6 */\\n  SLASH_INDICATOR,\\n  /*  7 */\\n  STAKING_VESTING,\\n  /*  8 */\\n  VALIDATOR,\\n  /*  9 */\\n  STAKING,\\n  /* 10 */\\n  RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */\\n  BRIDGE_MANAGER,\\n  /* 12 */\\n  BRIDGE_SLASH,\\n  /* 13 */\\n  BRIDGE_REWARD,\\n  /* 14 */\\n  FAST_FINALITY_TRACKING,\\n  /* 15 */\\n  PROFILE,\\n  /* 16 */\\n  RANDOM_BEACON\\n}\\n\",\"keccak256\":\"0x2ef1b8fcaa991f1d856ca67d19e8ac1576319c03c874cedcc6a7da1860d65a78\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibArray } from \\\"../libraries/LibArray.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport {\\n  ErrAddressIsNotCreatedEOA,\\n  ErrZeroAddress,\\n  ErrOnlySelfCall,\\n  ErrZeroCodeContract,\\n  ErrUnsupportedInterface\\n} from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using LibArray for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert LibArray.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x7d525f577b73f76a4327fe3cb6ad410b2fa8ae7c5702b2128bb899cae3ee52b5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */\\n  UNKNOWN,\\n  /* 1 */\\n  ADMIN,\\n  /* 2 */\\n  COINBASE,\\n  /* 3 */\\n  GOVERNOR,\\n  /* 4 */\\n  CANDIDATE_ADMIN,\\n  /* 5 */\\n  WITHDRAWAL_MIGRATOR,\\n  /* 6 */\\n  __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */\\n  BLOCK_PRODUCER,\\n  /* 8 */\\n  VALIDATOR_CANDIDATE,\\n  /* 9 */\\n  CONSENSUS,\\n  /* 10 */\\n  TREASURY\\n}\\n\",\"keccak256\":\"0xb4be3fbf480504f85653a3f598dd90b32b1afd1c93de472cfbcc0a0741c1aece\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 19,
  "storageLayout": {
    "storage": [
      {
        "astId": 38272,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 98725,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 98728,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 20504,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_schedule",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Schedule)5275_storage)"
      },
      {
        "astId": 20507,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_minMaintenanceDurationInBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 20510,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_maxMaintenanceDurationInBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 20513,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_minOffsetToStartSchedule",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 20516,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_maxOffsetToStartSchedule",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 20519,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_maxSchedule",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 20522,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_cooldownSecsToMaintain",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20526,
        "contract": "contracts/ronin/Maintenance.sol:Maintenance",
        "label": "_scheduledCandidates",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)101882_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Schedule)5275_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMaintenance.Schedule)",
        "numberOfBytes": "32",
        "value": "t_struct(Schedule)5275_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)101882_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 101881,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)101581_storage"
          }
        ]
      },
      "t_struct(Schedule)5275_storage": {
        "encoding": "inplace",
        "label": "struct IMaintenance.Schedule",
        "numberOfBytes": "128",
        "members": [
          {
            "astId": 5268,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5270,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5272,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "lastUpdatedBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5274,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "requestTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(Set)101581_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 101576,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 101580,
            "contract": "contracts/ronin/Maintenance.sol:Maintenance",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1718637431,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}