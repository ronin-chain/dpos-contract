{
  "abi": [
    {
      "type": "function",
      "name": "COOLDOWN_PERIOD_THRESHOLD",
      "inputs": [],
      "outputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADDITION_GAS",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "PERIOD_DURATION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "bulkSetValidatorThresholds",
      "inputs": [
        {
          "name": "validatorTypes",
          "type": "uint8[]",
          "internalType": "enum IRandomBeacon.ValidatorType[]"
        },
        {
          "name": "thresholds",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "calcKeyHash",
      "inputs": [
        {
          "name": "publicKeys",
          "type": "uint256[2]",
          "internalType": "uint256[2]"
        }
      ],
      "outputs": [
        {
          "name": "keyHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "execFinalizeBeaconAndPendingCids",
      "inputs": [
        {
          "name": "lastUpdatedPeriod",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "newPeriod",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "allCids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRecordAndSlashUnavailability",
      "inputs": [
        {
          "name": "lastUpdatedPeriod",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "newPeriod",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "slashIndicator",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "allCids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRequestRandomSeedForNextPeriod",
      "inputs": [
        {
          "name": "lastUpdatedPeriod",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "newPeriod",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "fulfillRandomSeed",
      "inputs": [
        {
          "name": "req",
          "type": "tuple",
          "internalType": "struct RandomRequest",
          "components": [
            {
              "name": "period",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "prevBeacon",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "verifyingContract",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        {
          "name": "proof",
          "type": "tuple",
          "internalType": "struct VRF.Proof",
          "components": [
            {
              "name": "pk",
              "type": "uint256[2]",
              "internalType": "uint256[2]"
            },
            {
              "name": "gamma",
              "type": "uint256[2]",
              "internalType": "uint256[2]"
            },
            {
              "name": "c",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "s",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "seed",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "uWitness",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "cGammaWitness",
              "type": "uint256[2]",
              "internalType": "uint256[2]"
            },
            {
              "name": "sHashWitness",
              "type": "uint256[2]",
              "internalType": "uint256[2]"
            },
            {
              "name": "zInv",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getActivatedAtPeriod",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getBeaconData",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "value",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "finalized",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "submissionCount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getLastFinalizedPeriod",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRequestHash",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "reqHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSavedValidatorSet",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct LibSortValidatorsByBeacon.ValidatorStorage",
          "components": [
            {
              "name": "_pickAll",
              "type": "bool",
              "internalType": "bool"
            },
            {
              "name": "_sorted",
              "type": "tuple",
              "internalType": "struct LibSortValidatorsByBeacon.SortedValidatorStorage",
              "components": [
                {
                  "name": "_nRV",
                  "type": "uint16",
                  "internalType": "uint16"
                },
                {
                  "name": "_nonRotatingValidators",
                  "type": "address[]",
                  "internalType": "address[]"
                },
                {
                  "name": "_rotatingValidators",
                  "type": "tuple[]",
                  "internalType": "struct LibSortValidatorsByBeacon.RotatingValidatorStorage[]",
                  "components": [
                    {
                      "name": "_cid",
                      "type": "address",
                      "internalType": "address"
                    },
                    {
                      "name": "_staked",
                      "type": "uint96",
                      "internalType": "uint96"
                    }
                  ]
                }
              ]
            },
            {
              "name": "_unsorted",
              "type": "tuple",
              "internalType": "struct LibSortValidatorsByBeacon.UnsortedValidatorStorage",
              "components": [
                {
                  "name": "_cids",
                  "type": "address[]",
                  "internalType": "address[]"
                }
              ]
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSelectedValidatorSet",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "epoch",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "pickedCids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUnavailabilityCount",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "count",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUnavailabilityCountById",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "count",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUnavailabilitySlashThreshold",
      "inputs": [],
      "outputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidatorThreshold",
      "inputs": [
        {
          "name": "validatorType",
          "type": "uint8",
          "internalType": "enum IRandomBeacon.ValidatorType"
        }
      ],
      "outputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "profile",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "staking",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "trustedOrg",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "validatorSet",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "slashThreshold",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "activatedAtPeriod",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "validatorTypes",
          "type": "uint8[]",
          "internalType": "enum IRandomBeacon.ValidatorType[]"
        },
        {
          "name": "thresholds",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isSubmittedAt",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "submitted",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isSubmittedAtById",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "submitted",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isSubmittedAtByKeyHash",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "keyHash",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "submitted",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "pickValidatorSetForCurrentPeriod",
      "inputs": [
        {
          "name": "epoch",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "pickedCids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setUnavailabilitySlashThreshold",
      "inputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "BeaconFinalized",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RandomSeedFulfilled",
      "inputs": [
        {
          "name": "by",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "reqHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RandomSeedRequested",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "reqHash",
          "type": "bytes32",
          "indexed": true,
          "internalType": "bytes32"
        },
        {
          "name": "req",
          "type": "tuple",
          "indexed": false,
          "internalType": "struct RandomRequest",
          "components": [
            {
              "name": "period",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "prevBeacon",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "chainId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "verifyingContract",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "SlashUnavailabilityThresholdUpdated",
      "inputs": [
        {
          "name": "value",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorSetSaved",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "pickedAll",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        },
        {
          "name": "nRV",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "nonRotatingValidators",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "rotatingValidators",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "rotatingStakeAmounts",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorThresholdUpdated",
      "inputs": [
        {
          "name": "validatorType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum IRandomBeacon.ValidatorType"
        },
        {
          "name": "threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyFinalizedBeacon",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrAlreadySubmitted",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidChainId",
      "inputs": [
        {
          "name": "expected",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "actual",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidKeyHash",
      "inputs": [
        {
          "name": "expected",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "actual",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidPeriod",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidProof",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidRandomRequest",
      "inputs": [
        {
          "name": "expected",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "actual",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidThresholdConfig",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidVerifyingContract",
      "inputs": [
        {
          "name": "expected",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrLengthMismatch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrLengthMismatch",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNotActivated",
      "inputs": [
        {
          "name": "untilPeriod",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNotEndedChangeKeyHashCooldown",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrNotEndedRegisterCooldown",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrNotFinalizedBeacon",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrOutOfRange",
      "inputs": [
        {
          "name": "index",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorizedCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "absolutePath": "RoninRandomBeacon_Mainnet.sol",
  "address": "0xEEFA82a9F0ECce5Ce6052C15e48fF7eC2D95F83A",
  "ast": "",
  "blockNumber": 35601639,
  "bytecode": "0x60a060405234801561001057600080fd5b50610019610022565b436080526100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516144d36100fd600039600061086701526144d36000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806380d1271011610104578063e02f6271116100a2578063e7d4699711610071578063e7d469971461044c578063eb0645c414610453578063f1a7340b14610466578063f5a77abb1461047957600080fd5b8063e02f627114610400578063e3a4376514610413578063e444722a14610426578063e78bb6271461043957600080fd5b80639c7300e3116100de5780639c7300e31461039a578063d0ddb12b146103ad578063d1bd2f01146103cd578063de981f1b146103d557600080fd5b806380d1271014610328578063865e6fd31461037f578063917a65bd1461039257600080fd5b80633a570332116101715780635cd8a76b1161014b5780635cd8a76b146102da57806365291db7146102e25780636558954f1461030b5780637931e9ec1461031557600080fd5b80633a570332146102685780633ba1de371461027b57806346337c2f1461028e57600080fd5b806316519133116101ad578063165191331461020b5780633355b0f01461022b57806335188e311461024057806338e454b11461026057600080fd5b8063035d0062146101d457806303827884146101fa57806311ed98f714610203575b600080fd5b6101e76101e2366004613a0e565b61048c565b6040519081526020015b60405180910390f35b6101e761183881565b6034546101e7565b61021e610219366004613a2f565b6104cb565b6040516101f19190613a96565b61023e610239366004613aa9565b610521565b005b6101e761024e366004613aa9565b60009081526037602052604090205490565b61023e610535565b6101e7610276366004613ae2565b61060d565b61023e610289366004613b4b565b610621565b6102ca61029c366004613bb5565b60009182526037602090815260408084206001600160a01b0390931684526003909201905290205460ff1690565b60405190151581526020016101f1565b61023e6106ea565b6101e76102f0366004613ae2565b6001600160a01b031660009081526036602052604090205490565b6101e76201518081565b61021e610323366004613aa9565b61076e565b610364610336366004613aa9565b60009081526037602052604090206001810154600290910154909160ff821691610100900463ffffffff1690565b604080519384529115156020840152908201526060016101f1565b61023e61038d366004613bf4565b610782565b6035546101e7565b61023e6103a8366004613c20565b6107a1565b6103c06103bb366004613aa9565b610964565b6040516101f19190613d06565b6033546101e7565b6103e86103e3366004613dc7565b6109b2565b6040516001600160a01b0390911681526020016101f1565b6102ca61040e366004613bb5565b610a46565b61023e610421366004613a2f565b610a55565b61023e610434366004613de2565b610ab8565b6101e7610447366004613f16565b610c75565b60016101e7565b6102ca610461366004613a2f565b610c80565b61023e610474366004613f32565b610d4a565b61023e610487366004613f79565b610fc9565b6000603860008360048111156104a4576104a4613fd9565b60048111156104b5576104b5613fd9565b8152602001908152602001600020549050919050565b600082815260376020526040902060028101546060919060ff1661050a5760405163d28d7c0760e01b8152600481018590526024015b60405180910390fd5b61051984848360010154610fdd565b949350505050565b6105296111ad565b61053281611223565b50565b600054600390610100900460ff16158015610557575060005460ff8083169116105b6105ba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610501565b6000805461ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b600061061b6102f083611258565b92915050565b600861062c816112e9565b8560335481106106e15760008681526037602052604081209061065089878761134e565b9050600061065e600a6109b2565b6001600160a01b0316632cccb53c836040518263ffffffff1660e01b81526004016106899190613a96565b600060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106ce9190810190613fef565b90506106dd838b8a85856114c3565b5050505b50505050505050565b600054600290610100900460ff16158015610557575060005460ff8083169116106105ba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610501565b606061061b61077c4261166a565b836104cb565b61078a6111ad565b61079381611679565b61079d82826116c8565b5050565b600054610100900460ff16158080156107c15750600054600160ff909116105b806107db5750303b1580156107db575060005460ff166001145b61083e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610501565b6000805460ff191660011790558015610861576000805461ff0019166101001790555b604080517f0000000000000000000000000000000000000000000000000000000000000000406020820152419181019190915242606082015246608082015260009060a001604051602081830303815290604052805190602001209050866033819055506108ce88611223565b6108da86868686611779565b6108e48782611977565b6108ef600f8d6116c8565b6108fa60098c6116c8565b61090560088a6116c8565b610910600a8b6116c8565b508015610957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b61096c6138b3565b6000828152603760205260409020600281015460ff166109a25760405163d28d7c0760e01b815260048101849052602401610501565b6109ab83611a2b565b9392505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb60008360108111156109e9576109e9613fd9565b60ff1681526020810191909152604001600020546001600160a01b0316905080610a4157816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610501919061409d565b919050565b60006109ab8361029c84611258565b6008610a60816112e9565b816033548110610ab2578284108015610a795750610ab2565b600185016000818152603760205260408120549003610aaf57600086815260376020526040902060010154610aaf908290611977565b50505b50505050565b6008610ac3816112e9565b836033548110610aaf57600085815260376020526040812090610ae788878761134e565b90506000610af5600a6109b2565b6001600160a01b0316632cccb53c836040518263ffffffff1660e01b8152600401610b209190613a96565b600060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b659190810190613fef565b9050610b718389611be5565b60386020527f44eb26011dd1cf82e0b45a2fb60b23f01ab68cabbe2fe1f3e7b70c0873d5dc5b547f76ace02705df1df747e114090468e0edd81a8d99edc641fff18613cd34df0a6e5460046000527fcc8ed3027127ab69e71f55f03e2b60fb19c73a8aa6226b8d2256163b82f4941f54610c6a928b92909186610bf460096109b2565b6001600160a01b0316635a2ac073896040518263ffffffff1660e01b8152600401610c1f9190613a96565b600060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c649190810190613fef565b87611c3e565b505050505050505050565b600061061b82611d5b565b600080610c8d600f6109b2565b6040517fb96f5c3e000000000000000000000000000000000000000000000000000000008152600481018590529091506000906001600160a01b0383169063b96f5c3e90602401602060405180830381865afa158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1591906140ab565b60008681526037602090815260408083206001600160a01b038516845260030190915290205490915060ff1695945050505050565b6000610d63610d5e368590038501856140c8565b611d8b565b604080518082018252919250600091610d949185906002908390839080828437600092019190915250611d5b915050565b90506000610da2600f6109b2565b90506000806000836001600160a01b03166348b2c382866040518263ffffffff1660e01b8152600401610dd791815260200190565b606060405180830381865afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190614134565b9250925092506000610e2a60086109b2565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8b919061416b565b89356000908152603760205260409020909150610eaa8a82848b611dcd565b610eb5858484611f93565b610ec28a8a848a886120bb565b6001600160a01b038516600090815260038201602052604090205460ff1615610f17576040517f23afea6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101805464ffffffff0019811660016101009283900463ffffffff908116820116909202179091556001600160a01b03861660009081526003830160205260409020805460ff19169091179055610f82610f78368b90038b018b614184565b8a60c0013561215e565b600182018054909118905560405188908b359033907f9c42f0e233770417c75c168e2ec97a2db8e34b756d12f8e002e90d144f4a16cc90600090a450505050505050505050565b610fd16111ad565b610ab284848484611779565b60008381527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f1402260060205260409020805460609190600482019060ff161561107c5780546040805160208084028201810190925282815291839183018282801561106e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611050575b5050505050925050506109ab565b60008260010190506000816001018054806020026020016040519081016040528092919081815260200182805480156110de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110c0575b505085549394505061ffff9092169150506000819003611104575093506109ab92505050565b600083600201805480602002602001604051908101604052809291908181526020016000905b8282101561117e57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff168183015282526001909201910161112a565b505050509050600061119282848b8d6121c9565b905061119e848261236d565b9b9a5050505050505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314611221576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610501929190614228565b565b60358190556040518181527fc642d5e4298fca4d2285021791ffdf4afce31ec672299930b7ada0047b15d24390602001610602565b6000611264600f6109b2565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156112c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b91906140ab565b6112f2816109b2565b6001600160a01b0316336001600160a01b031614610532576000356001600160e01b03191681336040517f8383e63400000000000000000000000000000000000000000000000000000000815260040161050193929190614256565b6060600060018161135f600f6109b2565b6001600160a01b031663c621ab5887876040518363ffffffff1660e01b815260040161138c92919061428b565b600060405180830381865afa1580156113a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113d19190810190613fef565b9050848067ffffffffffffffff8111156113ed576113ed613e35565b604051908082528060200260200182016040528015611416578160200160208202803683370190505b50945060005b818110156114b557888461144885848151811061143b5761143b6142d9565b602002602001015161166a565b01116114ad57878782818110611460576114606142d9565b90506020020160208101906114759190613ae2565b865160018701968891811061148c5761148c6142d9565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60010161141c565b505050908252509392505050565b836033548110610aaf5782516035546000918291825b82811015610957578681815181106114f3576114f36142d9565b602002602001015160001461166257878181518110611514576115146142d9565b6020026020010151945060366000866001600160a01b03166001600160a01b031681526020019081526020016000205493508a6003016000866001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff16156115a55783156115a0576001600160a01b0385166000908152603660205260408120555b611662565b6001600160a01b0385166000908152603660205260409020600190940193849055818410611662576040517f35cbdbe30000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018c90528a16906335cbdbe390604401600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b5050506001600160a01b038616600090815260366020526040812055505b6001016114d9565b600061061b6201518083614305565b806001600160a01b03163b600003610532576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610501565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb60008460108111156116fe576116fe613fd9565b60ff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055811682601081111561174c5761174c613fd9565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b828181146117c1576040517f1ad599d40000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610501565b60008060005b83811015611899578787828181106117e1576117e16142d9565b90506020020160208101906117f69190613a0e565b915085858281811061180a5761180a6142d9565b905060200201359250826038600084600481111561182a5761182a613fd9565b600481111561183b5761183b613fd9565b815260208101919091526040016000205581600481111561185e5761185e613fd9565b6040518481527f57e533b2b2703988ec2b03256b82a8f952d21aecdcb8644c531a3020210089069060200160405180910390a26001016117c7565b5060386020527f33a28b70ecab075fc507d0cb5ffac06e3bc912aa6c671a1fa4ccb48318e19b11547fcc8ed3027127ab69e71f55f03e2b60fb19c73a8aa6226b8d2256163b82f4941f547f76ace02705df1df747e114090468e0edd81a8d99edc641fff18613cd34df0a6e5460026000527f44eb26011dd1cf82e0b45a2fb60b23f01ab68cabbe2fe1f3e7b70c0873d5dc5b546119369190614319565b6119409190614319565b146106e1576040517f970f2d6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825283815260208101839052469181019190915230606082015260006119a482611d8b565b82516000908152603760205260409081902082905551909150819085907f6c8f5422289494c55b959cb4d0900ec451d35b3bdf06e9d29cd80bfab61b243890611a1d9086908151815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b60405180910390a350505050565b611a336138b3565b60008281527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f14022600602052604090206040805160608082018352835460ff16151582528251908101835260018401805461ffff1682526002850180548551602082810282018101909752818152949695808801958582019390929091830182828015611ae657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ac8575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611b6857600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1681830152825260019092019101611b14565b50505091525050815260408051600484018054602081810284018501855283810182815295019492939192849290918491840182828015611bd257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611bb4575b5050509190925250505090525092915050565b60028201805460ff19166001908117909155603482905582015460405182917fd31a863f0b5130ba75e27a3764828141ba7bc06056dfcdade31d12ab52a4278491611c3291815260200190565b60405180910390a25050565b8251825181148015611c505750815181145b611c6d5760405163ab3a7f9960e01b815260040160405180910390fd5b80858789010110611c8857611c82888561237f565b506106e1565b6000611c9382612477565b90506000611ca0836124f5565b90506000611cb18386612559612581565b9050611cc8611cc0878361263c565b82908c6126f1565b9050611cd48282612719565b5080518a0398909801976000611ced848461282761284a565b9050611cfc611cc0888361263c565b9050611d088382612719565b506000611d18858561282761284a565b9050611d4c8d8b611d33611d2c878761285b565b8d90612971565b611d3d8d86612971565b611d478d8761263c565b612980565b50505050505050505050505050565b600081604051602001611d6e919061435d565b604051602081830303815290604052805190602001209050919050565b8051602080830151604080850151606080870151835195860196909652918401929092528201526001600160a01b03909116608082015260009060a001611d6e565b46846040013514611e1657604080517fbf65d029000000000000000000000000000000000000000000000000000000008152466004820152908501356024820152604401610501565b30611e276080860160608701613ae2565b6001600160a01b031614611e8b5730611e466080860160608701613ae2565b6040517f23400dbf0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015291166024820152604401610501565b83358210611ec5576040517fca5d513700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60335484351015611f05576040517fba59f28e00000000000000000000000000000000000000000000000000000000815284356004820152602401610501565b600283015460ff1615611f47576040517f4a5a251600000000000000000000000000000000000000000000000000000000815284356004820152602401610501565b8254818114611f8c576040517f639beb990000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401610501565b5050505050565b6000611f9f600a6109b2565b6040517fb8cc3a500000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192509082169063b8cc3a5090602401602060405180830381865afa158015612002573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612026919061416b565b60000361206d576040517f8f47e7e30000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610501565b8160016120798561166a565b6120839190614319565b1115610ab2576040517f2a3c9cd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260016120c78361166a565b6120d19190614319565b1115612109576040517fc351997500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c084013561212783612121368990038901896140c8565b90612b0d565b14611f8c576040517f1420993200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006121928360000151846020015185604001518660600151868860a001518960c001518a60e001518b6101000151612b56565b600383602001516040516020016121aa92919061436b565b60408051601f1981840301815291905280516020909101209392505050565b83516060908067ffffffffffffffff8111156121e7576121e7613e35565b604051908082528060200260200182016040528015612210578160200160208202803683370190505b50915060008167ffffffffffffffff81111561222e5761222e613e35565b604051908082528060200260200182016040528015612257578160200160208202803683370190505b50905060008060008060405190508881528760208201526060810160405260005b86811015612361578b8181518110612292576122926142d9565b6020026020010151600001519450848882815181106122b3576122b36142d9565b60200260200101906001600160a01b031690816001600160a01b0316815250508b81815181106122e5576122e56142d9565b6020026020010151602001516bffffffffffffffffffffffff169250846040830152606082206fffffffffffffffffffffffffffffffff81168160801c9150670de0b6b3a764000085048282188182020296505050508386828151811061234e5761234e6142d9565b6020908102919091010152600101612278565b5061119e87868c612d91565b60606109ab61237c848461285b565b90565b60008281527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f1402260060205260408120805460ff19166001908117825583519192508201906123d4906004840190602086019061390f565b50805461ffff191681556123ec600282016000613981565b6123fa600182016000613981565b837f32c9c468454fcf853e08d256000b08598539a799e849e0e7d8309c15eeb53ec360016000868160405190808252806020026020018201604052801561244b578160200160208202803683370190505b506040805160008152602081019182905261246995949392916143b0565b60405180910390a250505050565b60608167ffffffffffffffff81111561249257612492613e35565b6040519080825280602002602001820160405280156124bb578160200160208202803683370190505b50905060005b828110156124ef57808282815181106124dc576124dc6142d9565b60209081029190910101526001016124c1565b50919050565b60408051602081019091526060815261010061ffff83160460010167ffffffffffffffff81111561252857612528613e35565b604051908082528060200260200182016040528015612551578160200160208202803683370190505b508152919050565b600081838151811061256d5761256d6142d9565b602002602001015160001415905092915050565b82516060908067ffffffffffffffff81111561259f5761259f613e35565b6040519080825280602002602001820160405280156125c8578160200160208202803683370190505b5091506000805b82811015612631576125e581878763ffffffff16565b15612629578681815181106125fc576125fc6142d9565b602002602001015184838060010194508151811061261c5761261c6142d9565b6020026020010181815250505b6001016125cf565b508252509392505050565b80516060908067ffffffffffffffff81111561265a5761265a613e35565b604051908082528060200260200182016040528015612683578160200160208202803683370190505b50915060005b818110156126e957848482815181106126a4576126a46142d9565b6020026020010151815181106126bc576126bc6142d9565b60200260200101518382815181106126d6576126d66142d9565b6020908102919091010152600101612689565b505092915050565b825160609080831061270657849150506109ab565b6127108585612da1565b50505082525090565b604080516020810190915260608152815183515160009161010091835b8281101561281b5783878281518110612751576127516142d9565b602002602001015181612766576127666142ef565b0494508185106127bf57868181518110612782576127826142d9565b60200260200101516040517f26d9bac100000000000000000000000000000000000000000000000000000000815260040161050191815260200190565b838782815181106127d2576127d26142d9565b6020026020010151816127e7576127e76142ef565b066001901b88600001518681518110612802576128026142d9565b6020908102919091010180519091179052600101612736565b50959695505050505050565b60408051602081019091528181526000906128429084612dad565b159392505050565b606061051984846000015184612581565b8151815160609190600082900361287657839250505061061b565b8060000361288857849250505061061b565b80820167ffffffffffffffff8111156128a3576128a3613e35565b6040519080825280602002602001820160405280156128cc578160200160208202803683370190505b50925060005b82811015612919578581815181106128ec576128ec6142d9565b6020026020010151848281518110612906576129066142d9565b60209081029190910101526001016128d2565b60005b8281101561296757858181518110612936576129366142d9565b6020026020010151858381518110612950576129506142d9565b60209081029190910101526001918201910161291c565b5050505092915050565b60606109ab61237c848461263c565b60008581527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f1402260060205260408120805460ff191681559050600181016129c9600483016000613981565b6129d7600282016000613981565b84516129ec906001830190602088019061390f565b50867f32c9c468454fcf853e08d256000b08598539a799e849e0e7d8309c15eeb53ec3600088888888604051612a269594939291906143b0565b60405180910390a285600003612a3d575050611f8c565b805461ffff191661ffff8716178155600083855160408051808201909152600080825260208201529192509060005b8281101561095757878181518110612a8657612a866142d9565b60209081029190910101516001600160a01b031682528351849082908110612ab057612ab06142d9565b6020908102919091018101516bffffffffffffffffffffffff9081168483019081526002880180546001818101835560009283529490912086519251909316600160a01b026001600160a01b039092169190911791015501612a6c565b8151602080840151604080860151606080880151835195860196909652918401929092528201526001600160a01b03909116608082015260a0810182905260009060c0016121aa565b612b5f89612e18565b612bab5760405162461bcd60e51b815260206004820152601a60248201527f7075626c6963206b6579206973206e6f74206f6e2063757276650000000000006044820152606401610501565b612bb488612e18565b612c005760405162461bcd60e51b815260206004820152601560248201527f67616d6d61206973206e6f74206f6e20637572766500000000000000000000006044820152606401610501565b612c0983612e18565b612c555760405162461bcd60e51b815260206004820152601d60248201527f6347616d6d615769746e657373206973206e6f74206f6e2063757276650000006044820152606401610501565b612c5e82612e18565b612caa5760405162461bcd60e51b815260206004820152601c60248201527f73486173685769746e657373206973206e6f74206f6e206375727665000000006044820152606401610501565b612cb6878a8887612ef1565b612d025760405162461bcd60e51b815260206004820152601960248201527f6164647228632a706b2b732a6729213d5f755769746e657373000000000000006044820152606401610501565b6000612d0e8a87613026565b90506000612d21898b878b86898961308a565b90506000612d32838d8d8a866131b6565b9050808a14612d835760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610501565b505050505050505050505050565b606061051961237c8585856126f1565b60606109ab83836131f6565b8151516000906101009081028310612dc957600091505061061b565b808381612dd857612dd86142ef565b066001901b8460000151828581612df157612df16142ef565b0481518110612e0257612e026142d9565b6020026020010151166000141591505092915050565b80516000906401000003d01911612e715760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420782d6f7264696e61746500000000000000000000000000006044820152606401610501565b60208201516401000003d01911612eca5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420792d6f7264696e61746500000000000000000000000000006044820152606401610501565b60208201516401000003d019908009612eea8360005b602002015161323e565b1492915050565b60006001600160a01b038216612f495760405162461bcd60e51b815260206004820152600b60248201527f626164207769746e6573730000000000000000000000000000000000000000006044820152606401610501565b602084015160009060011615612f6057601c612f63565b601b5b9050600070014551231950b75fc4402da1732fc9bebe1985876000602002015109865170014551231950b75fc4402da1732fc9bebe19918203925060009190890987516040805160008082526020820180845287905260ff88169282019290925260608101929092526080820183905291925060019060a0016020604051602081039080840390855afa158015612ffe573d6000803e3d6000fd5b5050604051601f1901516001600160a01b039081169088161495505050505050949350505050565b61302e61399f565b61305b60018484604051602001613047939291906143f7565b604051602081830303815290604052613262565b90505b61306781612e18565b61061b5780516040805160208101929092526130839101613047565b905061305e565b61309261399f565b825186516401000003d01991829006919006036130f15760405162461bcd60e51b815260206004820152601e60248201527f706f696e747320696e2073756d206d7573742062652064697374696e637400006044820152606401610501565b6130fc8789886132af565b6131485760405162461bcd60e51b815260206004820152601660248201527f4669727374206d756c20636865636b206661696c6564000000000000000000006044820152606401610501565b6131538486856132af565b61319f5760405162461bcd60e51b815260206004820152601760248201527f5365636f6e64206d756c20636865636b206661696c65640000000000000000006044820152606401610501565b6131aa8684846133ec565b98975050505050505050565b6000600286868685876040516020016131d496959493929190614418565b60408051601f1981840301815291905280516020909101209695505050505050565b8151815160609190811461321d5760405163ab3a7f9960e01b815260040160405180910390fd5b60018111156132365761323684846000600185036134b3565b509192915050565b6000806401000003d01980848509840990506401000003d019600782089392505050565b61326a61399f565b61327382613666565b8152613288613283826000612ee0565b6136a1565b6020820181905260029006600103610a41576020810180516401000003d019039052919050565b6000826000036133015760405162461bcd60e51b815260206004820152600b60248201527f7a65726f207363616c61720000000000000000000000000000000000000000006044820152606401610501565b8351602085015160009061331790600290614477565b1561332357601c613326565b601b5b9050600070014551231950b75fc4402da1732fc9bebe198387096040805160008082526020820180845281905260ff86169282019290925260608101869052608081018390529192509060019060a0016020604051602081039080840390855afa158015613398573d6000803e3d6000fd5b5050506020604051035190506000866040516020016133b7919061448b565b60408051601f1981840301815291905280516020909101206001600160a01b0392831692169190911498975050505050505050565b6133f461399f565b835160208086015185519186015160009384938493613415939091906136c1565b919450925090506401000003d0198582096001146134755760405162461bcd60e51b815260206004820152601960248201527f696e765a206d75737420626520696e7665727365206f66207a000000000000006044820152606401610501565b60405180604001604052806401000003d01980613494576134946142ef565b87860981526020016401000003d0198785099052979650505050505050565b818114610ab257825182908290600090869083850160011c9081106134da576134da6142d9565b602002602001015190505b81831361363e575b8583815181106134ff576134ff6142d9565b6020026020010151811015613519578260010192506134ed565b8086838151811061352c5761352c6142d9565b602002602001015110156135465760001990910190613519565b8183136136395786828151811061355f5761355f6142d9565b6020026020010151878481518110613579576135796142d9565b6020026020010151888581518110613593576135936142d9565b602002602001018985815181106135ac576135ac6142d9565b60200260200101828152508281525050508582815181106135cf576135cf6142d9565b60200260200101518684815181106135e9576135e96142d9565b6020026020010151878581518110613603576136036142d9565b6020026020010188858151811061361c5761361c6142d9565b602090810291909101019190915252600190920191600019909101905b6134e5565b8185121561365257613652878787856134b3565b838312156106e1576106e1878785876134b3565b805160208201205b6401000003d0198110610a415760408051602080820193909352815180820384018152908201909152805191012061366e565b600061061b8260026136ba6401000003d0196001614319565b901c6137a1565b60008080600180826401000003d019896401000003d019038808905060006401000003d0198b6401000003d019038a089050600061370183838585613846565b909850905061371288828e8861386a565b909850905061372388828c8761386a565b909850905060006137368d878b8561386a565b909850905061374788828686613846565b909850905061375888828e8961386a565b909850905081811461378d576401000003d019818a0998506401000003d01982890997506401000003d0198183099650613791565b8196505b5050505050509450945094915050565b6000806137ac6139bd565b6020808252818101819052604082015260608101859052608081018490526401000003d01960a08201526137de6139db565b60208160c0846005600019fa92508260000361383c5760405162461bcd60e51b815260206004820152601260248201527f6269674d6f64457870206661696c7572652100000000000000000000000000006044820152606401610501565b5195945050505050565b6000806401000003d0198487096401000003d0198487099097909650945050505050565b600080806401000003d019878509905060006401000003d01987876401000003d019030990506401000003d0198183086401000003d01986890990999098509650505050505050565b60405180606001604052806000151581526020016138ef6040518060600160405280600061ffff16815260200160608152602001606081525090565b815260200161390a6040518060200160405280606081525090565b905290565b828054828255906000526020600020908101928215613971579160200282015b82811115613971578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061392f565b5061397d9291506139f9565b5090565b508054600082559060005260206000209081019061053291906139f9565b60405180604001604052806002906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b8082111561397d57600081556001016139fa565b600060208284031215613a2057600080fd5b8135600581106109ab57600080fd5b60008060408385031215613a4257600080fd5b50508035926020909101359150565b60008151808452602080850194506020840160005b83811015613a8b5781516001600160a01b031687529582019590820190600101613a66565b509495945050505050565b6020815260006109ab6020830184613a51565b600060208284031215613abb57600080fd5b5035919050565b6001600160a01b038116811461053257600080fd5b8035610a4181613ac2565b600060208284031215613af457600080fd5b81356109ab81613ac2565b60008083601f840112613b1157600080fd5b50813567ffffffffffffffff811115613b2957600080fd5b6020830191508360208260051b8501011115613b4457600080fd5b9250929050565b600080600080600060808688031215613b6357600080fd5b85359450602086013593506040860135613b7c81613ac2565b9250606086013567ffffffffffffffff811115613b9857600080fd5b613ba488828901613aff565b969995985093965092949392505050565b60008060408385031215613bc857600080fd5b823591506020830135613bda81613ac2565b809150509250929050565b803560118110610a4157600080fd5b60008060408385031215613c0757600080fd5b613c1083613be5565b91506020830135613bda81613ac2565b6000806000806000806000806000806101008b8d031215613c4057600080fd5b8a35613c4b81613ac2565b995060208b0135613c5b81613ac2565b985060408b0135613c6b81613ac2565b975060608b0135613c7b81613ac2565b965060808b0135955060a08b0135945060c08b013567ffffffffffffffff80821115613ca657600080fd5b613cb28e838f01613aff565b909650945060e08d0135915080821115613ccb57600080fd5b50613cd88d828e01613aff565b915080935050809150509295989b9194979a5092959850565b60008151602084526105196020850182613a51565b6000602080835283511515818401528084015160406060604086015261ffff825116608086015282820151606060a0870152613d4560e0870182613a51565b60409390930151868403607f190160c0880152805180855290850193600092508501905b80831015613da957845180516001600160a01b031683528601516bffffffffffffffffffffffff1686830152938501936001929092019190830190613d69565b506040880151878203601f1901606089015294506131aa8186613cf1565b600060208284031215613dd957600080fd5b6109ab82613be5565b60008060008060608587031215613df857600080fd5b8435935060208501359250604085013567ffffffffffffffff811115613e1d57600080fd5b613e2987828801613aff565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715613e6f57613e6f613e35565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613e9e57613e9e613e35565b604052919050565b600082601f830112613eb757600080fd5b6040516040810181811067ffffffffffffffff82111715613eda57613eda613e35565b8060405250806040840185811115613ef157600080fd5b845b81811015613f0b578035835260209283019201613ef3565b509195945050505050565b600060408284031215613f2857600080fd5b6109ab8383613ea6565b600080828403610220811215613f4757600080fd5b6080811215613f5557600080fd5b8392506101a0607f1982011215613f6b57600080fd5b506080830190509250929050565b60008060008060408587031215613f8f57600080fd5b843567ffffffffffffffff80821115613fa757600080fd5b613fb388838901613aff565b90965094506020870135915080821115613fcc57600080fd5b50613e2987828801613aff565b634e487b7160e01b600052602160045260246000fd5b6000602080838503121561400257600080fd5b825167ffffffffffffffff8082111561401a57600080fd5b818501915085601f83011261402e57600080fd5b81518181111561404057614040613e35565b8060051b9150614051848301613e75565b818152918301840191848101908884111561406b57600080fd5b938501935b838510156131aa57845182529385019390850190614070565b6011811061409957614099613fd9565b9052565b6020810161061b8284614089565b6000602082840312156140bd57600080fd5b81516109ab81613ac2565b6000608082840312156140da57600080fd5b6040516080810181811067ffffffffffffffff821117156140fd576140fd613e35565b8060405250823581526020830135602082015260408301356040820152606083013561412881613ac2565b60608201529392505050565b60008060006060848603121561414957600080fd5b835161415481613ac2565b602085015160409095015190969495509392505050565b60006020828403121561417d57600080fd5b5051919050565b60006101a0828403121561419757600080fd5b61419f613e4b565b6141a98484613ea6565b81526141b88460408501613ea6565b60208201526080830135604082015260a0830135606082015260c083013560808201526141e760e08401613ad7565b60a08201526101006141fb85828601613ea6565b60c083015261420e856101408601613ea6565b60e083015261018084013581830152508091505092915050565b6001600160e01b03198316815260408101600b831061424957614249613fd9565b8260208301529392505050565b6001600160e01b031984168152606081016142746020830185614089565b6001600160a01b0383166040830152949350505050565b60208082528181018390526000908460408401835b868110156142ce5782356142b381613ac2565b6001600160a01b0316825291830191908301906001016142a0565b509695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082614314576143146142ef565b500490565b8082018082111561061b57634e487b7160e01b600052601160045260246000fd5b8060005b6002811015610ab257815184526020938401939091019060010161433e565b6040810161061b828461433a565b828152606081016109ab602083018461433a565b60008151808452602080850194506020840160005b83811015613a8b57815187529582019590820190600101614394565b851515815284602082015260a0604082015260006143d160a0830186613a51565b82810360608401526143e38186613a51565b905082810360808401526131aa818561437f565b838152614407602082018461433a565b606081019190915260800192915050565b868152614428602082018761433a565b614435606082018661433a565b61444260a082018561433a565b61444f60e082018461433a565b60609190911b6bffffffffffffffffffffffff19166101208201526101340195945050505050565b600082614486576144866142ef565b500690565b614495818361433a565b60400191905056fea2646970667358221220704e2eb30c2832eb59291702bd39e13abf9773b45fc3d0b5add93de6bad1391064736f6c63430008190033",
  "callValue": 0,
  "chainId": 2020,
  "constructorArgs": "0x",
  "contractName": "RoninRandomBeacon",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806380d1271011610104578063e02f6271116100a2578063e7d4699711610071578063e7d469971461044c578063eb0645c414610453578063f1a7340b14610466578063f5a77abb1461047957600080fd5b8063e02f627114610400578063e3a4376514610413578063e444722a14610426578063e78bb6271461043957600080fd5b80639c7300e3116100de5780639c7300e31461039a578063d0ddb12b146103ad578063d1bd2f01146103cd578063de981f1b146103d557600080fd5b806380d1271014610328578063865e6fd31461037f578063917a65bd1461039257600080fd5b80633a570332116101715780635cd8a76b1161014b5780635cd8a76b146102da57806365291db7146102e25780636558954f1461030b5780637931e9ec1461031557600080fd5b80633a570332146102685780633ba1de371461027b57806346337c2f1461028e57600080fd5b806316519133116101ad578063165191331461020b5780633355b0f01461022b57806335188e311461024057806338e454b11461026057600080fd5b8063035d0062146101d457806303827884146101fa57806311ed98f714610203575b600080fd5b6101e76101e2366004613a0e565b61048c565b6040519081526020015b60405180910390f35b6101e761183881565b6034546101e7565b61021e610219366004613a2f565b6104cb565b6040516101f19190613a96565b61023e610239366004613aa9565b610521565b005b6101e761024e366004613aa9565b60009081526037602052604090205490565b61023e610535565b6101e7610276366004613ae2565b61060d565b61023e610289366004613b4b565b610621565b6102ca61029c366004613bb5565b60009182526037602090815260408084206001600160a01b0390931684526003909201905290205460ff1690565b60405190151581526020016101f1565b61023e6106ea565b6101e76102f0366004613ae2565b6001600160a01b031660009081526036602052604090205490565b6101e76201518081565b61021e610323366004613aa9565b61076e565b610364610336366004613aa9565b60009081526037602052604090206001810154600290910154909160ff821691610100900463ffffffff1690565b604080519384529115156020840152908201526060016101f1565b61023e61038d366004613bf4565b610782565b6035546101e7565b61023e6103a8366004613c20565b6107a1565b6103c06103bb366004613aa9565b610964565b6040516101f19190613d06565b6033546101e7565b6103e86103e3366004613dc7565b6109b2565b6040516001600160a01b0390911681526020016101f1565b6102ca61040e366004613bb5565b610a46565b61023e610421366004613a2f565b610a55565b61023e610434366004613de2565b610ab8565b6101e7610447366004613f16565b610c75565b60016101e7565b6102ca610461366004613a2f565b610c80565b61023e610474366004613f32565b610d4a565b61023e610487366004613f79565b610fc9565b6000603860008360048111156104a4576104a4613fd9565b60048111156104b5576104b5613fd9565b8152602001908152602001600020549050919050565b600082815260376020526040902060028101546060919060ff1661050a5760405163d28d7c0760e01b8152600481018590526024015b60405180910390fd5b61051984848360010154610fdd565b949350505050565b6105296111ad565b61053281611223565b50565b600054600390610100900460ff16158015610557575060005460ff8083169116105b6105ba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610501565b6000805461ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b600061061b6102f083611258565b92915050565b600861062c816112e9565b8560335481106106e15760008681526037602052604081209061065089878761134e565b9050600061065e600a6109b2565b6001600160a01b0316632cccb53c836040518263ffffffff1660e01b81526004016106899190613a96565b600060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106ce9190810190613fef565b90506106dd838b8a85856114c3565b5050505b50505050505050565b600054600290610100900460ff16158015610557575060005460ff8083169116106105ba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610501565b606061061b61077c4261166a565b836104cb565b61078a6111ad565b61079381611679565b61079d82826116c8565b5050565b600054610100900460ff16158080156107c15750600054600160ff909116105b806107db5750303b1580156107db575060005460ff166001145b61083e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610501565b6000805460ff191660011790558015610861576000805461ff0019166101001790555b604080517f0000000000000000000000000000000000000000000000000000000000000000406020820152419181019190915242606082015246608082015260009060a001604051602081830303815290604052805190602001209050866033819055506108ce88611223565b6108da86868686611779565b6108e48782611977565b6108ef600f8d6116c8565b6108fa60098c6116c8565b61090560088a6116c8565b610910600a8b6116c8565b508015610957576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b61096c6138b3565b6000828152603760205260409020600281015460ff166109a25760405163d28d7c0760e01b815260048101849052602401610501565b6109ab83611a2b565b9392505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb60008360108111156109e9576109e9613fd9565b60ff1681526020810191909152604001600020546001600160a01b0316905080610a4157816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610501919061409d565b919050565b60006109ab8361029c84611258565b6008610a60816112e9565b816033548110610ab2578284108015610a795750610ab2565b600185016000818152603760205260408120549003610aaf57600086815260376020526040902060010154610aaf908290611977565b50505b50505050565b6008610ac3816112e9565b836033548110610aaf57600085815260376020526040812090610ae788878761134e565b90506000610af5600a6109b2565b6001600160a01b0316632cccb53c836040518263ffffffff1660e01b8152600401610b209190613a96565b600060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b659190810190613fef565b9050610b718389611be5565b60386020527f44eb26011dd1cf82e0b45a2fb60b23f01ab68cabbe2fe1f3e7b70c0873d5dc5b547f76ace02705df1df747e114090468e0edd81a8d99edc641fff18613cd34df0a6e5460046000527fcc8ed3027127ab69e71f55f03e2b60fb19c73a8aa6226b8d2256163b82f4941f54610c6a928b92909186610bf460096109b2565b6001600160a01b0316635a2ac073896040518263ffffffff1660e01b8152600401610c1f9190613a96565b600060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c649190810190613fef565b87611c3e565b505050505050505050565b600061061b82611d5b565b600080610c8d600f6109b2565b6040517fb96f5c3e000000000000000000000000000000000000000000000000000000008152600481018590529091506000906001600160a01b0383169063b96f5c3e90602401602060405180830381865afa158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1591906140ab565b60008681526037602090815260408083206001600160a01b038516845260030190915290205490915060ff1695945050505050565b6000610d63610d5e368590038501856140c8565b611d8b565b604080518082018252919250600091610d949185906002908390839080828437600092019190915250611d5b915050565b90506000610da2600f6109b2565b90506000806000836001600160a01b03166348b2c382866040518263ffffffff1660e01b8152600401610dd791815260200190565b606060405180830381865afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190614134565b9250925092506000610e2a60086109b2565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8b919061416b565b89356000908152603760205260409020909150610eaa8a82848b611dcd565b610eb5858484611f93565b610ec28a8a848a886120bb565b6001600160a01b038516600090815260038201602052604090205460ff1615610f17576040517f23afea6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101805464ffffffff0019811660016101009283900463ffffffff908116820116909202179091556001600160a01b03861660009081526003830160205260409020805460ff19169091179055610f82610f78368b90038b018b614184565b8a60c0013561215e565b600182018054909118905560405188908b359033907f9c42f0e233770417c75c168e2ec97a2db8e34b756d12f8e002e90d144f4a16cc90600090a450505050505050505050565b610fd16111ad565b610ab284848484611779565b60008381527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f1402260060205260409020805460609190600482019060ff161561107c5780546040805160208084028201810190925282815291839183018282801561106e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611050575b5050505050925050506109ab565b60008260010190506000816001018054806020026020016040519081016040528092919081815260200182805480156110de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110c0575b505085549394505061ffff9092169150506000819003611104575093506109ab92505050565b600083600201805480602002602001604051908101604052809291908181526020016000905b8282101561117e57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff168183015282526001909201910161112a565b505050509050600061119282848b8d6121c9565b905061119e848261236d565b9b9a5050505050505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314611221576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610501929190614228565b565b60358190556040518181527fc642d5e4298fca4d2285021791ffdf4afce31ec672299930b7ada0047b15d24390602001610602565b6000611264600f6109b2565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156112c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b91906140ab565b6112f2816109b2565b6001600160a01b0316336001600160a01b031614610532576000356001600160e01b03191681336040517f8383e63400000000000000000000000000000000000000000000000000000000815260040161050193929190614256565b6060600060018161135f600f6109b2565b6001600160a01b031663c621ab5887876040518363ffffffff1660e01b815260040161138c92919061428b565b600060405180830381865afa1580156113a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113d19190810190613fef565b9050848067ffffffffffffffff8111156113ed576113ed613e35565b604051908082528060200260200182016040528015611416578160200160208202803683370190505b50945060005b818110156114b557888461144885848151811061143b5761143b6142d9565b602002602001015161166a565b01116114ad57878782818110611460576114606142d9565b90506020020160208101906114759190613ae2565b865160018701968891811061148c5761148c6142d9565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60010161141c565b505050908252509392505050565b836033548110610aaf5782516035546000918291825b82811015610957578681815181106114f3576114f36142d9565b602002602001015160001461166257878181518110611514576115146142d9565b6020026020010151945060366000866001600160a01b03166001600160a01b031681526020019081526020016000205493508a6003016000866001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff16156115a55783156115a0576001600160a01b0385166000908152603660205260408120555b611662565b6001600160a01b0385166000908152603660205260409020600190940193849055818410611662576040517f35cbdbe30000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018c90528a16906335cbdbe390604401600060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b5050506001600160a01b038616600090815260366020526040812055505b6001016114d9565b600061061b6201518083614305565b806001600160a01b03163b600003610532576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610501565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb60008460108111156116fe576116fe613fd9565b60ff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055811682601081111561174c5761174c613fd9565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b828181146117c1576040517f1ad599d40000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610501565b60008060005b83811015611899578787828181106117e1576117e16142d9565b90506020020160208101906117f69190613a0e565b915085858281811061180a5761180a6142d9565b905060200201359250826038600084600481111561182a5761182a613fd9565b600481111561183b5761183b613fd9565b815260208101919091526040016000205581600481111561185e5761185e613fd9565b6040518481527f57e533b2b2703988ec2b03256b82a8f952d21aecdcb8644c531a3020210089069060200160405180910390a26001016117c7565b5060386020527f33a28b70ecab075fc507d0cb5ffac06e3bc912aa6c671a1fa4ccb48318e19b11547fcc8ed3027127ab69e71f55f03e2b60fb19c73a8aa6226b8d2256163b82f4941f547f76ace02705df1df747e114090468e0edd81a8d99edc641fff18613cd34df0a6e5460026000527f44eb26011dd1cf82e0b45a2fb60b23f01ab68cabbe2fe1f3e7b70c0873d5dc5b546119369190614319565b6119409190614319565b146106e1576040517f970f2d6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825283815260208101839052469181019190915230606082015260006119a482611d8b565b82516000908152603760205260409081902082905551909150819085907f6c8f5422289494c55b959cb4d0900ec451d35b3bdf06e9d29cd80bfab61b243890611a1d9086908151815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b60405180910390a350505050565b611a336138b3565b60008281527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f14022600602052604090206040805160608082018352835460ff16151582528251908101835260018401805461ffff1682526002850180548551602082810282018101909752818152949695808801958582019390929091830182828015611ae657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ac8575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015611b6857600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1681830152825260019092019101611b14565b50505091525050815260408051600484018054602081810284018501855283810182815295019492939192849290918491840182828015611bd257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611bb4575b5050509190925250505090525092915050565b60028201805460ff19166001908117909155603482905582015460405182917fd31a863f0b5130ba75e27a3764828141ba7bc06056dfcdade31d12ab52a4278491611c3291815260200190565b60405180910390a25050565b8251825181148015611c505750815181145b611c6d5760405163ab3a7f9960e01b815260040160405180910390fd5b80858789010110611c8857611c82888561237f565b506106e1565b6000611c9382612477565b90506000611ca0836124f5565b90506000611cb18386612559612581565b9050611cc8611cc0878361263c565b82908c6126f1565b9050611cd48282612719565b5080518a0398909801976000611ced848461282761284a565b9050611cfc611cc0888361263c565b9050611d088382612719565b506000611d18858561282761284a565b9050611d4c8d8b611d33611d2c878761285b565b8d90612971565b611d3d8d86612971565b611d478d8761263c565b612980565b50505050505050505050505050565b600081604051602001611d6e919061435d565b604051602081830303815290604052805190602001209050919050565b8051602080830151604080850151606080870151835195860196909652918401929092528201526001600160a01b03909116608082015260009060a001611d6e565b46846040013514611e1657604080517fbf65d029000000000000000000000000000000000000000000000000000000008152466004820152908501356024820152604401610501565b30611e276080860160608701613ae2565b6001600160a01b031614611e8b5730611e466080860160608701613ae2565b6040517f23400dbf0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015291166024820152604401610501565b83358210611ec5576040517fca5d513700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60335484351015611f05576040517fba59f28e00000000000000000000000000000000000000000000000000000000815284356004820152602401610501565b600283015460ff1615611f47576040517f4a5a251600000000000000000000000000000000000000000000000000000000815284356004820152602401610501565b8254818114611f8c576040517f639beb990000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401610501565b5050505050565b6000611f9f600a6109b2565b6040517fb8cc3a500000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192509082169063b8cc3a5090602401602060405180830381865afa158015612002573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612026919061416b565b60000361206d576040517f8f47e7e30000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610501565b8160016120798561166a565b6120839190614319565b1115610ab2576040517f2a3c9cd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260016120c78361166a565b6120d19190614319565b1115612109576040517fc351997500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c084013561212783612121368990038901896140c8565b90612b0d565b14611f8c576040517f1420993200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006121928360000151846020015185604001518660600151868860a001518960c001518a60e001518b6101000151612b56565b600383602001516040516020016121aa92919061436b565b60408051601f1981840301815291905280516020909101209392505050565b83516060908067ffffffffffffffff8111156121e7576121e7613e35565b604051908082528060200260200182016040528015612210578160200160208202803683370190505b50915060008167ffffffffffffffff81111561222e5761222e613e35565b604051908082528060200260200182016040528015612257578160200160208202803683370190505b50905060008060008060405190508881528760208201526060810160405260005b86811015612361578b8181518110612292576122926142d9565b6020026020010151600001519450848882815181106122b3576122b36142d9565b60200260200101906001600160a01b031690816001600160a01b0316815250508b81815181106122e5576122e56142d9565b6020026020010151602001516bffffffffffffffffffffffff169250846040830152606082206fffffffffffffffffffffffffffffffff81168160801c9150670de0b6b3a764000085048282188182020296505050508386828151811061234e5761234e6142d9565b6020908102919091010152600101612278565b5061119e87868c612d91565b60606109ab61237c848461285b565b90565b60008281527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f1402260060205260408120805460ff19166001908117825583519192508201906123d4906004840190602086019061390f565b50805461ffff191681556123ec600282016000613981565b6123fa600182016000613981565b837f32c9c468454fcf853e08d256000b08598539a799e849e0e7d8309c15eeb53ec360016000868160405190808252806020026020018201604052801561244b578160200160208202803683370190505b506040805160008152602081019182905261246995949392916143b0565b60405180910390a250505050565b60608167ffffffffffffffff81111561249257612492613e35565b6040519080825280602002602001820160405280156124bb578160200160208202803683370190505b50905060005b828110156124ef57808282815181106124dc576124dc6142d9565b60209081029190910101526001016124c1565b50919050565b60408051602081019091526060815261010061ffff83160460010167ffffffffffffffff81111561252857612528613e35565b604051908082528060200260200182016040528015612551578160200160208202803683370190505b508152919050565b600081838151811061256d5761256d6142d9565b602002602001015160001415905092915050565b82516060908067ffffffffffffffff81111561259f5761259f613e35565b6040519080825280602002602001820160405280156125c8578160200160208202803683370190505b5091506000805b82811015612631576125e581878763ffffffff16565b15612629578681815181106125fc576125fc6142d9565b602002602001015184838060010194508151811061261c5761261c6142d9565b6020026020010181815250505b6001016125cf565b508252509392505050565b80516060908067ffffffffffffffff81111561265a5761265a613e35565b604051908082528060200260200182016040528015612683578160200160208202803683370190505b50915060005b818110156126e957848482815181106126a4576126a46142d9565b6020026020010151815181106126bc576126bc6142d9565b60200260200101518382815181106126d6576126d66142d9565b6020908102919091010152600101612689565b505092915050565b825160609080831061270657849150506109ab565b6127108585612da1565b50505082525090565b604080516020810190915260608152815183515160009161010091835b8281101561281b5783878281518110612751576127516142d9565b602002602001015181612766576127666142ef565b0494508185106127bf57868181518110612782576127826142d9565b60200260200101516040517f26d9bac100000000000000000000000000000000000000000000000000000000815260040161050191815260200190565b838782815181106127d2576127d26142d9565b6020026020010151816127e7576127e76142ef565b066001901b88600001518681518110612802576128026142d9565b6020908102919091010180519091179052600101612736565b50959695505050505050565b60408051602081019091528181526000906128429084612dad565b159392505050565b606061051984846000015184612581565b8151815160609190600082900361287657839250505061061b565b8060000361288857849250505061061b565b80820167ffffffffffffffff8111156128a3576128a3613e35565b6040519080825280602002602001820160405280156128cc578160200160208202803683370190505b50925060005b82811015612919578581815181106128ec576128ec6142d9565b6020026020010151848281518110612906576129066142d9565b60209081029190910101526001016128d2565b60005b8281101561296757858181518110612936576129366142d9565b6020026020010151858381518110612950576129506142d9565b60209081029190910101526001918201910161291c565b5050505092915050565b60606109ab61237c848461263c565b60008581527f8593e13447c7ce85611f094407732145bce33e516174eca63d12235f1402260060205260408120805460ff191681559050600181016129c9600483016000613981565b6129d7600282016000613981565b84516129ec906001830190602088019061390f565b50867f32c9c468454fcf853e08d256000b08598539a799e849e0e7d8309c15eeb53ec3600088888888604051612a269594939291906143b0565b60405180910390a285600003612a3d575050611f8c565b805461ffff191661ffff8716178155600083855160408051808201909152600080825260208201529192509060005b8281101561095757878181518110612a8657612a866142d9565b60209081029190910101516001600160a01b031682528351849082908110612ab057612ab06142d9565b6020908102919091018101516bffffffffffffffffffffffff9081168483019081526002880180546001818101835560009283529490912086519251909316600160a01b026001600160a01b039092169190911791015501612a6c565b8151602080840151604080860151606080880151835195860196909652918401929092528201526001600160a01b03909116608082015260a0810182905260009060c0016121aa565b612b5f89612e18565b612bab5760405162461bcd60e51b815260206004820152601a60248201527f7075626c6963206b6579206973206e6f74206f6e2063757276650000000000006044820152606401610501565b612bb488612e18565b612c005760405162461bcd60e51b815260206004820152601560248201527f67616d6d61206973206e6f74206f6e20637572766500000000000000000000006044820152606401610501565b612c0983612e18565b612c555760405162461bcd60e51b815260206004820152601d60248201527f6347616d6d615769746e657373206973206e6f74206f6e2063757276650000006044820152606401610501565b612c5e82612e18565b612caa5760405162461bcd60e51b815260206004820152601c60248201527f73486173685769746e657373206973206e6f74206f6e206375727665000000006044820152606401610501565b612cb6878a8887612ef1565b612d025760405162461bcd60e51b815260206004820152601960248201527f6164647228632a706b2b732a6729213d5f755769746e657373000000000000006044820152606401610501565b6000612d0e8a87613026565b90506000612d21898b878b86898961308a565b90506000612d32838d8d8a866131b6565b9050808a14612d835760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610501565b505050505050505050505050565b606061051961237c8585856126f1565b60606109ab83836131f6565b8151516000906101009081028310612dc957600091505061061b565b808381612dd857612dd86142ef565b066001901b8460000151828581612df157612df16142ef565b0481518110612e0257612e026142d9565b6020026020010151166000141591505092915050565b80516000906401000003d01911612e715760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420782d6f7264696e61746500000000000000000000000000006044820152606401610501565b60208201516401000003d01911612eca5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420792d6f7264696e61746500000000000000000000000000006044820152606401610501565b60208201516401000003d019908009612eea8360005b602002015161323e565b1492915050565b60006001600160a01b038216612f495760405162461bcd60e51b815260206004820152600b60248201527f626164207769746e6573730000000000000000000000000000000000000000006044820152606401610501565b602084015160009060011615612f6057601c612f63565b601b5b9050600070014551231950b75fc4402da1732fc9bebe1985876000602002015109865170014551231950b75fc4402da1732fc9bebe19918203925060009190890987516040805160008082526020820180845287905260ff88169282019290925260608101929092526080820183905291925060019060a0016020604051602081039080840390855afa158015612ffe573d6000803e3d6000fd5b5050604051601f1901516001600160a01b039081169088161495505050505050949350505050565b61302e61399f565b61305b60018484604051602001613047939291906143f7565b604051602081830303815290604052613262565b90505b61306781612e18565b61061b5780516040805160208101929092526130839101613047565b905061305e565b61309261399f565b825186516401000003d01991829006919006036130f15760405162461bcd60e51b815260206004820152601e60248201527f706f696e747320696e2073756d206d7573742062652064697374696e637400006044820152606401610501565b6130fc8789886132af565b6131485760405162461bcd60e51b815260206004820152601660248201527f4669727374206d756c20636865636b206661696c6564000000000000000000006044820152606401610501565b6131538486856132af565b61319f5760405162461bcd60e51b815260206004820152601760248201527f5365636f6e64206d756c20636865636b206661696c65640000000000000000006044820152606401610501565b6131aa8684846133ec565b98975050505050505050565b6000600286868685876040516020016131d496959493929190614418565b60408051601f1981840301815291905280516020909101209695505050505050565b8151815160609190811461321d5760405163ab3a7f9960e01b815260040160405180910390fd5b60018111156132365761323684846000600185036134b3565b509192915050565b6000806401000003d01980848509840990506401000003d019600782089392505050565b61326a61399f565b61327382613666565b8152613288613283826000612ee0565b6136a1565b6020820181905260029006600103610a41576020810180516401000003d019039052919050565b6000826000036133015760405162461bcd60e51b815260206004820152600b60248201527f7a65726f207363616c61720000000000000000000000000000000000000000006044820152606401610501565b8351602085015160009061331790600290614477565b1561332357601c613326565b601b5b9050600070014551231950b75fc4402da1732fc9bebe198387096040805160008082526020820180845281905260ff86169282019290925260608101869052608081018390529192509060019060a0016020604051602081039080840390855afa158015613398573d6000803e3d6000fd5b5050506020604051035190506000866040516020016133b7919061448b565b60408051601f1981840301815291905280516020909101206001600160a01b0392831692169190911498975050505050505050565b6133f461399f565b835160208086015185519186015160009384938493613415939091906136c1565b919450925090506401000003d0198582096001146134755760405162461bcd60e51b815260206004820152601960248201527f696e765a206d75737420626520696e7665727365206f66207a000000000000006044820152606401610501565b60405180604001604052806401000003d01980613494576134946142ef565b87860981526020016401000003d0198785099052979650505050505050565b818114610ab257825182908290600090869083850160011c9081106134da576134da6142d9565b602002602001015190505b81831361363e575b8583815181106134ff576134ff6142d9565b6020026020010151811015613519578260010192506134ed565b8086838151811061352c5761352c6142d9565b602002602001015110156135465760001990910190613519565b8183136136395786828151811061355f5761355f6142d9565b6020026020010151878481518110613579576135796142d9565b6020026020010151888581518110613593576135936142d9565b602002602001018985815181106135ac576135ac6142d9565b60200260200101828152508281525050508582815181106135cf576135cf6142d9565b60200260200101518684815181106135e9576135e96142d9565b6020026020010151878581518110613603576136036142d9565b6020026020010188858151811061361c5761361c6142d9565b602090810291909101019190915252600190920191600019909101905b6134e5565b8185121561365257613652878787856134b3565b838312156106e1576106e1878785876134b3565b805160208201205b6401000003d0198110610a415760408051602080820193909352815180820384018152908201909152805191012061366e565b600061061b8260026136ba6401000003d0196001614319565b901c6137a1565b60008080600180826401000003d019896401000003d019038808905060006401000003d0198b6401000003d019038a089050600061370183838585613846565b909850905061371288828e8861386a565b909850905061372388828c8761386a565b909850905060006137368d878b8561386a565b909850905061374788828686613846565b909850905061375888828e8961386a565b909850905081811461378d576401000003d019818a0998506401000003d01982890997506401000003d0198183099650613791565b8196505b5050505050509450945094915050565b6000806137ac6139bd565b6020808252818101819052604082015260608101859052608081018490526401000003d01960a08201526137de6139db565b60208160c0846005600019fa92508260000361383c5760405162461bcd60e51b815260206004820152601260248201527f6269674d6f64457870206661696c7572652100000000000000000000000000006044820152606401610501565b5195945050505050565b6000806401000003d0198487096401000003d0198487099097909650945050505050565b600080806401000003d019878509905060006401000003d01987876401000003d019030990506401000003d0198183086401000003d01986890990999098509650505050505050565b60405180606001604052806000151581526020016138ef6040518060600160405280600061ffff16815260200160608152602001606081525090565b815260200161390a6040518060200160405280606081525090565b905290565b828054828255906000526020600020908101928215613971579160200282015b82811115613971578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061392f565b5061397d9291506139f9565b5090565b508054600082559060005260206000209081019061053291906139f9565b60405180604001604052806002906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b8082111561397d57600081556001016139fa565b600060208284031215613a2057600080fd5b8135600581106109ab57600080fd5b60008060408385031215613a4257600080fd5b50508035926020909101359150565b60008151808452602080850194506020840160005b83811015613a8b5781516001600160a01b031687529582019590820190600101613a66565b509495945050505050565b6020815260006109ab6020830184613a51565b600060208284031215613abb57600080fd5b5035919050565b6001600160a01b038116811461053257600080fd5b8035610a4181613ac2565b600060208284031215613af457600080fd5b81356109ab81613ac2565b60008083601f840112613b1157600080fd5b50813567ffffffffffffffff811115613b2957600080fd5b6020830191508360208260051b8501011115613b4457600080fd5b9250929050565b600080600080600060808688031215613b6357600080fd5b85359450602086013593506040860135613b7c81613ac2565b9250606086013567ffffffffffffffff811115613b9857600080fd5b613ba488828901613aff565b969995985093965092949392505050565b60008060408385031215613bc857600080fd5b823591506020830135613bda81613ac2565b809150509250929050565b803560118110610a4157600080fd5b60008060408385031215613c0757600080fd5b613c1083613be5565b91506020830135613bda81613ac2565b6000806000806000806000806000806101008b8d031215613c4057600080fd5b8a35613c4b81613ac2565b995060208b0135613c5b81613ac2565b985060408b0135613c6b81613ac2565b975060608b0135613c7b81613ac2565b965060808b0135955060a08b0135945060c08b013567ffffffffffffffff80821115613ca657600080fd5b613cb28e838f01613aff565b909650945060e08d0135915080821115613ccb57600080fd5b50613cd88d828e01613aff565b915080935050809150509295989b9194979a5092959850565b60008151602084526105196020850182613a51565b6000602080835283511515818401528084015160406060604086015261ffff825116608086015282820151606060a0870152613d4560e0870182613a51565b60409390930151868403607f190160c0880152805180855290850193600092508501905b80831015613da957845180516001600160a01b031683528601516bffffffffffffffffffffffff1686830152938501936001929092019190830190613d69565b506040880151878203601f1901606089015294506131aa8186613cf1565b600060208284031215613dd957600080fd5b6109ab82613be5565b60008060008060608587031215613df857600080fd5b8435935060208501359250604085013567ffffffffffffffff811115613e1d57600080fd5b613e2987828801613aff565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715613e6f57613e6f613e35565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613e9e57613e9e613e35565b604052919050565b600082601f830112613eb757600080fd5b6040516040810181811067ffffffffffffffff82111715613eda57613eda613e35565b8060405250806040840185811115613ef157600080fd5b845b81811015613f0b578035835260209283019201613ef3565b509195945050505050565b600060408284031215613f2857600080fd5b6109ab8383613ea6565b600080828403610220811215613f4757600080fd5b6080811215613f5557600080fd5b8392506101a0607f1982011215613f6b57600080fd5b506080830190509250929050565b60008060008060408587031215613f8f57600080fd5b843567ffffffffffffffff80821115613fa757600080fd5b613fb388838901613aff565b90965094506020870135915080821115613fcc57600080fd5b50613e2987828801613aff565b634e487b7160e01b600052602160045260246000fd5b6000602080838503121561400257600080fd5b825167ffffffffffffffff8082111561401a57600080fd5b818501915085601f83011261402e57600080fd5b81518181111561404057614040613e35565b8060051b9150614051848301613e75565b818152918301840191848101908884111561406b57600080fd5b938501935b838510156131aa57845182529385019390850190614070565b6011811061409957614099613fd9565b9052565b6020810161061b8284614089565b6000602082840312156140bd57600080fd5b81516109ab81613ac2565b6000608082840312156140da57600080fd5b6040516080810181811067ffffffffffffffff821117156140fd576140fd613e35565b8060405250823581526020830135602082015260408301356040820152606083013561412881613ac2565b60608201529392505050565b60008060006060848603121561414957600080fd5b835161415481613ac2565b602085015160409095015190969495509392505050565b60006020828403121561417d57600080fd5b5051919050565b60006101a0828403121561419757600080fd5b61419f613e4b565b6141a98484613ea6565b81526141b88460408501613ea6565b60208201526080830135604082015260a0830135606082015260c083013560808201526141e760e08401613ad7565b60a08201526101006141fb85828601613ea6565b60c083015261420e856101408601613ea6565b60e083015261018084013581830152508091505092915050565b6001600160e01b03198316815260408101600b831061424957614249613fd9565b8260208301529392505050565b6001600160e01b031984168152606081016142746020830185614089565b6001600160a01b0383166040830152949350505050565b60208082528181018390526000908460408401835b868110156142ce5782356142b381613ac2565b6001600160a01b0316825291830191908301906001016142a0565b509695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082614314576143146142ef565b500490565b8082018082111561061b57634e487b7160e01b600052601160045260246000fd5b8060005b6002811015610ab257815184526020938401939091019060010161433e565b6040810161061b828461433a565b828152606081016109ab602083018461433a565b60008151808452602080850194506020840160005b83811015613a8b57815187529582019590820190600101614394565b851515815284602082015260a0604082015260006143d160a0830186613a51565b82810360608401526143e38186613a51565b905082810360808401526131aa818561437f565b838152614407602082018461433a565b606081019190915260800192915050565b868152614428602082018761433a565b614435606082018661433a565b61444260a082018561433a565b61444f60e082018461433a565b60609190911b6bffffffffffffffffffffffff19166101208201526101340195945050505050565b600082614486576144866142ef565b500690565b614495818361433a565b60400191905056fea2646970667358221220704e2eb30c2832eb59291702bd39e13abf9773b45fc3d0b5add93de6bad1391064736f6c63430008190033",
  "deployer": "0x08295771719b138a241F45023B13CC868D72827D",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "COOLDOWN_PERIOD_THRESHOLD()": {
        "details": "Threshold for the cooldown period of key hash change and newly registered candidates."
      },
      "bulkSetValidatorThresholds(uint8[],uint256[])": {
        "details": "Bulk set the pick thresholds for a given validator types. Requirements: - The method caller is admin. Emits the event `PickThresholdUpdated`.",
        "params": {
          "thresholds": "An array of threshold values.",
          "validatorTypes": "An array of validator types."
        }
      },
      "calcKeyHash(uint256[2])": {
        "details": "Calculates the key hash from public keys."
      },
      "execFinalizeBeaconAndPendingCids(uint256,uint256,address[])": {
        "details": "Finalize the beacon and and pending cids for upcoming period. Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period."
      },
      "execRecordAndSlashUnavailability(uint256,uint256,address,address[])": {
        "details": "Record the unavailability and slash the validator. Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period."
      },
      "execRequestRandomSeedForNextPeriod(uint256,uint256)": {
        "details": "Request the random seed for the next period, at the first epoch of each period. Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period."
      },
      "fulfillRandomSeed((uint256,uint256,uint256,address),(uint256[2],uint256[2],uint256,uint256,uint256,address,uint256[2],uint256[2],uint256))": {
        "details": "Fulfills the random seed. Requirements: - The request is not finalized. - The period is greater than current period. - The chain id field is match with the current chain ID. - The verifying contract field is match with the current contract address. - The proof is valid. - The request is not submitted by method caller before. - The key hash is match with the one in the profile. - The key hash changed cool down is ended. - The method caller is governance validator. - The method caller is not newly joined. Emits the event `RandomSeedFulfilled`.",
        "params": {
          "proof": "The VRF proof.",
          "req": "The random request."
        }
      },
      "getActivatedAtPeriod()": {
        "details": "Returns the period at which the random beacon sorting was activated."
      },
      "getBeaconData(uint256)": {
        "details": "Retrieves the beacon data for a given period.",
        "params": {
          "period": "The period for which to retrieve the beacon data."
        },
        "returns": {
          "finalized": "A boolean indicating whether the beacon value has been finalized.",
          "submissionCount": "The number of submissions for the given period.",
          "value": "The beacon value for the given period."
        }
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getLastFinalizedPeriod()": {
        "details": "Get last finalized period."
      },
      "getRequestHash(uint256)": {
        "details": "Get request hash for a given period."
      },
      "getSavedValidatorSet(uint256)": {
        "details": "Get pending validator ids that will be chosen in given `period`."
      },
      "getSelectedValidatorSet(uint256,uint256)": {
        "details": "Get selected validator ids that have been chosen in given `period` and `epoch`."
      },
      "getUnavailabilityCount(address)": {
        "details": "Retrieves the unavailability count for a given consensus address."
      },
      "getUnavailabilityCountById(address)": {
        "details": "Retrieves the unavailability count for a given candidate id."
      },
      "getUnavailabilitySlashThreshold()": {
        "details": "Returns the unavailability slash threshold."
      },
      "getValidatorThreshold(uint8)": {
        "details": "Returns the pick threshold for a given validator type.",
        "params": {
          "validatorType": "The validator type."
        },
        "returns": {
          "threshold": "The pick threshold."
        }
      },
      "initializeV2()": {
        "details": "Left empty on purpose of matching the contract version with the one in the testnet."
      },
      "initializeV3()": {
        "details": "Left empty on purpose of matching the contract version with the one in the testnet."
      },
      "isSubmittedAt(uint256,address)": {
        "details": "Checks if a submission has been made by a specific oracle for a given period.",
        "params": {
          "consensus": "The consensus address of governing validator.",
          "period": "The period to check for the submission."
        },
        "returns": {
          "submitted": "A boolean indicating whether the submission has been made or not."
        }
      },
      "isSubmittedAtById(uint256,address)": {
        "details": "Checks if a submission has been made by a specific oracle for a given period.",
        "params": {
          "cid": "The candidate id of governing validator.",
          "period": "The period to check for the submission."
        },
        "returns": {
          "submitted": "A boolean indicating whether the submission has been made or not."
        }
      },
      "isSubmittedAtByKeyHash(uint256,bytes32)": {
        "details": "Checks if a submission has been made by a specific key hash for a given period.",
        "params": {
          "keyHash": "The key hash of the governing validator.",
          "period": "The period to check for the submission."
        },
        "returns": {
          "submitted": "A boolean indicating whether the submission has been made or not."
        }
      },
      "pickValidatorSetForCurrentPeriod(uint256)": {
        "details": "Picks validator IDs for given `epoch` number."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setUnavailabilitySlashThreshold(uint256)": {
        "details": "Sets the unavailability slash threshold. Requirements: - The method caller is admin. Emits the event `SlashUnavailabilityThresholdUpdated`.",
        "params": {
          "slashThreshold": "The new value."
        }
      }
    },
    "events": {
      "BeaconFinalized(uint256,uint256)": {
        "details": "Emitted when the beacon is finalized.",
        "params": {
          "period": "The period.",
          "value": "The beacon value."
        }
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RandomSeedFulfilled(address,uint256,bytes32)": {
        "details": "Emitted when the random seed is fulfilled.",
        "params": {
          "by": "The address that fulfill the random seed.",
          "period": "The period.",
          "reqHash": "The request hash."
        }
      },
      "RandomSeedRequested(uint256,bytes32,(uint256,uint256,uint256,address))": {
        "details": "Emitted when the random seed is requested.",
        "params": {
          "period": "The period.",
          "req": "The random request.",
          "reqHash": "The request hash."
        }
      },
      "SlashUnavailabilityThresholdUpdated(uint256)": {
        "details": "Emitted when the unavailability slash threshold is updated.",
        "params": {
          "value": "The new value."
        }
      },
      "ValidatorSetSaved(uint256,bool,uint256,address[],address[],uint256[])": {
        "details": "Event emitted when the validator set is saved."
      },
      "ValidatorThresholdUpdated(uint8,uint256)": {
        "details": "Emitted when the validator threshold is updated.",
        "params": {
          "threshold": "The new value.",
          "validatorType": "The validator type."
        }
      }
    },
    "errors": {
      "ErrAlreadyFinalizedBeacon(uint256)": [
        {
          "details": "Throws if the request is already finalized"
        }
      ],
      "ErrAlreadySubmitted()": [
        {
          "details": "Throws if the request is already submitted"
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrInvalidChainId(uint256,uint256)": [
        {
          "details": "Throws if the chain ID is invalid"
        }
      ],
      "ErrInvalidKeyHash(bytes32,bytes32)": [
        {
          "details": "Throws if the key hash is not match with the one in the profile"
        }
      ],
      "ErrInvalidPeriod()": [
        {
          "details": "Throws if the period is invalid (too early or too late)"
        }
      ],
      "ErrInvalidProof()": [
        {
          "details": "Throws if the proof is invalid"
        }
      ],
      "ErrInvalidRandomRequest(bytes32,bytes32)": [
        {
          "details": "Throws if the random request is inexistent"
        }
      ],
      "ErrInvalidThresholdConfig()": [
        {
          "details": "Throws if sum of all validator types threshold is not equal to max validator number"
        }
      ],
      "ErrInvalidVerifyingContract(address,address)": [
        {
          "details": "Throws if the address of verifying contract is not match with current contract"
        }
      ],
      "ErrLengthMismatch()": [
        {
          "details": "Error indicating a length mismatch between two arrays."
        }
      ],
      "ErrLengthMismatch(bytes4)": [
        {
          "details": "Error indicating a mismatch in the length of input parameters or arrays for a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that has a length mismatch."
          }
        }
      ],
      "ErrNotActivated(uint256)": [
        {
          "details": "Throws if current period is less than the target activation period"
        }
      ],
      "ErrNotEndedChangeKeyHashCooldown()": [
        {
          "details": "Throws if the cool down for key hash change is not ended"
        }
      ],
      "ErrNotEndedRegisterCooldown()": [
        {
          "details": "Throws if the cool down for registration is not ended"
        }
      ],
      "ErrNotFinalizedBeacon(uint256)": [
        {
          "details": "Throws if the request is not finalized"
        }
      ],
      "ErrOutOfRange(uint256)": [
        {
          "details": "Throws if the index is out of bitmap length."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnauthorizedCall(bytes4)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ErrAlreadyFinalizedBeacon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadySubmitted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ErrInvalidKeyHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"ErrInvalidRandomRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidThresholdConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrInvalidVerifyingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"untilPeriod\",\"type\":\"uint256\"}],\"name\":\"ErrNotActivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNotEndedChangeKeyHashCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNotEndedRegisterCooldown\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ErrNotFinalizedBeacon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ErrOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrUnauthorizedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BeaconFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reqHash\",\"type\":\"bytes32\"}],\"name\":\"RandomSeedFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reqHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevBeacon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct RandomRequest\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"RandomSeedRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SlashUnavailabilityThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pickedAll\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nRV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nonRotatingValidators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rotatingValidators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rotatingStakeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"ValidatorSetSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IRandomBeacon.ValidatorType\",\"name\":\"validatorType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ValidatorThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_PERIOD_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADDITION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRandomBeacon.ValidatorType[]\",\"name\":\"validatorTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"bulkSetValidatorThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicKeys\",\"type\":\"uint256[2]\"}],\"name\":\"calcKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdatedPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"allCids\",\"type\":\"address[]\"}],\"name\":\"execFinalizeBeaconAndPendingCids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdatedPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"slashIndicator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"allCids\",\"type\":\"address[]\"}],\"name\":\"execRecordAndSlashUnavailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdatedPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"execRequestRandomSeedForNextPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevBeacon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"internalType\":\"struct RandomRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"pk\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"gamma\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uWitness\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"cGammaWitness\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sHashWitness\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"zInv\",\"type\":\"uint256\"}],\"internalType\":\"struct VRF.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"fulfillRandomSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivatedAtPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getBeaconData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"submissionCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastFinalizedPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getRequestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"reqHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getSavedValidatorSet\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"_pickAll\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"_nRV\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"_nonRotatingValidators\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_cid\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_staked\",\"type\":\"uint96\"}],\"internalType\":\"struct LibSortValidatorsByBeacon.RotatingValidatorStorage[]\",\"name\":\"_rotatingValidators\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LibSortValidatorsByBeacon.SortedValidatorStorage\",\"name\":\"_sorted\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"_cids\",\"type\":\"address[]\"}],\"internalType\":\"struct LibSortValidatorsByBeacon.UnsortedValidatorStorage\",\"name\":\"_unsorted\",\"type\":\"tuple\"}],\"internalType\":\"struct LibSortValidatorsByBeacon.ValidatorStorage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getSelectedValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pickedCids\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getUnavailabilityCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"getUnavailabilityCountById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnavailabilitySlashThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRandomBeacon.ValidatorType\",\"name\":\"validatorType\",\"type\":\"uint8\"}],\"name\":\"getValidatorThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profile\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedOrg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorSet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slashThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activatedAtPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum IRandomBeacon.ValidatorType[]\",\"name\":\"validatorTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"isSubmittedAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"submitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"isSubmittedAtById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"submitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"isSubmittedAtByKeyHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"submitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"pickValidatorSetForCurrentPeriod\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pickedCids\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setUnavailabilitySlashThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyFinalizedBeacon(uint256)\":[{\"details\":\"Throws if the request is already finalized\"}],\"ErrAlreadySubmitted()\":[{\"details\":\"Throws if the request is already submitted\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrInvalidChainId(uint256,uint256)\":[{\"details\":\"Throws if the chain ID is invalid\"}],\"ErrInvalidKeyHash(bytes32,bytes32)\":[{\"details\":\"Throws if the key hash is not match with the one in the profile\"}],\"ErrInvalidPeriod()\":[{\"details\":\"Throws if the period is invalid (too early or too late)\"}],\"ErrInvalidProof()\":[{\"details\":\"Throws if the proof is invalid\"}],\"ErrInvalidRandomRequest(bytes32,bytes32)\":[{\"details\":\"Throws if the random request is inexistent\"}],\"ErrInvalidThresholdConfig()\":[{\"details\":\"Throws if sum of all validator types threshold is not equal to max validator number\"}],\"ErrInvalidVerifyingContract(address,address)\":[{\"details\":\"Throws if the address of verifying contract is not match with current contract\"}],\"ErrLengthMismatch()\":[{\"details\":\"Error indicating a length mismatch between two arrays.\"}],\"ErrLengthMismatch(bytes4)\":[{\"details\":\"Error indicating a mismatch in the length of input parameters or arrays for a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that has a length mismatch.\"}}],\"ErrNotActivated(uint256)\":[{\"details\":\"Throws if current period is less than the target activation period\"}],\"ErrNotEndedChangeKeyHashCooldown()\":[{\"details\":\"Throws if the cool down for key hash change is not ended\"}],\"ErrNotEndedRegisterCooldown()\":[{\"details\":\"Throws if the cool down for registration is not ended\"}],\"ErrNotFinalizedBeacon(uint256)\":[{\"details\":\"Throws if the request is not finalized\"}],\"ErrOutOfRange(uint256)\":[{\"details\":\"Throws if the index is out of bitmap length.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnauthorizedCall(bytes4)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"BeaconFinalized(uint256,uint256)\":{\"details\":\"Emitted when the beacon is finalized.\",\"params\":{\"period\":\"The period.\",\"value\":\"The beacon value.\"}},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RandomSeedFulfilled(address,uint256,bytes32)\":{\"details\":\"Emitted when the random seed is fulfilled.\",\"params\":{\"by\":\"The address that fulfill the random seed.\",\"period\":\"The period.\",\"reqHash\":\"The request hash.\"}},\"RandomSeedRequested(uint256,bytes32,(uint256,uint256,uint256,address))\":{\"details\":\"Emitted when the random seed is requested.\",\"params\":{\"period\":\"The period.\",\"req\":\"The random request.\",\"reqHash\":\"The request hash.\"}},\"SlashUnavailabilityThresholdUpdated(uint256)\":{\"details\":\"Emitted when the unavailability slash threshold is updated.\",\"params\":{\"value\":\"The new value.\"}},\"ValidatorSetSaved(uint256,bool,uint256,address[],address[],uint256[])\":{\"details\":\"Event emitted when the validator set is saved.\"},\"ValidatorThresholdUpdated(uint8,uint256)\":{\"details\":\"Emitted when the validator threshold is updated.\",\"params\":{\"threshold\":\"The new value.\",\"validatorType\":\"The validator type.\"}}},\"kind\":\"dev\",\"methods\":{\"COOLDOWN_PERIOD_THRESHOLD()\":{\"details\":\"Threshold for the cooldown period of key hash change and newly registered candidates.\"},\"bulkSetValidatorThresholds(uint8[],uint256[])\":{\"details\":\"Bulk set the pick thresholds for a given validator types. Requirements: - The method caller is admin. Emits the event `PickThresholdUpdated`.\",\"params\":{\"thresholds\":\"An array of threshold values.\",\"validatorTypes\":\"An array of validator types.\"}},\"calcKeyHash(uint256[2])\":{\"details\":\"Calculates the key hash from public keys.\"},\"execFinalizeBeaconAndPendingCids(uint256,uint256,address[])\":{\"details\":\"Finalize the beacon and and pending cids for upcoming period. Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\"},\"execRecordAndSlashUnavailability(uint256,uint256,address,address[])\":{\"details\":\"Record the unavailability and slash the validator. Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\"},\"execRequestRandomSeedForNextPeriod(uint256,uint256)\":{\"details\":\"Request the random seed for the next period, at the first epoch of each period. Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\"},\"fulfillRandomSeed((uint256,uint256,uint256,address),(uint256[2],uint256[2],uint256,uint256,uint256,address,uint256[2],uint256[2],uint256))\":{\"details\":\"Fulfills the random seed. Requirements: - The request is not finalized. - The period is greater than current period. - The chain id field is match with the current chain ID. - The verifying contract field is match with the current contract address. - The proof is valid. - The request is not submitted by method caller before. - The key hash is match with the one in the profile. - The key hash changed cool down is ended. - The method caller is governance validator. - The method caller is not newly joined. Emits the event `RandomSeedFulfilled`.\",\"params\":{\"proof\":\"The VRF proof.\",\"req\":\"The random request.\"}},\"getActivatedAtPeriod()\":{\"details\":\"Returns the period at which the random beacon sorting was activated.\"},\"getBeaconData(uint256)\":{\"details\":\"Retrieves the beacon data for a given period.\",\"params\":{\"period\":\"The period for which to retrieve the beacon data.\"},\"returns\":{\"finalized\":\"A boolean indicating whether the beacon value has been finalized.\",\"submissionCount\":\"The number of submissions for the given period.\",\"value\":\"The beacon value for the given period.\"}},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getLastFinalizedPeriod()\":{\"details\":\"Get last finalized period.\"},\"getRequestHash(uint256)\":{\"details\":\"Get request hash for a given period.\"},\"getSavedValidatorSet(uint256)\":{\"details\":\"Get pending validator ids that will be chosen in given `period`.\"},\"getSelectedValidatorSet(uint256,uint256)\":{\"details\":\"Get selected validator ids that have been chosen in given `period` and `epoch`.\"},\"getUnavailabilityCount(address)\":{\"details\":\"Retrieves the unavailability count for a given consensus address.\"},\"getUnavailabilityCountById(address)\":{\"details\":\"Retrieves the unavailability count for a given candidate id.\"},\"getUnavailabilitySlashThreshold()\":{\"details\":\"Returns the unavailability slash threshold.\"},\"getValidatorThreshold(uint8)\":{\"details\":\"Returns the pick threshold for a given validator type.\",\"params\":{\"validatorType\":\"The validator type.\"},\"returns\":{\"threshold\":\"The pick threshold.\"}},\"initializeV2()\":{\"details\":\"Left empty on purpose of matching the contract version with the one in the testnet.\"},\"initializeV3()\":{\"details\":\"Left empty on purpose of matching the contract version with the one in the testnet.\"},\"isSubmittedAt(uint256,address)\":{\"details\":\"Checks if a submission has been made by a specific oracle for a given period.\",\"params\":{\"consensus\":\"The consensus address of governing validator.\",\"period\":\"The period to check for the submission.\"},\"returns\":{\"submitted\":\"A boolean indicating whether the submission has been made or not.\"}},\"isSubmittedAtById(uint256,address)\":{\"details\":\"Checks if a submission has been made by a specific oracle for a given period.\",\"params\":{\"cid\":\"The candidate id of governing validator.\",\"period\":\"The period to check for the submission.\"},\"returns\":{\"submitted\":\"A boolean indicating whether the submission has been made or not.\"}},\"isSubmittedAtByKeyHash(uint256,bytes32)\":{\"details\":\"Checks if a submission has been made by a specific key hash for a given period.\",\"params\":{\"keyHash\":\"The key hash of the governing validator.\",\"period\":\"The period to check for the submission.\"},\"returns\":{\"submitted\":\"A boolean indicating whether the submission has been made or not.\"}},\"pickValidatorSetForCurrentPeriod(uint256)\":{\"details\":\"Picks validator IDs for given `epoch` number.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setUnavailabilitySlashThreshold(uint256)\":{\"details\":\"Sets the unavailability slash threshold. Requirements: - The method caller is admin. Emits the event `SlashUnavailabilityThresholdUpdated`.\",\"params\":{\"slashThreshold\":\"The new value.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol\":\"RoninRandomBeacon_Mainnet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/\",\":@contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":@fdk/=dependencies/@fdk-v0.3.0-beta/script/\",\":@openzeppelin-v5/contracts/=dependencies/@openzeppelin-contracts-5.0.2/\",\":@openzeppelin/contracts/=dependencies/@openzeppelin-contracts-4.7.3/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=dependencies/@prb-test-0.6.4/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":@solady/=dependencies/@fdk-v0.3.0-beta/dependencies/solady-0.0.206/src/\",\":chainlink/=lib/chainlink/\",\":contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":ds-test/=lib/oz-v5/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/oz-v5/lib/erc4626-tests/\",\":forge-std/=dependencies/@fdk-v0.3.0-beta/dependencies/forge-std-1.8.2/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":oz-v5/=lib/oz-v5/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":safe-smart-account/contracts/=lib/safe-smart-account/contracts/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/foundry-deployment-kit/lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport { ITransparentUpgradeableProxyV2 } from \\\"../interfaces/extensions/ITransparentUpgradeableProxyV2.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy, ITransparentUpgradeableProxyV2 {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) { }\\n\\n  /**\\n   * @inheritdoc ITransparentUpgradeableProxyV2\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb84a4f1655596602425260b6c9dcb0be80c817ed7b892a5b33d89299a59932ce\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address payable contract_) {\\n    contract_ = payable(_getContractMap()[uint8(contractType)]);\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x53b9c2c44f39fa16fd4582b4667e808b8ab7c43437c263b59b5cbf5d2df47e78\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/consumers/GlobalConfigConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GlobalConfigConsumer {\\n  /// @dev The addition amount of gas sending along in external calls. Total gas stipend is added with default 2300 gas.\\n  uint256 public constant DEFAULT_ADDITION_GAS = 6200;\\n  /// @dev The length of a period in second.\\n  uint256 public constant PERIOD_DURATION = 1 days;\\n}\\n\",\"keccak256\":\"0x314c0ba791b9a48e41fe5b10ff37b1dd49dc37db524fa0db4d0389f8fdd0230c\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Validator\\u2019s admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Timestamp of last change of any profile info.\\n    uint256 profileLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n    /// @dev Old consensus\\n    TConsensus oldConsensus;\\n    /// @dev Timestamp where the profile is registered.\\n    uint256 registeredAt;\\n    /// @dev VRF key hash for the profile.\\n    bytes32 vrfKeyHash;\\n    /// @dev Timestamp of last change of VRF key hash. Only used in the logic of Beacon. Not used for checking for cooldown of updating the profile.\\n    uint256 vrfKeyHashLastChange;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the consensus of a non-governor profile is changed.\\n  event ConsensusAddressOfNonGovernorChanged(address indexed id);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the VRF key hash of the `id` is changed.\\n  event VRFKeyHashChanged(address indexed id, bytes32 vrfKeyHash);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change any address or pubkey in the profile because cooldown is not ended.\\n  error ErrProfileChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrDuplicatedVRFKeyHash(bytes32 vrfKeyHash);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n  error ErrLookUpIdFailed(TConsensus consensus);\\n  error ErrLookUpIdFromVRFKeyFailed(bytes32 vrfKeyHash);\\n  error ErrValidatorOnRenunciation(address cid);\\n\\n  function initialize(address validatorContract) external;\\n\\n  function initializeV2(address stakingContract, address trustedOrgContract) external;\\n\\n  function initializeV3(uint256 cooldown) external;\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to query required random beacon info from `vrfKeyHash`.\\n  function getVRFKeyHash2BeaconInfo(bytes32 vrfKeyHash)\\n    external\\n    view\\n    returns (address id, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query required random beacon info from `id` address.\\n  function getId2BeaconInfo(address id)\\n    external\\n    view\\n    returns (bytes32 vrfKeyHash, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query `admin` from `id` address.\\n  function getId2Admin(address id) external view returns (address);\\n\\n  /// @dev Getter to query `treasury` from `id` address.\\n  function getId2Treasury(address id) external view returns (address payable);\\n\\n  /// @dev Getter to query `pubkey` from `id` address.\\n  function getId2Pubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `profileLastChange` from `id` address.\\n  function getId2ProfileLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `oldPubkey` from `id` address.\\n  function getId2OldPubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `oldConsensus` from `id` address.\\n  function getId2OldConsensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `registeredAt` from `id` address.\\n  function getId2RegisteredAt(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `consensus` from `id` address.\\n  function getId2Consensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `vrfKeyHash` from `id` address.\\n  function getId2VRFKeyHash(address id) external view returns (bytes32);\\n\\n  /// @dev Getter to query `vrfKeyHashLastChange` from `id` address.\\n  function getId2VRFKeyHashLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to batch query from `id` to `registeredAt`.\\n  function getManyId2RegisteredAt(address[] calldata idList) external view returns (uint256[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `admin`, return address(0) if the profile not exist.\\n  function getManyId2Admin(address[] calldata idList) external view returns (address[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address, revert if not found.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address, revert if not found.\\n  function getVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address.\\n  function tryGetVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeAdminAddr(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @notice The candidate admin changes the VRF key hash.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New VRF key hash must not be duplicated.\\n   * - The VRF key hash change cooldown must be ended.\\n   */\\n  function changeVRFKeyHash(address id, bytes32 vrfKeyHash) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setCooldownConfig(uint256 cooldown) external;\\n\\n  /**\\n   * @dev Returns the config of cool down on change profile info.\\n   */\\n  function getCooldownConfig() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0f467b38aaf18dbc09d6b054ba9c859b496bf5deb2a135a3663c2e0fca1e063a\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(TrustedOrganization[] calldata trustedOrgs, uint256 num, uint256 denom) external;\\n\\n  function initializeV2(address profileContract) external;\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0x8e65dfada7a81d219f5afadae3278ad50fc5a774e88f9c8bf9ce4f4b9102f42c\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address payable contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x3cb6bc67853229163685bbba63469fb2ef103bf1cbfec0fed3e9e4686049f45b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/extensions/ITransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransparentUpgradeableProxyV2 {\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) external payable;\\n}\\n\",\"keccak256\":\"0x901e8701f77ca17d9c3483705741e31b3a1771e6900ef2462bdfd0b98c31f4e6\",\"license\":\"MIT\"},\"contracts/interfaces/random-beacon/IRandomBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { RandomRequest } from \\\"../../libraries/LibSLA.sol\\\";\\nimport { LibSortValidatorsByBeacon } from \\\"../../libraries/LibSortValidatorsByBeacon.sol\\\";\\nimport { VRF } from \\\"@chainlink/contracts/src/v0.8/VRF.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRandomBeacon {\\n  /// @dev Throws if current period is less than the target activation period\\n  error ErrNotActivated(uint256 untilPeriod);\\n  /// @dev Throws if the cool down for key hash change is not ended\\n  error ErrNotEndedChangeKeyHashCooldown();\\n  /// @dev Throws if the cool down for registration is not ended\\n  error ErrNotEndedRegisterCooldown();\\n  /// @dev Throws if the proof is invalid\\n  error ErrInvalidProof();\\n  /// @dev Throws if the request is not finalized\\n  error ErrNotFinalizedBeacon(uint256 period);\\n  /// @dev Throws if the period is invalid (too early or too late)\\n  error ErrInvalidPeriod();\\n  /// @dev Throws if the request is already submitted\\n  error ErrAlreadySubmitted();\\n  /// @dev Throws if the request is already finalized\\n  error ErrAlreadyFinalizedBeacon(uint256 period);\\n  /// @dev Throws if the random request is inexistent\\n  error ErrInvalidRandomRequest(bytes32 expected, bytes32 actual);\\n  /// @dev Throws if the key hash is not match with the one in the profile\\n  error ErrInvalidKeyHash(bytes32 expected, bytes32 actual);\\n  /// @dev Throws if sum of all validator types threshold is not equal to max validator number\\n  error ErrInvalidThresholdConfig();\\n  /// @dev Throws if the chain ID is invalid\\n  error ErrInvalidChainId(uint256 expected, uint256 actual);\\n  /// @dev Throws if the address of verifying contract is not match with current contract\\n  error ErrInvalidVerifyingContract(address expected, address actual);\\n\\n  /**\\n   * @dev The validator type.\\n   */\\n  enum ValidatorType {\\n    Unknown,\\n    // Max Validator Number\\n    All,\\n    // Max Governing Validator Number\\n    Governing,\\n    // Max Standard Validator Number\\n    Standard,\\n    // Max Rotating Validator Number\\n    Rotating\\n  }\\n\\n  /**\\n   * @dev The beacon struct.\\n   */\\n  struct Beacon {\\n    // The request hash.\\n    bytes32 reqHash;\\n    // The random beacon value.\\n    uint256 value;\\n    // Whether the beacon is finalized.\\n    bool finalized;\\n    // The submission count.\\n    uint32 submissionCount;\\n    // Mapping of submitted requests.\\n    mapping(address cid => bool) submitted;\\n  }\\n\\n  /**\\n   * @dev Emitted when the validator threshold is updated.\\n   * @param validatorType The validator type.\\n   * @param threshold The new value.\\n   */\\n  event ValidatorThresholdUpdated(ValidatorType indexed validatorType, uint256 threshold);\\n\\n  /**\\n   * @dev Emitted when the unavailability slash threshold is updated.\\n   * @param value The new value.\\n   */\\n  event SlashUnavailabilityThresholdUpdated(uint256 value);\\n\\n  /**\\n   * @dev Emitted when the beacon is finalized.\\n   * @param period The period.\\n   * @param value The beacon value.\\n   */\\n  event BeaconFinalized(uint256 indexed period, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the random seed is fulfilled.\\n   * @param by The address that fulfill the random seed.\\n   * @param period The period.\\n   * @param reqHash The request hash.\\n   */\\n  event RandomSeedFulfilled(address indexed by, uint256 indexed period, bytes32 indexed reqHash);\\n\\n  /**\\n   * @dev Emitted when the random seed is requested.\\n   * @param period The period.\\n   * @param reqHash The request hash.\\n   * @param req The random request.\\n   */\\n  event RandomSeedRequested(uint256 indexed period, bytes32 indexed reqHash, RandomRequest req);\\n\\n  function initialize(\\n    address profile,\\n    address staking,\\n    address trustedOrg,\\n    address validatorSet,\\n    uint256 slashThreshold,\\n    uint256 activatedAtPeriod,\\n    ValidatorType[] calldata validatorTypes,\\n    uint256[] calldata thresholds\\n  ) external;\\n\\n  function initializeV2() external;\\n\\n  function initializeV3() external;\\n\\n  /**\\n   * @dev Threshold for the cooldown period of key hash change and newly registered candidates.\\n   */\\n  function COOLDOWN_PERIOD_THRESHOLD() external view returns (uint256 threshold);\\n\\n  /**\\n   * @dev Request the random seed for the next period, at the first epoch of each period.\\n   *\\n   * Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\\n   */\\n  function execRequestRandomSeedForNextPeriod(uint256 lastUpdatedPeriod, uint256 newPeriod) external;\\n\\n  /**\\n   * @dev Finalize the beacon and and pending cids for upcoming period.\\n   *\\n   * Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\\n   */\\n  function execFinalizeBeaconAndPendingCids(\\n    uint256 lastUpdatedPeriod,\\n    uint256 newPeriod,\\n    address[] calldata allCids\\n  ) external;\\n\\n  /**\\n   * @dev Record the unavailability and slash the validator.\\n   *\\n   * Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\\n   */\\n  function execRecordAndSlashUnavailability(\\n    uint256 lastUpdatedPeriod,\\n    uint256 newPeriod,\\n    address slashIndicator,\\n    address[] calldata allCids\\n  ) external;\\n\\n  /**\\n   * @dev Bulk set the pick thresholds for a given validator types.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `PickThresholdUpdated`.\\n   *\\n   * @param validatorTypes An array of validator types.\\n   * @param thresholds An array of threshold values.\\n   */\\n  function bulkSetValidatorThresholds(ValidatorType[] calldata validatorTypes, uint256[] calldata thresholds) external;\\n\\n  /**\\n   * @dev Sets the unavailability slash threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `SlashUnavailabilityThresholdUpdated`.\\n   *\\n   * @param slashThreshold The new value.\\n   */\\n  function setUnavailabilitySlashThreshold(uint256 slashThreshold) external;\\n\\n  /**\\n   * @dev Fulfills the random seed.\\n   *\\n   * Requirements:\\n   * - The request is not finalized.\\n   * - The period is greater than current period.\\n   * - The chain id field is match with the current chain ID.\\n   * - The verifying contract field is match with the current contract address.\\n   * - The proof is valid.\\n   * - The request is not submitted by method caller before.\\n   * - The key hash is match with the one in the profile.\\n   * - The key hash changed cool down is ended.\\n   * - The method caller is governance validator.\\n   * - The method caller is not newly joined.\\n   *\\n   * Emits the event `RandomSeedFulfilled`.\\n   *\\n   * @param req The random request.\\n   * @param proof The VRF proof.\\n   */\\n  function fulfillRandomSeed(RandomRequest calldata req, VRF.Proof calldata proof) external;\\n\\n  /**\\n   * @dev Checks if a submission has been made by a specific oracle for a given period.\\n   * @param period The period to check for the submission.\\n   * @param consensus The consensus address of governing validator.\\n   * @return submitted A boolean indicating whether the submission has been made or not.\\n   */\\n  function isSubmittedAt(uint256 period, TConsensus consensus) external view returns (bool submitted);\\n\\n  /**\\n   * @dev Checks if a submission has been made by a specific oracle for a given period.\\n   * @param period The period to check for the submission.\\n   * @param cid The candidate id of governing validator.\\n   * @return A boolean indicating whether the submission has been made or not.\\n   */\\n  function isSubmittedAtById(uint256 period, address cid) external view returns (bool);\\n\\n  /**\\n   * @dev Checks if a submission has been made by a specific key hash for a given period.\\n   * @param period The period to check for the submission.\\n   * @param keyHash The key hash of the governing validator.\\n   * @return submitted A boolean indicating whether the submission has been made or not.\\n   */\\n  function isSubmittedAtByKeyHash(uint256 period, bytes32 keyHash) external view returns (bool submitted);\\n\\n  /**\\n   * @dev Calculates the key hash from public keys.\\n   */\\n  function calcKeyHash(uint256[2] memory publicKeys) external pure returns (bytes32 keyHash);\\n\\n  /**\\n   * @dev Get request hash for a given period.\\n   */\\n  function getRequestHash(uint256 period) external view returns (bytes32 reqHash);\\n\\n  /**\\n   * @dev Get last finalized period.\\n   */\\n  function getLastFinalizedPeriod() external view returns (uint256 period);\\n\\n  /**\\n   * @dev Returns the unavailability slash threshold.\\n   */\\n  function getUnavailabilitySlashThreshold() external view returns (uint256 threshold);\\n\\n  /**\\n   * @dev Returns the pick threshold for a given validator type.\\n   * @param validatorType The validator type.\\n   * @return threshold The pick threshold.\\n   */\\n  function getValidatorThreshold(ValidatorType validatorType) external view returns (uint256 threshold);\\n\\n  /**\\n   * @dev Retrieves the beacon data for a given period.\\n   * @param period The period for which to retrieve the beacon data.\\n   * @return value The beacon value for the given period.\\n   * @return finalized A boolean indicating whether the beacon value has been finalized.\\n   * @return submissionCount The number of submissions for the given period.\\n   */\\n  function getBeaconData(uint256 period) external view returns (uint256 value, bool finalized, uint256 submissionCount);\\n\\n  /**\\n   * @dev Retrieves the unavailability count for a given consensus address.\\n   */\\n  function getUnavailabilityCount(TConsensus consensus) external view returns (uint256 count);\\n\\n  /**\\n   * @dev Retrieves the unavailability count for a given candidate id.\\n   */\\n  function getUnavailabilityCountById(address cid) external view returns (uint256 count);\\n\\n  /**\\n   * @dev Returns the period at which the random beacon sorting was activated.\\n   */\\n  function getActivatedAtPeriod() external view returns (uint256 activatedPeriod);\\n\\n  /**\\n   * @dev Picks validator IDs for given `epoch` number.\\n   */\\n  function pickValidatorSetForCurrentPeriod(uint256 epoch) external view returns (address[] memory pickedCids);\\n\\n  /**\\n   * @dev Get pending validator ids that will be chosen in given `period`.\\n   */\\n  function getSavedValidatorSet(uint256 period)\\n    external\\n    view\\n    returns (LibSortValidatorsByBeacon.ValidatorStorage memory savedValidators);\\n\\n  /**\\n   * @dev Get selected validator ids that have been chosen in given `period` and `epoch`.\\n   */\\n  function getSelectedValidatorSet(uint256 period, uint256 epoch) external view returns (address[] memory pickedCids);\\n}\\n\",\"keccak256\":\"0x38fb5fd4f1df1d8853ef653315f51e0745673da0d6b386f7e97f24253a39a44c\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3,\\n    FAST_FINALITY,\\n    RANDOM_BEACON\\n  }\\n\\n  /// @dev Error thrown when evidence has already been submitted.\\n  error ErrEvidenceAlreadySubmitted();\\n\\n  /// @dev Error thrown when public key in evidence is not registered.\\n  error ErrUnregisteredPublicKey();\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed cid, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x9ed2a219d6282772992662d28e4f9043f5e7b08dbdd8ae004be129e23c1189fe\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashRandomBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IBaseSlash } from \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashRandomBeacon is IBaseSlash {\\n  struct SlashRandomBeaconConfig {\\n    uint256 _slashAmount;\\n    uint256 _activatedAtPeriod;\\n  }\\n\\n  /**\\n   * @dev Emitted when the configs to slash random beacon is updated. See the method `getRandomBeaconSlashingConfigs`\\n   * for param details.\\n   */\\n  event RandomBeaconSlashingConfigsUpdated(uint256 slashRandomBeaconAmount);\\n\\n  /**\\n   * @dev Emitted when current period is less than `activatedAtPeriod` and validator is not slashed.\\n   */\\n  event SlashingBeaconSkipped(uint256 indexed period, address indexed validatorId);\\n\\n  /**\\n   * @dev Slashes for random beacon.\\n   *\\n   * Requirements:\\n   * - Only RandomBeacon contract is allowed to call.\\n   *\\n   * Emits the event `Slashed`.\\n   *\\n   * @param validatorId The id of the validator.\\n   * @param period The current period.\\n   */\\n  function slashRandomBeacon(address validatorId, uint256 period) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return config The random beacon slash configs.\\n   *\\n   */\\n  function getRandomBeaconSlashingConfigs() external view returns (SlashRandomBeaconConfig memory config);\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `RandomBeaconSlashingConfigsUpdated`.\\n   *\\n   * @param slashAmount The amount of RON to slash random beacon.\\n   * @param activatedAtPeriod The period to activate the slashing.\\n   */\\n  function setRandomBeaconSlashingConfigs(uint256 slashAmount, uint256 activatedAtPeriod) external;\\n}\\n\",\"keccak256\":\"0xdc2a7093be8cb5d40648f081ab3d8342777d213a790877d836575546ef003739\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n    /// @dev Mapping that indicate an admin was either current or previous admin of this pool\\n    mapping(address => bool) wasAdmin;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolId);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(TConsensus consensusAddr)\\n    external\\n    view\\n    returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(address poolId)\\n    external\\n    view\\n    returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0xbba4f2ff63a9b87252fe87df9bd9b1accbf53c6a77e5e2d21e5732a3546af31a\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the holder of the staking amount in the `poolId` is changed.\\n  event StakeholderChanged(address indexed poolId, address oldAdmin, address newAdmin, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed poolId, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] poolIds);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId, address indexed admin, uint256 amount, uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x6a433da73540468aec8f28ce1fd0502669c0a75073ee7586e206ca62690682d5\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(\\n    address user,\\n    TConsensus[] calldata consensusAddrList\\n  ) external view returns (uint256[] memory rewards);\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewardsById(address user, address[] calldata poolIds) external view returns (uint256[] memory rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(\\n    TConsensus[] calldata consensusAddrList,\\n    TConsensus consensusAddrDst\\n  ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x70dcb32b998535d9de9f21aba1447000586c1cadbc492397cbbbdf00c6c177ca\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolId, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolId, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolId, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolIds, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolIds, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolIds);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getRewardById(address poolId, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(\\n    TConsensus[] calldata consensusAddrs,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(\\n    address[] calldata poolIds,\\n    address[] calldata userList\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `poolIds`.\\n   */\\n  function getManyStakingTotalsById(address[] calldata poolIds)\\n    external\\n    view\\n    returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0x2435457dfc5943973db9b3e4983a0e99ce2ae8e9e2407e573ca07d0c6d5470d6\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /// @dev Event emitted when the `wasAdmin` is finished to migrate.\\n  event MigrateWasAdminFinished();\\n  /// @dev Event emitted when the `migrateWasAdmin` method is disabled.\\n  event MigrateWasAdminDisabled();\\n\\n  /// @dev Error indicating that the REP-4 migration is already done.\\n  error ErrMigrateWasAdminAlreadyDone();\\n\\n  function MIGRATOR_ROLE() external view returns (bytes32);\\n\\n  function initialize(\\n    address __validatorContract,\\n    uint256 __minValidatorStakingAmount,\\n    uint256 __maxCommissionRate,\\n    uint256 __cooldownSecsToUndelegate,\\n    uint256 __waitingSecsToRevoke\\n  ) external;\\n\\n  /**\\n   * @dev Initializes the contract storage V2.\\n   */\\n  function initializeV2() external;\\n\\n  /**\\n   * @dev Initializes the contract storage V3.\\n   */\\n  function initializeV3(address __profileContract) external;\\n\\n  function initializeV4(address admin, address migrator) external;\\n\\n  function migrateWasAdmin(address[] calldata poolIds, address[] calldata admins, bool[] calldata flags) external;\\n\\n  function disableMigrateWasAdmin() external;\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0xaa51c6358c29b85e964352105d4f145fac937a30c8a41b9850a5b2bb9917d162\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddr(address poolId, address currAdminAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0xdb7d155f96ebe309848561f86dbdbb3acc4d58b12b9dc89a54a757268104ee03\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfoById(address cid) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x995ebd44ad76f770f204e41833c3abe80da9b9a7d2465bb02a78a5d52ad4098d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /// @dev Throws if the period has not ended yet or the period ending block does not exist.\\n  error ErrPeriodNotEndedYet(uint256 period);\\n  /// @dev Throws if the period ending block does not exist.\\n  error ErrPeriodEndingBlockNotTracked(uint256 period, uint256 firstTrackedPeriod);\\n\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the block number that `period` ending at.\\n   *\\n   * Throws error if the period has not ended yet.\\n   * Throws error if the period ending block does not exist.\\n   *\\n   * @param period The period index.\\n   */\\n  function getPeriodEndBlock(uint256 period) external view returns (uint256 blockNumber);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf19183475274410e62bb5b57ccf89b2dc688986b21f0f4179de0692c618a3301\",\"license\":\"MIT\"},\"contracts/libraries/LibArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IndexMap } from \\\"./LibIndexMap.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibArray\\n * @dev A library for array-related utility functions in Solidity.\\n */\\nlibrary LibArray {\\n  /**\\n   * @dev Error indicating a length mismatch between two arrays.\\n   */\\n  error ErrLengthMismatch();\\n\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Calculates the sum of an array of uint256 values.\\n   *\\n   * Modified from: https://docs.soliditylang.org/en/v0.8.25/assembly.html#example\\n   *\\n   * @param data The array of uint256 values for which the sum is calculated.\\n   * @return result The sum of the provided array.\\n   */\\n  function sum(uint256[] memory data) internal pure returns (uint256 result) {\\n    assembly (\\\"memory-safe\\\") {\\n      // Load the length (first 32 bytes)\\n      let len := mload(data)\\n      let dataElementLocation := add(data, 0x20)\\n\\n      // Iterate until the bound is not met.\\n      for { let end := add(dataElementLocation, mul(len, 0x20)) } lt(dataElementLocation, end) {\\n        dataElementLocation := add(dataElementLocation, 0x20)\\n      } { result := add(result, mload(dataElementLocation)) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    uint256 length = A.length;\\n    if (length == 0) return false;\\n\\n    unchecked {\\n      for (uint256 i; i < length - 1; ++i) {\\n        for (uint256 j = i + 1; j < length; ++j) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @notice This method normalized the descending-sorted array `values` so that all elements in the `values`\\n   * are still in correct order, have 'relative' diffs and not greater than `sum(normed(values))/divisor`.\\n   * Returns the `normSum` and the `pivot` after normalizing the array.\\n   *\\n   * @dev Given a tuple of `(a, s, k)` and divisor `d` where:\\n   *    - `a` is the array of values of length `n`,\\n   *    - `s` is the sum of the array,\\n   *    - `k` is the pivot value, `k = s / d` initially.\\n   *\\n   * This method normalizes `a` to `a'` such that:\\n   *    (1) Elements in `a` and `a'` are decreased relatively\\n   *    (2) `k' = (s' / d)` and `\\u2200x \\u2208 a': x \\u2264 k'`\\n   *\\n   * Algorithm:\\n   *    1. Init `s = sum(a)`, `k = s/d`.\\n   *    2. While `k` changes:\\n   *       * Replace all `a[i] > k` by `k`\\n   *       * k := sum(unchanged(a[i])) / (d - count(changed(a[i])))\\n   *\\n   * For example:\\n   *    Input:\\n   *      a = [100, 70, 20, 15, 3]\\n   *      d = 3\\n   *    Calculation:\\n   *      Init:    a = [ 100,  70,  20,  15,  3 ];    s = 208;   k = 69\\n   *      Round 1: a = [  69,  69,  20,  15,  3 ];    s = 177;   k = 38\\n   *      Round 2: a = [  38,  38,  20,  15,  3 ];    s = 114;   k = 38\\n   *\\n   *      The calculation stop since all elements in a is \\u2264 k, in other words, `k` is unchanged.\\n   *    Output:\\n   *      s = 114\\n   *      k = 38\\n   *\\n   * Implementation denotes:\\n   *    `pivot`: k\\n   *    `left`:  to-be-changed elements\\n   *    `right`: unchanged elements\\n   *\\n   *    Input:\\n   *                     pivot\\n   *                       v\\n   *            --*-----*--|--------*---------*--------*------\\n   *              ^     ^           ^         ^        ^\\n   *              a[0]  a[1]        a[2]      a[3]     a[4]\\n   *\\n   *    Output:\\n   *                         pivot = a[0] = a[1]\\n   *                           v\\n   *            ---------------|----*---------*--------*------\\n   *                                ^         ^        ^\\n   *                                a[2]      a[3]     a[4]\\n   *\\n   *\\n   */\\n  function findNormalizedSumAndPivot(\\n    uint256[] memory values,\\n    uint256 divisor\\n  ) internal pure returns (uint256 normSum, uint256 pivot) {\\n    divisor = Math.min(values.length, divisor);\\n    values = inplaceDescSort(values);\\n\\n    uint256 sLeft;\\n    uint256 nLeft;\\n    uint256 sRight;\\n    bool shouldExit;\\n\\n    normSum = sum(values);\\n    pivot = normSum / divisor;\\n\\n    while (!shouldExit) {\\n      shouldExit = true;\\n\\n      while (values[nLeft] > pivot) {\\n        sLeft += values[nLeft++];\\n        shouldExit = false;\\n      }\\n\\n      if (shouldExit) break;\\n\\n      sRight = normSum - sLeft;\\n      pivot = sRight / (divisor - nLeft); // Mathematically proven `divisor` is always larger than `nLeft`\\n      sLeft = pivot * nLeft;\\n      normSum = sRight + sLeft;\\n    }\\n  }\\n\\n  /**\\n   * @dev Clips the values in the given array to be within the specified lower and upper bounds.\\n   *\\n   * - The input array is modified in place.\\n   *\\n   * - Examples:\\n   * `inplaceClip([1, 2, 3, 4, 5], 2, 4)` => `[2, 2, 3, 4, 4]`\\n   */\\n  function inplaceClip(\\n    uint256[] memory values,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256[] memory clippedValues) {\\n    uint256 length = values.length;\\n\\n    for (uint256 i; i < length; ++i) {\\n      if (values[i] < lower) values[i] = lower;\\n      if (values[i] > upper) values[i] = upper;\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      clippedValues := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory self, address[] memory other) internal pure returns (bool yes) {\\n    return hash(self) == hash(other);\\n  }\\n\\n  /**\\n   * @dev Hash dynamic size array\\n   * @param self The array of uint256\\n   * @return digest The hash result of the array\\n   */\\n  function hash(uint256[] memory self) internal pure returns (bytes32 digest) {\\n    assembly (\\\"memory-safe\\\") {\\n      digest := keccak256(add(self, 0x20), mul(mload(self), 0x20))\\n    }\\n  }\\n\\n  function hash(address[] memory self) internal pure returns (bytes32 digest) {\\n    return hash(toUint256s(self));\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (uint256) from a and b.\\n   */\\n  function concat(uint256[] memory a, uint256[] memory b) internal pure returns (uint256[] memory c) {\\n    unchecked {\\n      uint256 lengthA = a.length;\\n      uint256 lengthB = b.length;\\n\\n      if (lengthA == 0) return b;\\n      if (lengthB == 0) return a;\\n\\n      c = new uint256[](lengthA + lengthB);\\n\\n      uint256 i;\\n\\n      for (; i < lengthA;) {\\n        c[i] = a[i];\\n        ++i;\\n      }\\n      for (uint256 j; j < lengthB;) {\\n        c[i] = b[j];\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (address) from a and b.\\n   */\\n  function concat(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    return unsafeToAddresses(concat(toUint256s(a), toUint256s(b)));\\n  }\\n\\n  /**\\n   * @dev Converts an array of address to an array of uint256.\\n   */\\n  function toUint256s(address[] memory self) internal pure returns (uint256[] memory uint256s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint256s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of uint96.\\n   */\\n  function unsafeToUint96s(uint256[] memory self) internal pure returns (uint96[] memory uint96s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint96s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of address.\\n   */\\n  function unsafeToAddresses(uint256[] memory self) internal pure returns (address[] memory addresses) {\\n    assembly (\\\"memory-safe\\\") {\\n      addresses := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Create an array of indices (an index array) with provided range.\\n   * @param length The array size\\n   * @return data an array of indices\\n   */\\n  function arange(uint256 length) internal pure returns (uint256[] memory data) {\\n    unchecked {\\n      data = new uint256[](length);\\n      for (uint256 i; i < length; ++i) {\\n        data[i] = i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (uint256) given an array of indices.\\n   *\\n   * Inspiration from: https://numpy.org/doc/stable/reference/generated/numpy.take.html\\n   */\\n  function take(uint256[] memory self, uint256[] memory ids) internal pure returns (uint256[] memory result) {\\n    uint256 length = ids.length;\\n    result = new uint256[](length);\\n    for (uint256 i; i < length; ++i) {\\n      result[i] = self[ids[i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (address) given an array of indices.\\n   */\\n  function take(address[] memory self, uint256[] memory indices) internal pure returns (address[] memory result) {\\n    return unsafeToAddresses(take(toUint256s(self), indices));\\n  }\\n\\n  /**\\n   * @dev Pick the top `k` `keys` of type address[] based on their corresponding `values`.\\n   */\\n  function pickTopKByValues(\\n    address[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (address[] memory pickeds) {\\n    return unsafeToAddresses(pickTopKByValues(toUint256s(keys), values, k));\\n  }\\n\\n  /**\\n   * @dev Picks the top `k` `keys` based on their corresponding `values`.\\n   *\\n   * WARNING: The input array size will be changed. Besides, this fn does not guarantee all elements are sorted\\n   */\\n  function pickTopKByValues(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (uint256[] memory pickeds) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      if (k >= length) return keys;\\n\\n      inplaceDescSortByValue(keys, values);\\n      unsafeResize(keys, k);\\n\\n      return keys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding `indexMap` with the filter function `filterFn`.\\n   */\\n  function filterByIndexMap(\\n    uint256[] memory keys,\\n    IndexMap memory indexMap,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    return filterBy(keys, indexMap._inner, filterFn);\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding value array `values` with the filter function `filterFn`.\\n   */\\n  function filterBy(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      filteredKeys = new uint256[](length);\\n      uint256 nFiltered;\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (filterFn(i, values)) {\\n          filteredKeys[nFiltered++] = keys[i];\\n        }\\n      }\\n\\n      unsafeResize(filteredKeys, nFiltered);\\n\\n      return filteredKeys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of uint256 `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `values`.\\n   */\\n  function inplaceDescSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSort(values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function inplaceDescQuickSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = values.length;\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSort(values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function _inplaceDescQuickSort(uint256[] memory values, int256 left, int256 right) private pure {\\n    unchecked {\\n      if (left < right) {\\n        if (left == right) return;\\n        int256 i = left;\\n        int256 j = right;\\n        uint256 pivot = values[uint256(left + right) >> 1];\\n\\n        while (i <= j) {\\n          while (pivot < values[uint256(i)]) ++i;\\n          while (pivot > values[uint256(j)]) --j;\\n\\n          if (i <= j) {\\n            (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n            ++i;\\n            --j;\\n          }\\n        }\\n\\n        if (left < j) _inplaceDescQuickSort(values, left, j);\\n        if (i < right) _inplaceDescQuickSort(values, i, right);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of addresses `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    address[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (address[] memory sorted) {\\n    return unsafeToAddresses(inplaceDescQuickSortByValue(toUint256s(self), values));\\n  }\\n\\n  /**\\n   * @dev Resize a memory array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(uint256[] memory self, uint256 length) internal pure returns (uint256[] memory resized) {\\n    assembly (\\\"memory-safe\\\") {\\n      resized := self\\n      mstore(resized, length)\\n    }\\n  }\\n\\n  /**\\n   * @dev Resize a memory address array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(address[] memory self, uint256 length) internal pure returns (address[] memory resized) {\\n    return unsafeToAddresses(unsafeResize(toUint256s(self), length));\\n  }\\n\\n  /**\\n   * @dev Sorts `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSortByValue(self, values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `self` and `values`\\n   */\\n  function inplaceDescQuickSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = self.length;\\n    if (length != values.length) revert ErrLengthMismatch();\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSortByValue(self, values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values` based on a corresponding `arr`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `arr` and `values`\\n   */\\n  function _inplaceDescQuickSortByValue(\\n    uint256[] memory arr,\\n    uint256[] memory values,\\n    int256 left,\\n    int256 right\\n  ) private pure {\\n    unchecked {\\n      if (left == right) return;\\n      int256 i = left;\\n      int256 j = right;\\n      uint256 pivot = values[uint256(left + right) >> 1];\\n\\n      while (i <= j) {\\n        while (pivot < values[uint256(i)]) ++i;\\n        while (values[uint256(j)] < pivot) --j;\\n\\n        if (i <= j) {\\n          (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n          (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n          ++i;\\n          --j;\\n        }\\n      }\\n\\n      if (left < j) _inplaceDescQuickSortByValue(arr, values, left, j);\\n      if (i < right) _inplaceDescQuickSortByValue(arr, values, i, right);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe602052be2234f57b7040de8f34aaa934ca1c00d5edec95d607843a16718142a\",\"license\":\"MIT\"},\"contracts/libraries/LibIndexMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nstruct IndexMap {\\n  uint256[] _inner;\\n}\\n\\nusing LibIndexMap for IndexMap global;\\n\\n/**\\n * @title LibIndexMap\\n * @author TuDo1403\\n * @dev The `IndexMap` is a bitmap that represents the presence or absence of elements at specific indices.\\n * It is implemented as an array of uint256 values, where each element in an array is a bitmap which can represent the presence or absence of an element at a particular index.\\n * Each element in an array of bitmap can represent the presence or absence of 256 elements.\\n * The Presence of a particular index is represented by setting the corresponding bit in the bitmap to 1.\\n * Example:\\n * - Given an array of values: [11, 24, 33, 52]. Returns the indexes of odd numbers.\\n * - The values of odd numbers are: [11, 33]. Therefore, the indices of odd numbers are: [0, 2].\\n * - However, we can save more gas by using a bitmap to represent the indices of odd numbers.\\n * - Index 0 is an odd number, so we set the first bit of the bitmap to 1, (bitmap = 0001)\\n * - Index 2 is an odd number, so we set the third bit of the bitmap to 1, (bitmap = 0100)\\n * - The bitmap for the indices of odd number is: b'0001' | b'0100' = b'0101' = 5 in decimal\\n */\\nlibrary LibIndexMap {\\n  /// @dev Throws if the index is out of bitmap length.\\n  error ErrOutOfRange(uint256 index);\\n\\n  /// @dev Maximum number of bits in an indexmap slot.\\n  uint256 internal constant MAX_BIT = 256;\\n\\n  /**\\n   * @dev Wraps an array of uint256 values into an IndexMap struct.\\n   * @param inner The array of uint256 values to wrap.\\n   * @return The wrapped IndexMap struct.\\n   */\\n  function wrap(uint256[] memory inner) internal pure returns (IndexMap memory) {\\n    return IndexMap(inner);\\n  }\\n\\n  /**\\n   * @dev Creates a indexmap array based on the given number of elements.\\n   * @param numElement The number of elements to create the indexmap for.\\n   * @return indexmap The created indexmap array.\\n   */\\n  function create(uint16 numElement) internal pure returns (IndexMap memory indexmap) {\\n    unchecked {\\n      indexmap._inner = new uint256[](1 + uint256(numElement) / MAX_BIT);\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if an index is present in the map.\\n   * @param indexmap The map to check.\\n   * @param index The index to check.\\n   * @return A boolean indicating whether the index is present in the map.\\n   */\\n  function contains(IndexMap memory indexmap, uint256 index) internal pure returns (bool) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      // if index is out of range, return false\\n      if (index >= indexmap._inner.length * size) return false;\\n      return (indexmap._inner[index / size] & (1 << (index % size))) != 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of an element in a indexmap based on its value.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of the element.\\n   * @param index The value to record.\\n   * @return The updated indexmap with recorded existence of the element.\\n   */\\n  function set(IndexMap memory indexmap, uint256 index) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      uint256 pos = index / size;\\n\\n      if (pos >= indexmap._inner.length) revert ErrOutOfRange(index);\\n\\n      indexmap._inner[index / size] |= 1 << (index % size);\\n\\n      return indexmap;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of elements in a indexmap based on their values.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of elements.\\n   * @param indices The array of indices to record.\\n   * @return The updated indexmap with recorded existence of elements.\\n   */\\n  function setBatch(IndexMap memory indexmap, uint256[] memory indices) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 pos;\\n      uint256 size = MAX_BIT;\\n      uint256 length = indices.length;\\n      uint256 bitmapLength = indexmap._inner.length;\\n\\n      for (uint256 i; i < length; ++i) {\\n        pos = indices[i] / size;\\n\\n        if (pos >= bitmapLength) revert ErrOutOfRange(indices[i]);\\n\\n        indexmap._inner[pos] |= 1 << (indices[i] % size);\\n      }\\n\\n      return indexmap;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xce4278abfd4fbdc0de4a7605e8003c248984ed07e8ff3f2eb20183f5f302a6d4\",\"license\":\"MIT\"},\"contracts/libraries/LibSLA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title RandomRequest\\n * @dev A struct representing a random request.\\n */\\nstruct RandomRequest {\\n  // The period of the request.\\n  uint256 period;\\n  // The previous beacon value.\\n  uint256 prevBeacon;\\n  // The chain ID of the request.\\n  uint256 chainId;\\n  // The address that emits the request.\\n  address verifyingContract;\\n}\\n\\nusing LibSLA for RandomRequest global;\\n\\nlibrary LibSLA {\\n  /**\\n   * @dev Hashes the random request.\\n   */\\n  function hash(RandomRequest memory req) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(req.period, req.prevBeacon, req.chainId, req.verifyingContract));\\n  }\\n\\n  /**\\n   * @dev Calculates the proof seed\\n   */\\n  function calcProofSeed(RandomRequest memory req, bytes32 keyHash) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(req.period, req.prevBeacon, req.chainId, req.verifyingContract, keyHash)));\\n  }\\n\\n  /**\\n   * @dev Calculates the key hash from public keys.\\n   */\\n  function calcKeyHash(uint256[2] memory publicKeys) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(publicKeys));\\n  }\\n}\\n\",\"keccak256\":\"0xcbd2b627a685fddb43069fb5a3a68e6a74267278c831dd1183068b10e1134bab\",\"license\":\"MIT\"},\"contracts/libraries/LibSortValidatorsByBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { LibArray } from \\\"./LibArray.sol\\\";\\nimport { IndexMap, LibIndexMap } from \\\"./LibIndexMap.sol\\\";\\nimport { notInIndexMapFilter, nonZeroTrustedWeightFilter } from \\\"../utils/Filters.sol\\\";\\n\\nlibrary LibSortValidatorsByBeacon {\\n  using LibArray for uint256[];\\n  using LibArray for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode(uint256(keccak256(\\\"@ronin.RandomBeacon.storage.sortedValidatorsByBeacon\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 internal constant $$_SortedValidatorByBeaconStorageLocation =\\n    0x8593e13447c7ce85611f094407732145bce33e516174eca63d12235f14022600;\\n\\n  struct SortedValidatorStorage {\\n    // Number of non-rotating validators to pick.\\n    uint16 _nRV;\\n    // Governance Validators + Standard Validators\\n    address[] _nonRotatingValidators;\\n    // Packed data of Rotating Validators and their stake amounts\\n    RotatingValidatorStorage[] _rotatingValidators;\\n  }\\n\\n  struct RotatingValidatorStorage {\\n    // The candidate id of the validator.\\n    address _cid;\\n    // The staked amount of the validator.\\n    uint96 _staked;\\n  }\\n\\n  struct UnsortedValidatorStorage {\\n    // An array of unsorted validator addresses.\\n    address[] _cids;\\n  }\\n\\n  struct ValidatorStorage {\\n    // A boolean value indicating whether all the validators are picked.\\n    bool _pickAll;\\n    // Use when rotating validators are changed per epoch\\n    SortedValidatorStorage _sorted;\\n    // Use when all the validators are saved (when number of validators is less than the sum of nGV, nSV, and nRV)\\n    UnsortedValidatorStorage _unsorted;\\n  }\\n\\n  /// @dev Event emitted when the validator set is saved.\\n  event ValidatorSetSaved(\\n    uint256 indexed period,\\n    bool pickedAll,\\n    uint256 nRV,\\n    address[] nonRotatingValidators,\\n    address[] rotatingValidators,\\n    uint256[] rotatingStakeAmounts\\n  );\\n\\n  /**\\n   * @dev Sorts and saves the validator set based on the given parameters.\\n   *\\n   * - Filters and separates Governance Validators, Standard Validators, and Non-Standard Validators\\n   * - If the number of validators is less than the sum of `nGV`, `nSV`, and `nRV`, saves all cids as unsorted validators\\n   * - Otherwise, saves two sets of validators: non-rotating validators and rotating validators\\n   * - This function should only be called once per period\\n   *\\n   * @param period The period value.\\n   * @param nGV The number of governance validators.\\n   * @param nSV The number of standard validators.\\n   * @param nRV The number of non-standard validators.\\n   * @param cids The array of validator candidate ids.\\n   * @param trustedWeights The array of trusted weights for validators.\\n   */\\n  function filterAndSaveValidators(\\n    uint256 period,\\n    uint256 nGV,\\n    uint256 nSV,\\n    uint256 nRV,\\n    address[] memory cids,\\n    uint256[] memory stakedAmounts,\\n    uint256[] memory trustedWeights\\n  ) internal {\\n    unchecked {\\n      uint256 length = cids.length;\\n      if (!(length == stakedAmounts.length && length == trustedWeights.length)) revert LibArray.ErrLengthMismatch();\\n      // save all cids if the number of cids is less than the max pick config\\n      if (nGV + nSV + nRV >= length) {\\n        _saveAllCids(period, cids);\\n        return;\\n      }\\n\\n      // create indices for validators\\n      uint256[] memory indices = LibArray.arange(length);\\n      // create bitmap for indices of validators\\n      IndexMap memory picked = LibIndexMap.create(uint16(length));\\n      // filter and pick governance validators\\n      uint256[] memory gvIndices = indices.filterBy(trustedWeights, nonZeroTrustedWeightFilter);\\n      // pick top `nGV` governance validators\\n      gvIndices = gvIndices.pickTopKByValues(stakedAmounts.take(gvIndices), nGV);\\n      // mark the existence of governance validators\\n      picked.setBatch(gvIndices);\\n\\n      // filter and pick standard validators\\n      // If the number of governance validators is fewer than the maximum governance validator,\\n      // Then the remaining number is transferred to standard validator case\\n      nSV += nGV - gvIndices.length;\\n      uint256[] memory svIndices = indices.filterByIndexMap(picked, notInIndexMapFilter);\\n      // pick top `nSV` standard validators\\n      svIndices = svIndices.pickTopKByValues(stakedAmounts.take(svIndices), nSV);\\n      // mark the existence of standard validators\\n      picked.setBatch(svIndices);\\n\\n      // filter and pick non-standard validators\\n      uint256[] memory rvIndices = indices.filterByIndexMap(picked, notInIndexMapFilter);\\n\\n      _updateNewCids({\\n        nRV: nRV,\\n        period: period,\\n        nonRotatingValidators: cids.take(gvIndices.concat(svIndices)),\\n        rotatingStakeAmounts: stakedAmounts.take(rvIndices),\\n        rotatingValidators: cids.take(rvIndices)\\n      });\\n    }\\n  }\\n\\n  /**\\n   * @dev Saves the all cids for a given period.\\n   *\\n   * - Save all cids as unsorted validators.\\n   */\\n  function _saveAllCids(uint256 period, address[] memory cids) private {\\n    ValidatorStorage storage $ = getValidatorPerPeriodLocation(period);\\n    SortedValidatorStorage storage $sortedValidatorStorage = $._sorted;\\n\\n    $._pickAll = true;\\n    $._unsorted._cids = cids;\\n\\n    // delete the previous sorted data\\n    delete $sortedValidatorStorage._nRV;\\n    delete $sortedValidatorStorage._rotatingValidators;\\n    delete $sortedValidatorStorage._nonRotatingValidators;\\n\\n    emit ValidatorSetSaved({\\n      period: period,\\n      pickedAll: true,\\n      nRV: 0,\\n      nonRotatingValidators: cids,\\n      rotatingValidators: new address[](0),\\n      rotatingStakeAmounts: new uint256[](0)\\n    });\\n  }\\n\\n  /**\\n   * @dev Saves the sorted validators for a given period, beacon, and number of non-rotating validators.\\n   *\\n   * - Save non-rotating validators set\\n   * - Save the new packed rotating validators set\\n   *\\n   * @param period The period for which the validators are being saved.\\n   * @param nRV The number of non-standard validators.\\n   * @param nonRotatingValidators An array of addresses representing the non-rotating validators.\\n   * @param rotatingValidators An array of addresses representing the rotating validators.\\n   * @param rotatingStakeAmounts An array of stake values corresponding to the rotating validators.\\n   */\\n  function _updateNewCids(\\n    uint256 period,\\n    uint256 nRV,\\n    address[] memory nonRotatingValidators,\\n    address[] memory rotatingValidators,\\n    uint256[] memory rotatingStakeAmounts\\n  ) private {\\n    ValidatorStorage storage $validatorStorage = getValidatorPerPeriodLocation(period);\\n    SortedValidatorStorage storage $sortedValidatorStorage = $validatorStorage._sorted;\\n\\n    // delete previous unsorted data\\n    delete $validatorStorage._pickAll;\\n    delete $validatorStorage._unsorted._cids;\\n\\n    // delete the previous rotating validator set\\n    delete $sortedValidatorStorage._rotatingValidators;\\n\\n    // save the non-rotating validators\\n    $sortedValidatorStorage._nonRotatingValidators = nonRotatingValidators;\\n\\n    emit ValidatorSetSaved(period, false, nRV, nonRotatingValidators, rotatingValidators, rotatingStakeAmounts);\\n\\n    if (nRV == 0) return;\\n\\n    $sortedValidatorStorage._nRV = uint16(nRV);\\n\\n    // pack `rotatingValidators` and `rotatingStakeAmounts` into `RotatingValidatorStorage` struct (which cost 1 slot) each to save gas\\n    // max cap of RON is 1 billion, so using 96 bits (can present up to ~80 billion) for storing stake amounts are enough\\n    uint96[] memory narrowingCastingStakeAmounts = rotatingStakeAmounts.unsafeToUint96s();\\n    uint256 length = rotatingValidators.length;\\n    RotatingValidatorStorage memory rv;\\n\\n    for (uint256 i; i < length; ++i) {\\n      rv._cid = rotatingValidators[i];\\n      rv._staked = narrowingCastingStakeAmounts[i];\\n      $sortedValidatorStorage._rotatingValidators.push(rv);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the saved validator set for a given period.\\n   */\\n  function getSavedValidatorSet(uint256 period) internal pure returns (ValidatorStorage memory savedValidatorSet) {\\n    savedValidatorSet = getValidatorPerPeriodLocation(period);\\n  }\\n\\n  /**\\n   * @dev Returns the set of validators for a given period and epoch.\\n   */\\n  function pickValidatorSet(\\n    uint256 period,\\n    uint256 epoch,\\n    uint256 beacon\\n  ) internal view returns (address[] memory pickedValidatorIds) {\\n    ValidatorStorage storage $ = getValidatorPerPeriodLocation(period);\\n    UnsortedValidatorStorage storage $unsortedValidatorStorage = $._unsorted;\\n\\n    if ($._pickAll) return $unsortedValidatorStorage._cids;\\n    SortedValidatorStorage storage $sortedValidatorStorage = $._sorted;\\n\\n    // Non Rotating Validators are GVs + SVs\\n    address[] memory nonRotatingValidators = $sortedValidatorStorage._nonRotatingValidators;\\n\\n    uint256 nRV = $sortedValidatorStorage._nRV;\\n    // Skip if num rotating validator required is 0\\n    if (nRV == 0) return nonRotatingValidators;\\n\\n    RotatingValidatorStorage[] memory packedRVs = $sortedValidatorStorage._rotatingValidators;\\n    address[] memory pickedRotatingValidators = pickTopKRotatingValidatorsByBeaconWeight(packedRVs, nRV, beacon, epoch);\\n\\n    pickedValidatorIds = nonRotatingValidators.concat(pickedRotatingValidators);\\n  }\\n\\n  /**\\n   * @dev Picks the top `k` rotating validators based on their corresponding beacon weight, epoch number and staked amount.\\n   */\\n  function pickTopKRotatingValidatorsByBeaconWeights(\\n    address[] memory cids,\\n    uint256[] memory stakedAmounts,\\n    uint256 k,\\n    uint256 beacon,\\n    uint256 epoch\\n  ) internal pure returns (address[] memory pickedCids) {\\n    uint256 length = cids.length;\\n    if (length != stakedAmounts.length) revert LibArray.ErrLengthMismatch();\\n\\n    RotatingValidatorStorage[] memory packedRVs = new RotatingValidatorStorage[](length);\\n\\n    for (uint256 i; i < length; ++i) {\\n      packedRVs[i]._cid = cids[i];\\n      packedRVs[i]._staked = uint96(stakedAmounts[i]);\\n    }\\n\\n    pickedCids = pickTopKRotatingValidatorsByBeaconWeight(packedRVs, k, beacon, epoch);\\n  }\\n\\n  /**\\n   * @dev Picks the top `k` rotating validators based on their corresponding beacon weight, epoch number and staked amount.\\n   */\\n  function pickTopKRotatingValidatorsByBeaconWeight(\\n    RotatingValidatorStorage[] memory packedRVs,\\n    uint256 k,\\n    uint256 beacon,\\n    uint256 epoch\\n  ) internal pure returns (address[] memory rotatingValidators) {\\n    uint256 length = packedRVs.length;\\n    rotatingValidators = new address[](length);\\n    uint256[] memory weights = new uint256[](length);\\n\\n    address id;\\n    uint256 weight;\\n    uint256 staked;\\n    uint256 ptr;\\n\\n    assembly (\\\"memory-safe\\\") {\\n      // load the free memory pointer\\n      ptr := mload(0x40)\\n      // pre store the beacon value since it is used in the loop\\n      mstore(ptr, beacon)\\n      // pre store the epoch value since it is used in the loop\\n      mstore(add(ptr, 0x20), epoch)\\n      // update the free memory pointer\\n      //    ptr + 0x00 = beacon\\n      //    ptr + 0x20 = epoch\\n      //    ptr + 0x40 = id\\n      // => ptr + 0x60 = new_free_memory_pointer\\n      mstore(0x40, add(ptr, 0x60))\\n    }\\n\\n    for (uint256 i; i < length; ++i) {\\n      id = packedRVs[i]._cid;\\n      rotatingValidators[i] = id;\\n      staked = packedRVs[i]._staked;\\n\\n      assembly (\\\"memory-safe\\\") {\\n        mstore(add(ptr, 0x40), id)\\n\\n        // hash the beacon, epoch, and id\\n        let h := keccak256(ptr, 0x60)\\n        // split the hash into two 128-bit numbers\\n        // mask the lower 128 bits\\n        let h1 := and(h, 0xffffffffffffffffffffffffffffffff)\\n        // shift the hash to the right by 128 bits\\n        let h2 := shr(128, h)\\n        // divide the staked amount by 10**18\\n        let s := div(staked, 0xde0b6b3a7640000)\\n\\n        weight := mul(mul(s, s), xor(h1, h2))\\n      }\\n\\n      weights[i] = weight;\\n    }\\n\\n    rotatingValidators = rotatingValidators.pickTopKByValues(weights, k);\\n  }\\n\\n  /**\\n   * @dev Internal function to get the storage location of the validator set for a given slot.\\n   * @return $ The storage mapping for the validator set.\\n   */\\n  function getStorageAt(bytes32 slot) internal pure returns (ValidatorStorage storage $) {\\n    assembly (\\\"memory-safe\\\") {\\n      $.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to get the storage location of the sorted validator mapping.\\n   * @return $ The storage mapping for the sorted validator.\\n   */\\n  function getValidatorPerPeriodLocation(uint256 period) internal pure returns (ValidatorStorage storage $) {\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(0x00, period)\\n      mstore(0x20, $$_SortedValidatorByBeaconStorageLocation)\\n      $.slot := keccak256(0x00, 0x40)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1e85dbe71a46ab561528ed4c5bad929d5ca658aec40d16b9ccc8d07aae871b7f\",\"license\":\"MIT\"},\"contracts/ronin/random-beacon/RoninRandomBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { VRF } from \\\"@chainlink/contracts/src/v0.8/VRF.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { HasContracts } from \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { GlobalConfigConsumer } from \\\"../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport { IProfile } from \\\"../../interfaces/IProfile.sol\\\";\\nimport { IStaking } from \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport { IRandomBeacon } from \\\"../../interfaces/random-beacon/IRandomBeacon.sol\\\";\\nimport { ICandidateManager } from \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport { ITimingInfo } from \\\"../../interfaces/validator/info-fragments/ITimingInfo.sol\\\";\\nimport { IRoninTrustedOrganization } from \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport { ISlashRandomBeacon } from \\\"../../interfaces/slash-indicator/ISlashRandomBeacon.sol\\\";\\nimport { LibSLA, RandomRequest } from \\\"../../libraries/LibSLA.sol\\\";\\nimport { LibSortValidatorsByBeacon } from \\\"../../libraries/LibSortValidatorsByBeacon.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\nimport { ErrLengthMismatch, ErrUnauthorizedCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract RoninRandomBeacon is Initializable, VRF, HasContracts, GlobalConfigConsumer, IRandomBeacon {\\n  using LibSLA for uint256[2];\\n\\n  /// @dev Storage gap for future upgrades.\\n  uint256[50] private __gap;\\n\\n  /// @dev The threshold of cooldown period for key hash change and newly register candidates.\\n  uint256 internal constant _COOLDOWN_PERIOD_THRESHOLD = 1;\\n  /// @dev The block number where the logic contract is deployed.\\n  uint256 private immutable _LOGIC_DEPLOYED_AT_BLOCK;\\n\\n  /// @dev Period of the beacon validator selection is activated.\\n  uint256 internal _activatedAtPeriod;\\n  /// @dev Latest period where random beacon is finalized.\\n  uint256 internal _lastFinalizedPeriod;\\n  /// @dev The threshold of unavailability to slash.\\n  uint256 internal _unavailabilitySlashThreshold;\\n  /// @dev Mapping of consecutive unavailable count per validator.\\n  mapping(address gvCid => uint256 count) internal _unavailableCount;\\n  /// @dev Mapping of beacon per period.\\n  mapping(uint256 period => Beacon beacon) internal _beaconPerPeriod;\\n  /// @dev The maximum pick threshold for validator type.\\n  mapping(ValidatorType validatorType => uint256 threshold) internal _validatorThreshold;\\n\\n  modifier onlyActivated(uint256 period) {\\n    if (period < _activatedAtPeriod) return;\\n    _;\\n  }\\n\\n  constructor() {\\n    _disableInitializers();\\n    _LOGIC_DEPLOYED_AT_BLOCK = block.number;\\n  }\\n\\n  function initialize(\\n    address profile,\\n    address staking,\\n    address trustedOrg,\\n    address validatorSet,\\n    uint256 slashThreshold,\\n    uint256 activatedAtPeriod,\\n    ValidatorType[] calldata validatorTypes,\\n    uint256[] calldata thresholds\\n  ) external initializer {\\n    bytes32 initialSeed =\\n      keccak256(abi.encode(blockhash(_LOGIC_DEPLOYED_AT_BLOCK), block.coinbase, block.timestamp, block.chainid));\\n\\n    _activatedAtPeriod = activatedAtPeriod;\\n    _setUnavailabilitySlashThreshold(slashThreshold);\\n    _bulkSetValidatorThresholds(validatorTypes, thresholds);\\n    _requestRandomSeed(activatedAtPeriod, uint256(initialSeed));\\n\\n    _setContract(ContractType.PROFILE, profile);\\n    _setContract(ContractType.STAKING, staking);\\n    _setContract(ContractType.VALIDATOR, validatorSet);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, trustedOrg);\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function bulkSetValidatorThresholds(\\n    ValidatorType[] calldata validatorTypes,\\n    uint256[] calldata thresholds\\n  ) external onlyAdmin {\\n    _bulkSetValidatorThresholds(validatorTypes, thresholds);\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function setUnavailabilitySlashThreshold(uint256 threshold) external onlyAdmin {\\n    _setUnavailabilitySlashThreshold(threshold);\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function fulfillRandomSeed(RandomRequest calldata req, Proof calldata proof) external {\\n    unchecked {\\n      bytes32 reqHash = req.hash();\\n      bytes32 keyHash = proof.pk.calcKeyHash();\\n\\n      IProfile profile = IProfile(getContract(ContractType.PROFILE));\\n\\n      // Already checked in Profile:\\n      // 1. If `cid` not exit, revert the whole tx,\\n      // 2. Allow both GV and SV to submit the seed.\\n      (address cid, uint256 keyLastChange, uint256 profileRegisteredAt) =\\n        profile.getVRFKeyHash2BeaconInfo({ vrfKeyHash: keyHash });\\n      uint256 currPeriod = ITimingInfo(getContract(ContractType.VALIDATOR)).currentPeriod();\\n\\n      Beacon storage $beacon = _beaconPerPeriod[req.period];\\n\\n      _requireValidRequest(req, $beacon, currPeriod, reqHash);\\n      _requireAuthorized(cid, profileRegisteredAt, currPeriod);\\n      _requireValidProof(req, proof, currPeriod, keyHash, keyLastChange);\\n\\n      // randomness should not be re-submitted\\n      if ($beacon.submitted[cid]) revert ErrAlreadySubmitted();\\n\\n      $beacon.submissionCount++;\\n      $beacon.submitted[cid] = true;\\n      $beacon.value ^= VRF.randomValueFromVRFProof(proof, proof.seed);\\n\\n      emit RandomSeedFulfilled(msg.sender, req.period, reqHash);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function execRequestRandomSeedForNextPeriod(\\n    uint256 lastUpdatedPeriod,\\n    uint256 newPeriod\\n  ) external onlyContract(ContractType.VALIDATOR) onlyActivated(newPeriod) {\\n    unchecked {\\n      bool isPeriodEnding = lastUpdatedPeriod < newPeriod;\\n      if (isPeriodEnding) return;\\n\\n      // Request the next random seed if it has not been requested at the start epoch of the period\\n      uint256 nextPeriod = lastUpdatedPeriod + 1;\\n      if (_beaconPerPeriod[nextPeriod].reqHash == 0) {\\n        _requestRandomSeed(nextPeriod, _beaconPerPeriod[lastUpdatedPeriod].value);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function execFinalizeBeaconAndPendingCids(\\n    uint256 lastUpdatedPeriod,\\n    uint256 newPeriod,\\n    address[] calldata allCids\\n  ) external onlyContract(ContractType.VALIDATOR) onlyActivated(newPeriod) {\\n    Beacon storage $beacon = _beaconPerPeriod[newPeriod];\\n\\n    address[] memory cids = _filterOutNewlyJoinedValidators({ currPeriod: lastUpdatedPeriod, allCids: allCids });\\n    uint256[] memory trustedWeights =\\n      IRoninTrustedOrganization(getContract(ContractType.RONIN_TRUSTED_ORGANIZATION)).getConsensusWeightsById(cids);\\n\\n    _finalizeBeacon($beacon, newPeriod);\\n\\n    LibSortValidatorsByBeacon.filterAndSaveValidators({\\n      period: newPeriod,\\n      nGV: _validatorThreshold[ValidatorType.Governing],\\n      nSV: _validatorThreshold[ValidatorType.Standard],\\n      nRV: _validatorThreshold[ValidatorType.Rotating],\\n      cids: cids,\\n      trustedWeights: trustedWeights,\\n      stakedAmounts: IStaking(getContract(ContractType.STAKING)).getManyStakingTotalsById(cids)\\n    });\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function execRecordAndSlashUnavailability(\\n    uint256 lastUpdatedPeriod,\\n    uint256 newPeriod,\\n    address slashIndicator,\\n    address[] calldata allCids\\n  ) external onlyContract(ContractType.VALIDATOR) onlyActivated(lastUpdatedPeriod) {\\n    Beacon storage $beacon = _beaconPerPeriod[newPeriod];\\n\\n    address[] memory cids = _filterOutNewlyJoinedValidators({ currPeriod: lastUpdatedPeriod, allCids: allCids });\\n    uint256[] memory trustedWeights =\\n      IRoninTrustedOrganization(getContract(ContractType.RONIN_TRUSTED_ORGANIZATION)).getConsensusWeightsById(cids);\\n\\n    _recordAndSlashUnavailability($beacon, lastUpdatedPeriod, slashIndicator, cids, trustedWeights);\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function pickValidatorSetForCurrentPeriod(uint256 epoch) external view returns (address[] memory pickedCids) {\\n    pickedCids = getSelectedValidatorSet({ period: _computePeriod(block.timestamp), epoch: epoch });\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getSelectedValidatorSet(uint256 period, uint256 epoch) public view returns (address[] memory pickedCids) {\\n    Beacon storage $beacon = _beaconPerPeriod[period];\\n    if (!$beacon.finalized) revert ErrNotFinalizedBeacon(period);\\n\\n    pickedCids = LibSortValidatorsByBeacon.pickValidatorSet(period, epoch, $beacon.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getSavedValidatorSet(uint256 period)\\n    external\\n    view\\n    returns (LibSortValidatorsByBeacon.ValidatorStorage memory)\\n  {\\n    Beacon storage $beacon = _beaconPerPeriod[period];\\n    if (!$beacon.finalized) revert ErrNotFinalizedBeacon(period);\\n\\n    return LibSortValidatorsByBeacon.getSavedValidatorSet({ period: period });\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getActivatedAtPeriod() external view returns (uint256) {\\n    return _activatedAtPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getLastFinalizedPeriod() external view returns (uint256) {\\n    return _lastFinalizedPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getRequestHash(uint256 period) external view returns (bytes32 reqHash) {\\n    reqHash = _beaconPerPeriod[period].reqHash;\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function isSubmittedAt(uint256 period, TConsensus consensus) external view returns (bool submitted) {\\n    submitted = isSubmittedAtById({ period: period, cid: _convertToCid(consensus) });\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function isSubmittedAtByKeyHash(uint256 period, bytes32 keyHash) external view returns (bool submitted) {\\n    IProfile profile = IProfile(getContract(ContractType.PROFILE));\\n    address cid = profile.getVRFKeyHash2Id({ vrfKeyHash: keyHash });\\n    submitted = isSubmittedAtById(period, cid);\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function isSubmittedAtById(uint256 period, address cid) public view returns (bool submitted) {\\n    submitted = _beaconPerPeriod[period].submitted[cid];\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getBeaconData(uint256 period) external view returns (uint256 value, bool finalized, uint256 submissionCount) {\\n    Beacon storage $beacon = _beaconPerPeriod[period];\\n    value = $beacon.value;\\n    finalized = $beacon.finalized;\\n    submissionCount = $beacon.submissionCount;\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function COOLDOWN_PERIOD_THRESHOLD() public pure virtual returns (uint256 threshold) {\\n    threshold = _COOLDOWN_PERIOD_THRESHOLD;\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getUnavailabilityCount(TConsensus consensus) external view returns (uint256 count) {\\n    count = getUnavailabilityCountById({ cid: _convertToCid(consensus) });\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getUnavailabilityCountById(address cid) public view returns (uint256 count) {\\n    count = _unavailableCount[cid];\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getValidatorThreshold(ValidatorType validatorType) external view returns (uint256 threshold) {\\n    threshold = _validatorThreshold[validatorType];\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function getUnavailabilitySlashThreshold() external view returns (uint256 threshold) {\\n    threshold = _unavailabilitySlashThreshold;\\n  }\\n\\n  /**\\n   * @inheritdoc IRandomBeacon\\n   */\\n  function calcKeyHash(uint256[2] memory publicKeys) external pure returns (bytes32 keyHash) {\\n    keyHash = LibSLA.calcKeyHash(publicKeys);\\n  }\\n\\n  /**\\n   * @dev Requests a random seed for a given period and previous beacon.\\n   * @param period The period for which the random seed is requested.\\n   * @param prevBeacon The previous beacon value.\\n   */\\n  function _requestRandomSeed(uint256 period, uint256 prevBeacon) internal {\\n    RandomRequest memory req = RandomRequest({\\n      period: period,\\n      prevBeacon: prevBeacon,\\n      chainId: block.chainid,\\n      verifyingContract: address(this)\\n    });\\n    bytes32 reqHash = req.hash();\\n\\n    _beaconPerPeriod[req.period].reqHash = reqHash;\\n\\n    emit RandomSeedRequested(period, reqHash, req);\\n  }\\n\\n  /**\\n   * @dev Finalizes the beacon by marking it as finalized and emitting an event.\\n   * @param $beacon The beacon to be finalized.\\n   * @param period The period of the beacon.\\n   */\\n  function _finalizeBeacon(Beacon storage $beacon, uint256 period) internal {\\n    $beacon.finalized = true;\\n    _lastFinalizedPeriod = period;\\n\\n    emit BeaconFinalized(period, $beacon.value);\\n  }\\n\\n  /**\\n   * @dev Sets the unavailability slash threshold.\\n   */\\n  function _setUnavailabilitySlashThreshold(uint256 threshold) internal {\\n    _unavailabilitySlashThreshold = threshold;\\n\\n    emit SlashUnavailabilityThresholdUpdated(threshold);\\n  }\\n\\n  /**\\n   * @dev Records and slashes the unavailability of the beacon.\\n   * @param $beacon The storage reference to the Beacon struct.\\n   * @param lastUpdatedPeriod The last updated period in the validator contract.\\n   */\\n  function _recordAndSlashUnavailability(\\n    Beacon storage $beacon,\\n    uint256 lastUpdatedPeriod,\\n    address slashIndicator,\\n    address[] memory cids,\\n    uint256[] memory trustedWeights\\n  ) internal onlyActivated(lastUpdatedPeriod) {\\n    unchecked {\\n      address cid;\\n      uint256 unavailableCount;\\n      uint256 length = cids.length;\\n      uint256 slashThreshold = _unavailabilitySlashThreshold;\\n\\n      // Iterate through trusted organizations\\n      for (uint256 i; i < length; ++i) {\\n        if (trustedWeights[i] != 0) {\\n          cid = cids[i];\\n          unavailableCount = _unavailableCount[cid];\\n\\n          // If the validator submits the vrf proof, clear current slash counter.\\n          if ($beacon.submitted[cid]) {\\n            if (unavailableCount != 0) {\\n              delete _unavailableCount[cid];\\n            }\\n            continue;\\n          }\\n\\n          // If missing proof, increment the consecutive unavailable count and check if it exceeds the threshold\\n          _unavailableCount[cid] = ++unavailableCount;\\n          if (unavailableCount >= slashThreshold) {\\n            ISlashRandomBeacon(slashIndicator).slashRandomBeacon(cid, lastUpdatedPeriod);\\n            // Delete the count if the validator has been slashed\\n            delete _unavailableCount[cid];\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the thresholds for multiple validator types.\\n   * @notice Emits a `ValidatorThresholdUpdated` event .\\n   */\\n  function _bulkSetValidatorThresholds(ValidatorType[] calldata validatorTypes, uint256[] calldata thresholds) internal {\\n    uint256 length = validatorTypes.length;\\n    if (length != thresholds.length) revert ErrLengthMismatch(msg.sig);\\n\\n    uint256 threshold;\\n    ValidatorType validatorType;\\n\\n    for (uint256 i; i < length; ++i) {\\n      validatorType = validatorTypes[i];\\n      threshold = thresholds[i];\\n\\n      _validatorThreshold[validatorType] = threshold;\\n\\n      emit ValidatorThresholdUpdated(validatorType, threshold);\\n    }\\n\\n    if (\\n      _validatorThreshold[ValidatorType.Governing] + _validatorThreshold[ValidatorType.Standard]\\n        + _validatorThreshold[ValidatorType.Rotating] != _validatorThreshold[ValidatorType.All]\\n    ) {\\n      revert ErrInvalidThresholdConfig();\\n    }\\n  }\\n\\n  /**\\n   * @dev Filters out the newly joined validators based on the provided threshold.\\n   */\\n  function _filterOutNewlyJoinedValidators(\\n    uint256 currPeriod,\\n    address[] calldata allCids\\n  ) internal view returns (address[] memory validCids) {\\n    unchecked {\\n      uint256 count;\\n      uint256 threshold = COOLDOWN_PERIOD_THRESHOLD();\\n      uint256[] memory registeredAts = IProfile(getContract(ContractType.PROFILE)).getManyId2RegisteredAt(allCids);\\n      uint256 length = allCids.length;\\n      validCids = new address[](length);\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (_computePeriod(registeredAts[i]) + threshold <= currPeriod) {\\n          validCids[count++] = allCids[i];\\n        }\\n      }\\n\\n      assembly {\\n        mstore(validCids, count)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Requirements for valid proof:\\n   *\\n   * - Key hash should not be changed within the cooldown period.\\n   * - Proof should be valid.\\n   */\\n  function _requireValidProof(\\n    RandomRequest calldata req,\\n    Proof calldata proof,\\n    uint256 currPeriod,\\n    bytes32 keyHash,\\n    uint256 keyLastChange\\n  ) internal pure {\\n    // key hash should not be changed within the cooldown period\\n    if (_computePeriod(keyLastChange) + COOLDOWN_PERIOD_THRESHOLD() > currPeriod) {\\n      revert ErrNotEndedChangeKeyHashCooldown();\\n    }\\n\\n    // proof should be valid\\n    if (req.calcProofSeed(keyHash) != proof.seed) revert ErrInvalidProof();\\n  }\\n\\n  /**\\n   * @dev Requirements for authorized fulfill random seed:\\n   *\\n   * - Sender is governing validator.\\n   * - Sender's profile is not newly registered.\\n   */\\n  function _requireAuthorized(address cid, uint256 profileRegisteredAt, uint256 currPeriod) internal view {\\n    address trustedOrg = getContract(ContractType.RONIN_TRUSTED_ORGANIZATION);\\n\\n    // only allow to fulfill if the sender is a governing validator\\n    if (IRoninTrustedOrganization(trustedOrg).getConsensusWeightById(cid) == 0) {\\n      revert ErrUnauthorizedCall(msg.sig);\\n    }\\n\\n    // only allow to fulfill if the candidate is not newly registered\\n    if (_computePeriod(profileRegisteredAt) + COOLDOWN_PERIOD_THRESHOLD() > currPeriod) {\\n      revert ErrNotEndedRegisterCooldown();\\n    }\\n  }\\n\\n  /**\\n   * @dev Requirements for valid random request:\\n   *\\n   * - Beacon must not be finalized.\\n   * - Period in Request must be greater than current period.\\n   * - Period in Request must be greater than the `_activatedAtPeriod`.\\n   * - Submitted Request hash must match the hash in storage.\\n   */\\n  function _requireValidRequest(\\n    RandomRequest calldata req,\\n    Beacon storage $beacon,\\n    uint256 currPeriod,\\n    bytes32 reqHash\\n  ) internal view {\\n    // Verify the request with current chain context\\n    if (req.chainId != block.chainid) revert ErrInvalidChainId({ expected: block.chainid, actual: req.chainId });\\n    if (req.verifyingContract != address(this)) {\\n      revert ErrInvalidVerifyingContract({ expected: address(this), actual: req.verifyingContract });\\n    }\\n\\n    // period should be valid\\n    if (req.period <= currPeriod) revert ErrInvalidPeriod();\\n    if (req.period < _activatedAtPeriod) revert ErrNotActivated(req.period);\\n\\n    // beacon should not be finalized\\n    if ($beacon.finalized) revert ErrAlreadyFinalizedBeacon(req.period);\\n\\n    bytes32 expectedReqHash = $beacon.reqHash;\\n    // request hash should be valid\\n    if (expectedReqHash != reqHash) revert ErrInvalidRandomRequest(expectedReqHash, reqHash);\\n  }\\n\\n  /**\\n   * @dev Converts the consensus address to cid from `Profile` contract.\\n   */\\n  function _convertToCid(TConsensus consensus) internal view returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id({ consensus: consensus });\\n  }\\n\\n  /**\\n   * @dev See {TimingStorage-_computePeriod}.\\n   *\\n   * This duplicates the implementation in {RoninValidatorSet-_computePeriod} to reduce external calls.\\n   */\\n  function _computePeriod(uint256 timestamp) internal pure returns (uint256) {\\n    return timestamp / PERIOD_DURATION;\\n  }\\n}\\n\",\"keccak256\":\"0x2c2f819b46fab3cec759c5e1b96096362cda3f63dfd65e7293d08d8c08eb92c5\",\"license\":\"MIT\"},\"contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./RoninRandomBeacon.sol\\\";\\n\\ncontract RoninRandomBeacon_Mainnet is RoninRandomBeacon {\\n  /**\\n   * @dev Left empty on purpose of matching the contract version with the one in the testnet.\\n   */\\n  function initializeV2() external reinitializer(2) { }\\n\\n  /**\\n   * @dev Left empty on purpose of matching the contract version with the one in the testnet.\\n   */\\n  function initializeV3() external reinitializer(3) { }\\n}\\n\",\"keccak256\":\"0x2d373d7105676631d73e3299f7d0ad5598a9a9109714f33188f579cb4bd9e57e\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\n\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x48a81c14acbe613ff334674f913cf287eb14d52134abba5a7e44ebaba3b3adfc\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */\\n  UNKNOWN,\\n  /*  1 */\\n  PAUSE_ENFORCER,\\n  /*  2 */\\n  BRIDGE,\\n  /*  3 */\\n  BRIDGE_TRACKING,\\n  /*  4 */\\n  GOVERNANCE_ADMIN,\\n  /*  5 */\\n  MAINTENANCE,\\n  /*  6 */\\n  SLASH_INDICATOR,\\n  /*  7 */\\n  STAKING_VESTING,\\n  /*  8 */\\n  VALIDATOR,\\n  /*  9 */\\n  STAKING,\\n  /* 10 */\\n  RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */\\n  BRIDGE_MANAGER,\\n  /* 12 */\\n  BRIDGE_SLASH,\\n  /* 13 */\\n  BRIDGE_REWARD,\\n  /* 14 */\\n  FAST_FINALITY_TRACKING,\\n  /* 15 */\\n  PROFILE,\\n  /* 16 */\\n  RANDOM_BEACON\\n}\\n\",\"keccak256\":\"0x2ef1b8fcaa991f1d856ca67d19e8ac1576319c03c874cedcc6a7da1860d65a78\",\"license\":\"MIT\"},\"contracts/utils/Filters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IndexMap, LibIndexMap } from \\\"../libraries/LibIndexMap.sol\\\";\\n\\n/**\\n * @dev Checks if the given `index` is not present in the `indexMap`.\\n * @param index The index to check.\\n * @param indexMap The index map to search in.\\n * @return A boolean value indicating whether the `index` is not present in the `indexMap`.\\n */\\nfunction notInIndexMapFilter(uint256 index, uint256[] memory indexMap) pure returns (bool) {\\n  return !IndexMap(indexMap).contains(index);\\n}\\n\\n/**\\n * @dev Checks if a weight at a given index is non-zero.\\n * @param index The index of the weight to check.\\n * @param trustedWeights The array of weights to check against.\\n * @return A boolean indicating whether the weight at the given index is non-zero.\\n */\\nfunction nonZeroTrustedWeightFilter(uint256 index, uint256[] memory trustedWeights) pure returns (bool) {\\n  return trustedWeights[index] != 0;\\n}\\n\",\"keccak256\":\"0x790a3fd96b9795be6794e00d1828e2d14c532baa5452bee32aeceedec8328d83\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibArray } from \\\"../libraries/LibArray.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport {\\n  ErrAddressIsNotCreatedEOA,\\n  ErrZeroAddress,\\n  ErrOnlySelfCall,\\n  ErrZeroCodeContract,\\n  ErrUnsupportedInterface\\n} from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using LibArray for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert LibArray.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x7d525f577b73f76a4327fe3cb6ad410b2fa8ae7c5702b2128bb899cae3ee52b5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */\\n  UNKNOWN,\\n  /* 1 */\\n  ADMIN,\\n  /* 2 */\\n  COINBASE,\\n  /* 3 */\\n  GOVERNOR,\\n  /* 4 */\\n  CANDIDATE_ADMIN,\\n  /* 5 */\\n  WITHDRAWAL_MIGRATOR,\\n  /* 6 */\\n  __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */\\n  BLOCK_PRODUCER,\\n  /* 8 */\\n  VALIDATOR_CANDIDATE,\\n  /* 9 */\\n  CONSENSUS,\\n  /* 10 */\\n  TREASURY\\n}\\n\",\"keccak256\":\"0xb4be3fbf480504f85653a3f598dd90b32b1afd1c93de472cfbcc0a0741c1aece\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"dependencies/@openzeppelin-contracts-4.7.3/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"lib/chainlink/contracts/src/v0.8/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\\n\\n  * @dev Bibliographic references:\\n\\n  * @dev Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draft\\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\\n\\n  * @dev Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", Cryptology\\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\\n  * ****************************************************************************\\n  * @dev USAGE\\n\\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\\n  * ****************************************************************************\\n  * @dev PURPOSE\\n\\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\\n  * @dev Reggie, he gives back a value which is computed completely\\n  * @dev deterministically from the seed and the secret key.\\n\\n  * @dev Reggie provides a proof by which Vera can verify that the output was\\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\\n  * @dev the output is computationally indistinguishable to her from a uniform\\n  * @dev random sample from the output space.\\n\\n  * @dev The purpose of this contract is to perform that verification.\\n  * ****************************************************************************\\n  * @dev DESIGN NOTES\\n\\n  * @dev The VRF algorithm verified here satisfies the full uniqueness, full\\n  * @dev collision resistance, and full pseudo-randomness security properties.\\n  * @dev See \\\"SECURITY PROPERTIES\\\" below, and\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\\n\\n  * @dev An elliptic curve point is generally represented in the solidity code\\n  * @dev as a uint256[2], corresponding to its affine coordinates in\\n  * @dev GF(FIELD_SIZE).\\n\\n  * @dev For the sake of efficiency, this implementation deviates from the spec\\n  * @dev in some minor ways:\\n\\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\\n\\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\\n\\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\\n  * @dev   nonce updated until a valid x-ordinate is found.\\n\\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\\n  * @dev   in the hash message, as recommended in step 5.B of the draft\\n  * @dev   standard. They are unnecessary here because no variation in the\\n  * @dev   cipher suite is allowed.\\n\\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\\n  * @dev   points, not the compressed points as recommended in step 3.\\n\\n  * @dev - In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.\\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\\n  * @dev   generator point, see steps 5 and 7 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\\n  * @dev   keccak hash of the original u. This is because we only verify the\\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\\n  * ****************************************************************************\\n  * @dev   SECURITY PROPERTIES\\n\\n  * @dev Here are the security properties for this VRF:\\n\\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\\n  * @dev   the sense that the proof will pass verifyVRFProof.\\n\\n  * @dev Full collision resistance: It's cryptographically infeasible to find\\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\\n\\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\\n  * @dev   derived from a given seed, the outputs are computationally\\n  * @dev   indistinguishable from randomness.\\n\\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\\n  * @dev for these properties.\\n\\n  * @dev For secp256k1, the key validation described in section\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\\n  * @dev representation of the public key used here (affine x- and y-ordinates\\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\\n  * @dev the point at infinity.\\n  * ****************************************************************************\\n  * @dev OTHER SECURITY CONSIDERATIONS\\n  *\\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\\n  * @dev However, under the Random Oracle Model the probability of choosing a\\n  * @dev point which forces n extra rounds in hashToCurve is 2\\u207b\\u207f. The base cost\\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\\n  * @dev try, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for any\\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\\n\\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\\n  * @dev this means it is infeasible for an adversary to prevent correct\\n  * @dev operation of this contract by choosing an adverse seed.\\n\\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\\n  * @dev hashToCurve.)\\n\\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\\n  * @dev See notes in hashToCurve docstring.\\n*/\\ncontract VRF {\\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\\n  // Number of points in Secp256k1\\n  uint256 private constant GROUP_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // Prime characteristic of the galois field over which Secp256k1 is defined\\n  uint256 private constant FIELD_SIZE =\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n  uint256 private constant WORD_LENGTH_BYTES = 0x20;\\n\\n  // (base^exponent) % FIELD_SIZE\\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\\n  function bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\\n    uint256 callResult;\\n    uint256[6] memory bigModExpContractInputs;\\n    bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\\n    bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\\n    bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\\n    bigModExpContractInputs[3] = base;\\n    bigModExpContractInputs[4] = exponent;\\n    bigModExpContractInputs[5] = FIELD_SIZE;\\n    uint256[1] memory output;\\n    assembly {\\n      // solhint-disable-line no-inline-assembly\\n      callResult := staticcall(\\n        not(0), // Gas cost: no limit\\n        0x05, // Bigmodexp contract address\\n        bigModExpContractInputs,\\n        0xc0, // Length of input segment: 6*0x20-bytes\\n        output,\\n        0x20 // Length of output segment\\n      )\\n    }\\n    if (callResult == 0) {\\n      revert(\\\"bigModExp failure!\\\");\\n    }\\n    return output[0];\\n  }\\n\\n  // Let q=FIELD_SIZE. q % 4 = 3, \\u2234 x\\u2261r^2 mod q \\u21d2 x^SQRT_POWER\\u2261\\u00b1r mod q.  See\\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\\n  uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\\n\\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\\n  function squareRoot(uint256 x) internal view returns (uint256) {\\n    return bigModExp(x, SQRT_POWER);\\n  }\\n\\n  // The value of y^2 given that (x,y) is on secp256k1.\\n  function ySquared(uint256 x) internal pure returns (uint256) {\\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\\n    return addmod(xCubed, 7, FIELD_SIZE);\\n  }\\n\\n  // True iff p is on secp256k1\\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\\n    // Section 2.3.6. in https://www.secg.org/sec1-v2.pdf\\n    // requires each ordinate to be in [0, ..., FIELD_SIZE-1]\\n    require(p[0] < FIELD_SIZE, \\\"invalid x-ordinate\\\");\\n    require(p[1] < FIELD_SIZE, \\\"invalid y-ordinate\\\");\\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\\n  }\\n\\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\\n    x_ = uint256(keccak256(b));\\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\\n    // string_to_point in the IETF draft\\n    while (x_ >= FIELD_SIZE) {\\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\\n    }\\n  }\\n\\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\\n  // is always even, due to\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  // step 5.C, which references arbitrary_string_to_point, defined in\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\\n  // returning the point with given x ordinate, and even y ordinate.\\n  function newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\\n    unchecked {\\n      p[0] = fieldHash(b);\\n      p[1] = squareRoot(ySquared(p[0]));\\n      if (p[1] % 2 == 1) {\\n        // Note that 0 <= p[1] < FIELD_SIZE\\n        // so this cannot wrap, we use unchecked to save gas.\\n        p[1] = FIELD_SIZE - p[1];\\n      }\\n    }\\n  }\\n\\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\\n  // vrf.go/hashToCurveHashPrefix\\n  uint256 internal constant HASH_TO_CURVE_HASH_PREFIX = 1;\\n\\n  // Cryptographic hash function onto the curve.\\n  //\\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\\n  // DESIGN NOTES above for slight differences.)\\n  //\\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\\n  // \\\"Construction of Rational Points on Elliptic Curves over Finite Fields\\\"\\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\\n  // and suggested by\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\\n  //\\n  // This would greatly simplify the analysis in \\\"OTHER SECURITY CONSIDERATIONS\\\"\\n  // https://www.pivotaltracker.com/story/show/171120900\\n  function hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\\n    rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\\n    while (!isOnCurve(rv)) {\\n      rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\\n    }\\n  }\\n\\n  /** *********************************************************************\\n   * @notice Check that product==scalar*multiplicand\\n   *\\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\\n   *\\n   * @param multiplicand: secp256k1 point\\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\\n   * @param product: secp256k1 expected to be multiplier * multiplicand\\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\\n   */\\n  function ecmulVerify(\\n    uint256[2] memory multiplicand,\\n    uint256 scalar,\\n    uint256[2] memory product\\n  ) internal pure returns (bool verifies) {\\n    require(scalar != 0, \\\"zero scalar\\\"); // Rules out an ecrecover failure case\\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\\n    // (x\\u207b\\u00b9 mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\\n    // Explicit conversion to address takes bottom 160 bits\\n    address expected = address(uint160(uint256(keccak256(abi.encodePacked(product)))));\\n    return (actual == expected);\\n  }\\n\\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveSub(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    unchecked {\\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\\n      // Note this cannot wrap since x2 is a point in [0, FIELD_SIZE-1]\\n      // we use unchecked to save gas.\\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n  }\\n\\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveMul(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n  }\\n\\n  /** **************************************************************************\\n        @notice Computes elliptic-curve sum, in projective co-ordinates\\n\\n        @dev Using projective coordinates avoids costly divisions\\n\\n        @dev To use this with p and q in affine coordinates, call\\n        @dev projectiveECAdd(px, py, qx, qy). This will return\\n        @dev the addition of (px, py, 1) and (qx, qy, 1), in the\\n        @dev secp256k1 group.\\n\\n        @dev This can be used to calculate the z which is the inverse to zInv\\n        @dev in isValidVRFOutput. But consider using a faster\\n        @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\\n\\n        @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\\n             coordinates of secp256k1 points. That is safe in this contract,\\n             because this method is only used by linearCombination, which checks\\n             points are on the curve via ecrecover.\\n        **************************************************************************\\n        @param px The first affine coordinate of the first summand\\n        @param py The second affine coordinate of the first summand\\n        @param qx The first affine coordinate of the second summand\\n        @param qy The second affine coordinate of the second summand\\n\\n        (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\\n        **************************************************************************\\n        Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\\n        on secp256k1, in P\\u00b2(\\ud835\\udd3d\\u2099)\\n        @return sx\\n        @return sy\\n        @return sz\\n    */\\n  function projectiveECAdd(\\n    uint256 px,\\n    uint256 py,\\n    uint256 qx,\\n    uint256 qy\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256 sx,\\n      uint256 sy,\\n      uint256 sz\\n    )\\n  {\\n    unchecked {\\n      // See \\\"Group law for E/K : y^2 = x^3 + ax + b\\\", in section 3.1.2, p. 80,\\n      // \\\"Guide to Elliptic Curve Cryptography\\\" by Hankerson, Menezes and Vanstone\\n      // We take the equations there for (sx,sy), and homogenize them to\\n      // projective coordinates. That way, no inverses are required, here, and we\\n      // only need the one inverse in affineECAdd.\\n\\n      // We only need the \\\"point addition\\\" equations from Hankerson et al. Can\\n      // skip the \\\"point doubling\\\" equations because p1 == p2 is cryptographically\\n      // impossible, and required not to be the case in linearCombination.\\n\\n      // Add extra \\\"projective coordinate\\\" to the two points\\n      (uint256 z1, uint256 z2) = (1, 1);\\n\\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\\n      // Cannot wrap since px and py are in [0, FIELD_SIZE-1]\\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\\n\\n      uint256 dx; // Accumulates denominator from sx calculation\\n      // sx=((qy-py)/(qx-px))^2-px-qx\\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\\n\\n      uint256 dy; // Accumulates denominator from sy calculation\\n      // sy=((qy-py)/(qx-px))(px-sx)-py\\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\\n\\n      if (dx != dy) {\\n        // Cross-multiply to put everything over a common denominator\\n        sx = mulmod(sx, dy, FIELD_SIZE);\\n        sy = mulmod(sy, dx, FIELD_SIZE);\\n        sz = mulmod(dx, dy, FIELD_SIZE);\\n      } else {\\n        // Already over a common denominator, use that for z ordinate\\n        sz = dx;\\n      }\\n    }\\n  }\\n\\n  // p1+p2, as affine points on secp256k1.\\n  //\\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\\n  // It is computed off-chain to save gas.\\n  //\\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\\n  // point doubling.\\n  function affineECAdd(\\n    uint256[2] memory p1,\\n    uint256[2] memory p2,\\n    uint256 invZ\\n  ) internal pure returns (uint256[2] memory) {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \\\"invZ must be inverse of z\\\");\\n    // Clear the z ordinate of the projective representation by dividing through\\n    // by it, to obtain the affine representation\\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\\n  }\\n\\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\\n  // cryptographically high probability.)\\n  function verifyLinearCombinationWithGenerator(\\n    uint256 c,\\n    uint256[2] memory p,\\n    uint256 s,\\n    address lcWitness\\n  ) internal pure returns (bool) {\\n    // Rule out ecrecover failure modes which return address 0.\\n    unchecked {\\n      require(lcWitness != address(0), \\\"bad witness\\\");\\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\\n      // Note this cannot wrap (X - Y % X), but we use unchecked to save\\n      // gas.\\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n      // The point corresponding to the address returned by\\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\\n      // (p[0]\\u207b\\u00b9 mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\\n      // See https://crypto.stackexchange.com/a/18106\\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\\n      return computed == lcWitness;\\n    }\\n  }\\n\\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\\n  // requires cp1Witness != sp2Witness (which is fine for this application,\\n  // since it is cryptographically impossible for them to be equal. In the\\n  // (cryptographically impossible) case that a prover accidentally derives\\n  // a proof with equal c*p1 and s*p2, they should retry with a different\\n  // proof nonce.) Assumes that all points are on secp256k1\\n  // (which is checked in verifyVRFProof below.)\\n  function linearCombination(\\n    uint256 c,\\n    uint256[2] memory p1,\\n    uint256[2] memory cp1Witness,\\n    uint256 s,\\n    uint256[2] memory p2,\\n    uint256[2] memory sp2Witness,\\n    uint256 zInv\\n  ) internal pure returns (uint256[2] memory) {\\n    unchecked {\\n      // Note we are relying on the wrap around here\\n      require((cp1Witness[0] % FIELD_SIZE) != (sp2Witness[0] % FIELD_SIZE), \\\"points in sum must be distinct\\\");\\n      require(ecmulVerify(p1, c, cp1Witness), \\\"First mul check failed\\\");\\n      require(ecmulVerify(p2, s, sp2Witness), \\\"Second mul check failed\\\");\\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\\n  uint256 internal constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\\n\\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  // The draft calls (in step 7, via the definition of string_to_int, in\\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\\n  // first hash without checking that it corresponds to a number less than the\\n  // group order, which will lead to a slight bias in the sample.\\n  //\\n  // TODO(alx): We could save a bit of gas by following the standard here and\\n  // using the compressed representation of the points, if we collated the y\\n  // parities into a single bytes32.\\n  // https://www.pivotaltracker.com/story/show/171120588\\n  function scalarFromCurvePoints(\\n    uint256[2] memory hash,\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    address uWitness,\\n    uint256[2] memory v\\n  ) internal pure returns (uint256 s) {\\n    return uint256(keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX, hash, pk, gamma, v, uWitness)));\\n  }\\n\\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\\n  // and seed. zInv must be the inverse of the third ordinate from\\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\\n  // section 5.3 of the IETF draft.\\n  //\\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\\n  // (which I could make a uint256 without using any extra space.) Would save\\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\\n  function verifyVRFProof(\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    uint256 c,\\n    uint256 s,\\n    uint256 seed,\\n    address uWitness,\\n    uint256[2] memory cGammaWitness,\\n    uint256[2] memory sHashWitness,\\n    uint256 zInv\\n  ) internal view {\\n    unchecked {\\n      require(isOnCurve(pk), \\\"public key is not on curve\\\");\\n      require(isOnCurve(gamma), \\\"gamma is not on curve\\\");\\n      require(isOnCurve(cGammaWitness), \\\"cGammaWitness is not on curve\\\");\\n      require(isOnCurve(sHashWitness), \\\"sHashWitness is not on curve\\\");\\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\\n      // we use the address of u instead of u itself. Also, here we add the\\n      // terms instead of taking the difference, and in the proof construction in\\n      // vrf.GenerateProof, we correspondingly take the difference instead of\\n      // taking the sum as they do in step 7 of section 5.1.)\\n      require(verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \\\"addr(c*pk+s*g)!=_uWitness\\\");\\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\\n      uint256[2] memory hash = hashToCurve(pk, seed);\\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\\n      uint256[2] memory v = linearCombination(c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\\n      // Steps 7. and 8. of IETF draft section 5.3\\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\\n      require(c == derivedC, \\\"invalid proof\\\");\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash used as the final VRF output.\\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\\n  uint256 internal constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\\n\\n  struct Proof {\\n    uint256[2] pk;\\n    uint256[2] gamma;\\n    uint256 c;\\n    uint256 s;\\n    uint256 seed;\\n    address uWitness;\\n    uint256[2] cGammaWitness;\\n    uint256[2] sHashWitness;\\n    uint256 zInv;\\n  }\\n\\n  /* ***************************************************************************\\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n     * @param proof vrf proof components\\n     * @param seed  seed used to generate the vrf output\\n     *\\n     * Throws if proof is invalid, otherwise:\\n     * @return output i.e., the random output implied by the proof\\n     * ***************************************************************************\\n     */\\n  function randomValueFromVRFProof(Proof memory proof, uint256 seed) internal view returns (uint256 output) {\\n    verifyVRFProof(\\n      proof.pk,\\n      proof.gamma,\\n      proof.c,\\n      proof.s,\\n      seed,\\n      proof.uWitness,\\n      proof.cGammaWitness,\\n      proof.sHashWitness,\\n      proof.zInv\\n    );\\n    output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, proof.gamma)));\\n  }\\n}\\n\",\"keccak256\":\"0x6e9617ea33bf761d89dfc9ec2f0a55123a6737c753d67bc313c386da451b4b6a\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 11,
  "storageLayout": {
    "storage": [
      {
        "astId": 98725,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 98728,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25531,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25541,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_activatedAtPeriod",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 25544,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_lastFinalizedPeriod",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 25547,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_unavailabilitySlashThreshold",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 25552,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_unavailableCount",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25558,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_beaconPerPeriod",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_uint256,t_struct(Beacon)7898_storage)"
      },
      {
        "astId": 25564,
        "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
        "label": "_validatorThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_enum(ValidatorType)7884,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ValidatorType)7884": {
        "encoding": "inplace",
        "label": "enum IRandomBeacon.ValidatorType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(ValidatorType)7884,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ValidatorType)7884",
        "label": "mapping(enum IRandomBeacon.ValidatorType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Beacon)7898_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRandomBeacon.Beacon)",
        "numberOfBytes": "32",
        "value": "t_struct(Beacon)7898_storage"
      },
      "t_struct(Beacon)7898_storage": {
        "encoding": "inplace",
        "label": "struct IRandomBeacon.Beacon",
        "numberOfBytes": "128",
        "members": [
          {
            "astId": 7887,
            "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
            "label": "reqHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7889,
            "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7891,
            "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
            "label": "finalized",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 7893,
            "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
            "label": "submissionCount",
            "offset": 1,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 7897,
            "contract": "contracts/ronin/random-beacon/RoninRandomBeacon_Mainnet.sol:RoninRandomBeacon_Mainnet",
            "label": "submitted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1718637431,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}