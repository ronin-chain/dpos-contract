{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "bailOut",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "checkBailedOutAtPeriod",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "currentUnavailabilityIndicator",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "execResetCreditScores",
      "inputs": [
        {
          "name": "validatorIds",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execUpdateCreditScores",
      "inputs": [
        {
          "name": "validatorIds",
          "type": "address[]",
          "internalType": "address[]"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCreditScore",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCreditScoreConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "gainCreditScore_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "maxCreditScore_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "bailOutCostMultiplier_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cutOffPercentageAfterBailout_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getDoubleSignSlashingConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "slashDoubleSignAmount_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningJailUntilBlock_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningOffsetLimitBlock_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getFastFinalitySlashingConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "slashFastFinalityAmount_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "fastFinalityJailUntilBlock_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getManyCreditScores",
      "inputs": [
        {
          "name": "consensusAddrs",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "resultList",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRandomBeaconSlashingConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "config",
          "type": "tuple",
          "internalType": "struct ISlashRandomBeacon.SlashRandomBeaconConfig",
          "components": [
            {
              "name": "_slashAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "_activatedAtPeriod",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getUnavailabilityIndicator",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUnavailabilitySlashingConfigs",
      "inputs": [],
      "outputs": [
        {
          "name": "unavailabilityTier1Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "unavailabilityTier2Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "slashAmountForUnavailabilityTier2Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "jailDurationForUnavailabilityTier2Threshold_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "__validatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__maintenanceContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__roninTrustedOrganizationContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__roninGovernanceAdminContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256[4]",
          "internalType": "uint256[4]"
        },
        {
          "name": "",
          "type": "uint256[2]",
          "internalType": "uint256[2]"
        },
        {
          "name": "_doubleSignSlashingConfigs",
          "type": "uint256[3]",
          "internalType": "uint256[3]"
        },
        {
          "name": "_unavailabilitySlashingConfigs",
          "type": "uint256[4]",
          "internalType": "uint256[4]"
        },
        {
          "name": "_creditScoreConfigs",
          "type": "uint256[4]",
          "internalType": "uint256[4]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [
        {
          "name": "roninGovernanceAdminContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "profileContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV4",
      "inputs": [
        {
          "name": "randomBeaconContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "randomBeaconSlashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "activatedAtPeriod",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "lastUnavailabilitySlashedBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precompileValidateDoubleSignAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "precompileValidateFastFinalityAddress",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCreditScoreConfigs",
      "inputs": [
        {
          "name": "_gainScore",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_maxScore",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_bailOutMultiplier",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_cutOffPercentage",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDoubleSignSlashingConfigs",
      "inputs": [
        {
          "name": "_slashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_jailUntilBlock",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_offsetLimitBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setFastFinalitySlashingConfigs",
      "inputs": [
        {
          "name": "slashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "jailUntilBlock",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setRandomBeaconSlashingConfigs",
      "inputs": [
        {
          "name": "slashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "activatedAtPeriod",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setUnavailabilitySlashingConfigs",
      "inputs": [
        {
          "name": "tier1Threshold",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "tier2Threshold",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "slashAmountForTier2",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "jailDurationForTier2",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "slashDoubleSign",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "header1",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "header2",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "slashFastFinality",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "voterPublicKey",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "targetBlockNumber",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "targetBlockHash",
          "type": "bytes32[2]",
          "internalType": "bytes32[2]"
        },
        {
          "name": "listOfPublicKey",
          "type": "bytes[][2]",
          "internalType": "bytes[][2]"
        },
        {
          "name": "aggregatedSignature",
          "type": "bytes[2]",
          "internalType": "bytes[2]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "slashRandomBeacon",
      "inputs": [
        {
          "name": "validatorId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "slashUnavailability",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "BailedOut",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "usedCreditScore",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CreditScoreConfigsUpdated",
      "inputs": [
        {
          "name": "gainCreditScore",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "maxCreditScore",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "bailOutCostMultiplier",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cutOffPercentageAfterBailout",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CreditScoresUpdated",
      "inputs": [
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "creditScores",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DoubleSignSlashingConfigsUpdated",
      "inputs": [
        {
          "name": "slashDoubleSignAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningJailUntilBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "doubleSigningOffsetLimitBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "FastFinalitySlashingConfigsUpdated",
      "inputs": [
        {
          "name": "slashFastFinalityAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "fastFinalityJailUntilBlock",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RandomBeaconSlashingConfigsUpdated",
      "inputs": [
        {
          "name": "slashRandomBeaconAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Slashed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "slashType",
          "type": "uint8",
          "indexed": false,
          "internalType": "enum IBaseSlash.SlashType"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "SlashingBeaconSkipped",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "validatorId",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "UnavailabilitySlashingConfigsUpdated",
      "inputs": [
        {
          "name": "unavailabilityTier1Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "unavailabilityTier2Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "slashAmountForUnavailabilityTier2Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "jailDurationForUnavailabilityTier2Threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrCallPrecompiled",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCallerMustBeJailedInTheCurrentPeriod",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrEvidenceAlreadySubmitted",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInsufficientCreditScoreToBailOut",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidArguments",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidCreditScoreConfig",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidCutOffPercentageConfig",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidThreshold",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnregisteredPublicKey",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrValidatorHasBailedOutPreviously",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    }
  ],
  "absolutePath": "SlashIndicator.sol",
  "address": "0x185F6a4b3052aB71a24Da9532f918D37CE238a6f",
  "ast": "",
  "blockNumber": 27813238,
  "bytecode": "0x6080604052348015600f57600080fd5b506016601a565b60db565b61011354610100900460ff161560865760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b6101135460ff908116101560d957610113805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b613c2f806100ea6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063865e6fd31161010f578063d1f992f7116100a2578063e9bb166611610071578063e9bb1666146104b2578063f1001e78146104b9578063f562b3c4146104d9578063fd422cd0146104e157600080fd5b8063d1f992f714610455578063d3dd2bdf14610468578063de981f1b1461047b578063df4b6ee01461048e57600080fd5b8063ccbb72ed116100de578063ccbb72ed14610409578063cf39d13c1461041c578063d1737e271461042f578063d1cf43431461044257600080fd5b8063865e6fd3146103bf57806399103f7b146103d2578063a345ecb2146103e5578063c6391fa2146103f857600080fd5b80633101cfcb11610187578063487e00ea11610156578063487e00ea1461036357806362ffe6cb1461037e5780637c2b55a0146103915780638341df06146103ac57600080fd5b80633101cfcb1461029457806335cbdbe3146102a75780633d48fd7d146102ba578063478e6b93146102e757600080fd5b8063185368db116101c3578063185368db146102385780631e90b2a01461024b57806329b6eca91461025e57806329ddc3c01461027157600080fd5b806303933804146101ea57806307c2d2f6146101ff578063082e742014610212575b600080fd5b6101fd6101f8366004612c0f565b6104f4565b005b6101fd61020d366004612c90565b6105f3565b610225610220366004612cd2565b6106f3565b6040519081526020015b60405180910390f35b6101fd610246366004612cef565b610777565b6101fd610259366004612d7d565b610a8e565b6101fd61026c366004612cd2565b610cb5565b61028461027f366004612e00565b610e24565b604051901515815260200161022f565b6101fd6102a2366004612cd2565b610e3f565b6101fd6102b5366004612e00565b610f33565b60a55460a65460a75460a8545b60408051948552602085019390935291830152606082015260800161022f565b6040805180820182526000808252602091820152815180830183527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac8500548082527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85015491830191825283519081529051918101919091520161022f565b601d54601e546040805192835260208301919091520161022f565b61022561038c366004612e00565b611135565b60675b6040516001600160a01b03909116815260200161022f565b6101fd6103ba366004612e2c565b611149565b6101fd6103cd366004612e5d565b61115f565b6101fd6103e0366004612eb6565b61117a565b6101fd6103f3366004612e2c565b611303565b60dd5460de5460df5460e0546102c7565b6101fd610417366004612f74565b611315565b6101fd61042a366004612fa6565b61132f565b6101fd61043d366004612f74565b611342565b6101fd610450366004612fd2565b611356565b6101fd610463366004612cd2565b6117c0565b610225610476366004612cd2565b611c6c565b610394610489366004613091565b611c9b565b6001546002546003546040805193845260208401929092529082015260600161022f565b6069610394565b6104cc6104c7366004612c90565b611d2f565b60405161022f91906130e8565b60a354610225565b6101fd6104ef366004612cd2565b611e2f565b61011354600490610100900460ff1615801561051857506101135460ff8083169116105b6105805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b610113805461ffff191660ff83161761010017905561059f83836121d0565b6105aa601085612251565b610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150505050565b60086105fe81612302565b60008267ffffffffffffffff811115610619576106196130fb565b604051908082528060200260200182016040528015610642578160200160208202803683370190505b50905060005b838110156106bf57600085858381811061066457610664613111565b90506020020160208101906106799190612cd2565b6001600160a01b038116600090815260dc602052604081205583519091508390839081106106a9576106a9613111565b6000602091820292909201015250600101610648565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c234808484836040516105e593929190613165565b600061077161070183612367565b61070b6008611c9b565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c9190613195565b6123f8565b92915050565b600861078281612302565b60003390506000816001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190613195565b90506000826001600160a01b0316637e1dc16f88886040518363ffffffff1660e01b815260040161081d9291906131ae565b600060405180830381865afa15801561083a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108629190810190613274565b905060006108706005611c9b565b6001600160a01b0316638b042a72898986436040518563ffffffff1660e01b81526004016108a19493929190613311565b600060405180830381865afa1580156108be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e69190810190613274565b905060008767ffffffffffffffff811115610903576109036130fb565b60405190808252806020026020018201604052801561092c578160200160208202803683370190505b50905060005b88811015610a475760008a8a8381811061094e5761094e613111565b90506020020160208101906109639190612cd2565b90506000610971828b6123f8565b9050600086848151811061098757610987613111565b6020026020010151905060008685815181106109a5576109a5613111565b60200260200101519050600082806109ba5750815b6109cf576109ca60dd5485612421565b6109d2565b60005b6001600160a01b038616600090815260dc602052604090205460de549192506109fc91839061243b565b6001600160a01b038616600090815260dc602052604090208190558751889088908110610a2b57610a2b613111565b6020026020010181815250508560010195505050505050610932565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c23480898983604051610a7b93929190613165565b60405180910390a1505050505050505050565b610a96612458565b60008484604051610aa8929190613338565b6040518091039020905060008383604051610ac4929190613338565b604080519182900390912060008481526004602052919091205490915060ff1680610afd575060008181526004602052604090205460ff165b15610b1b5760405163f27b8ec960e01b815260040160405180910390fd5b600080610b27896124b4565b9150915081610b335750875b610b40818989898961254e565b15610caa576000610b516008611c9b565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190613195565b6000878152600460205260408082208054600160ff19918216811790925589845292829020805490931617909155519091506001600160a01b038416907f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d990610c2490600390859061335e565b60405180910390a260025460018054604051630bde081360e21b81526001600160a01b03878116600483015260248201949094526044810191909152606481019190915290831690632f78204c90608401600060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b5050505050505b505050505050505050565b61011354600290610100900460ff16158015610cd957506101135460ff8083169116105b610d3c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610577565b610113805461ffff191660ff831617610100179055600054610d69906008906001600160a01b0316612251565b606c54610d81906005906001600160a01b0316612251565b610d8c600483612251565b603554610da490600a906001600160a01b0316612251565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116909155606c8054821690556035805482169055603680549091169055610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000610e38610e3284612367565b8361263f565b9392505050565b61011354600390610100900460ff16158015610e6357506101135460ff8083169116105b610ec65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610577565b610113805461ffff191660ff831617610100179055610ee6600f83612251565b610ef460015460025461266b565b610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610e18565b6010610f3e81612302565b6000610f4a6008611c9b565b6040805180820182527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85005481527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85015460208083019190915282517f06040618000000000000000000000000000000000000000000000000000000008152925193945090926000926001600160a01b038616926306040618926004808401938290030181865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110259190613195565b90508160200151811015611071576040516001600160a01b0387169086907f110971beb246c5a515faae0544bdb1e3527fc70442b043a4df5e46a4acaeb36e90600090a3505050505050565b856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d96009876040516110ad92919061335e565b60405180910390a28151604051630bde081360e21b81526001600160a01b0388811660048301526000602483018190526044830193909352606482019290925290841690632f78204c90608401600060405180830381600087803b15801561111457600080fd5b505af1158015611128573d6000803e3d6000fd5b505050505050505b505050565b6000610e3861114384612367565b836123f8565b611151612458565b61115b82826121d0565b5050565b611167612458565b611170816126ab565b61115b8282612251565b61011354610100900460ff161580801561119c575061011354600160ff909116105b806111b75750303b1580156111b757506101135460ff166001145b61121a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610577565b610113805460ff19166001179055801561123f57610113805461ff0019166101001790555b61124a60088b612251565b61125560058a612251565b611260600488612251565b61126b600a89612251565b61127f8435602086013560408701356126fa565b6112988335602085013560408601356060870135612747565b6112b182356020840135604085013560608601356127e8565b801561112857610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050505050565b61130b612458565b61115b828261266b565b61131d612458565b611329848484846127e8565b50505050565b611337612458565b6111308383836126fa565b61134a612458565b61132984848484612747565b61135f336128b7565b60000361138f576000356001600160e01b0319166003604051620f948f60ea1b815260040161057792919061337c565b600061139a88612367565b905060006113a8600f611c9b565b6040517ff46609400000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291925060009183169063f466094090602401600060405180830381865afa15801561140d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114359190810190613446565b905060008989604051611449929190613338565b604051809103902090508160a0015180519060200120811415801561147957508160e00151805190602001208114155b156114be576040517f053265f10000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610577565b6040516bffffffffffffffffffffffff1960608d901b1660208201526034810189905260009060540160408051601f1981840301815291815281516020928301206000818152601f90935291205490915060ff16156115305760405163f27b8ec960e01b815260040160405180910390fd5b6040517f7e18b5660000000000000000000000000000000000000000000000000000000081526001600160a01b03851690637e18b56690611575908a90600401613630565b602060405180830381865afa158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b691906136c2565b6115ec576040517f1979097700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116628b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820182528e935091508c90600290839083908082843760009201919091525061165491508c905061372e565b61165d8b613806565b612948565b156117b2576000818152601f60205260408120805460ff1916600117905561168a6008611c9b565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f09190613195565b9050866001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d960088360405161172e92919061335e565b60405180910390a2601e54601d54604051630bde081360e21b81526001600160a01b038a81166004830152602482019390935260448101919091526001606482015290831690632f78204c90608401600060405180830381600087803b15801561179757600080fd5b505af11580156117ab573d6000803e3d6000fd5b5050505050505b505050505050505050505050565b60006117cb82612367565b905060006117d96008611c9b565b6040517fa0c3f2d20000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509082169063a0c3f2d290602401602060405180830381865afa15801561183c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186091906136c2565b61188d576000356001600160e01b0319166008604051620f948f60ea1b815260040161057792919061337c565b6040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301523360248301528216906346ebb23290604401602060405180830381865afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191691906136c2565b611943576000356001600160e01b0319166004604051620f948f60ea1b815260040161057792919061337c565b6040517f96585fc20000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009182918416906396585fc290602401606060405180830381865afa1580156119a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cb919061385f565b925050915081611a07576040517f6cd31b5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6b9190613195565b6001600160a01b038616600090815260db6020908152604080832084845290915290205490915060ff1615611acc576040517f7674d6a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600090815260dc602052604081205460df54909190611af590856138aa565b905080821015611b31576040517f8c5cb26e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f15b5ebde0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018590528716906315b5ebde90604401600060405180830381600087803b158015611b9457600080fd5b505af1158015611ba8573d6000803e3d6000fd5b505050506001600160a01b038716600090815260dc602052604081208054839290611bd49084906138c1565b90915550506001600160a01b038716600090815260a4602090815260408083208684529091528120556001600160a01b038716600081815260db60209081526040808320878452825291829020805460ff1916600117905581518681529081018490527f7ff9f7032d565c7e8919332964b2faa33c320b53604a65d9dd1f8112e12cd39d910160405180910390a25050505050505050565b600060dc6000611c7b84612367565b6001600160a01b0316815260208101919091526040016000205492915050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb6000836010811115611cd257611cd2613348565b60ff1681526020810191909152604001600020546001600160a01b0316905080611d2a57816040517f812281be00000000000000000000000000000000000000000000000000000000815260040161057791906138e8565b919050565b60606000611d6f8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d192505050565b9050805167ffffffffffffffff811115611d8b57611d8b6130fb565b604051908082528060200260200182016040528015611db4578160200160208202803683370190505b50915060005b8251811015611e275760dc6000838381518110611dd957611dd9613111565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110611e1457611e14613111565b6020908102919091010152600101611dba565b505092915050565b60a3544311611e6a576040517f557fd09100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4360a355334114611e9e576000356001600160e01b0319166002604051620f948f60ea1b815260040161057792919061337c565b6000611ea982612367565b9050611eb58282612a4d565b611ebd575050565b6000611ec96008611c9b565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f9190613195565b6001600160a01b038416600090815260a460209081526040808320848452909152812080546001019081905560a85492935091611f6d904390612bab565b905060a654820361203657846001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600285604051611fb492919061335e565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0387811660048301526024820184905260448201929092526000606482015290851690632f78204c90608401600060405180830381600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506121c7565b60a55482036121c757600061204b868561263f565b90508061210b57856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d960018660405161208e92919061335e565b60405180910390a2604051630bde081360e21b81526001600160a01b038781166004830152600060248301819052604483018190526064830152861690632f78204c90608401600060405180830381600087803b1580156120ee57600080fd5b505af1158015612102573d6000803e3d6000fd5b505050506121c5565b856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d960078660405161214792919061335e565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0388811660048301526024820185905260448201929092526001606482015290861690632f78204c90608401600060405180830381600087803b1580156121ac57600080fd5b505af11580156121c0573d6000803e3d6000fd5b505050505b505b50505050505b50565b7f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85008281557f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85018290556040518381527f3c00b102fc99ac0cdfbc7ab84559e84657b905a5b3183ff363b037402e0fc25c906020015b60405180910390a1505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084601081111561228757612287613348565b60ff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905581168260108111156122d5576122d5613348565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b61230b81611c9b565b6001600160a01b0316336001600160a01b0316146121cd576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610577939291906138f6565b6000612373600f611c9b565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156123d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610771919061392b565b6001600160a01b038216600090815260a460209081526040808320848452909152812054610e38565b6000818311612431576000610e38565b610e3882846138c1565b600061245061244a8486613948565b83612bc6565b949350505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146124b2576000356001600160e01b0319166001604051620f948f60ea1b815260040161057792919061337c565b565b6000806124c1600f611c9b565b6040517f88660f2a0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291909116906388660f2a906024016040805180830381865afa158015612521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612545919061395b565b91509150915091565b6040516000906067906001908390612572908a908a908a908a908a90602401613987565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7fc356770000000000000000000000000000000000000000000000000000000017905280519091506125d7612bdc565b602083016020828483895afa6125ec57600094505b503d6125f757600093505b8361262e576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159a9950505050505050505050565b6001600160a01b038216600090815260db6020908152604080832084845290915281205460ff16610e38565b601d829055601e81905560408051838152602081018390527f381ec200df2ed0875638486318f9f8a84e3550bdc686bf1400c9371a18d087f09101610e18565b806001600160a01b03163b6000036121cd576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610577565b60018390556002829055600381905560408051848152602081018490529081018290527f913da102149f952dde560cef3349db8e8002e9d580c41a7551d6d45329f4306b90606001612244565b8284111561278f576040517f87f6f0950000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610577565b60a584905560a683905560a782905560a88190556040805185815260208101859052908101839052606081018290527f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa98906080016105e5565b82841115612822576040517f112af4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271081111561285e576040517fe0b2228c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60dd84905560de83905560df82905560e08190556040805185815260208101859052908101839052606081018290527fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b906080016105e5565b60006128c3600a611c9b565b6040517fd78392f80000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063d78392f890602401602060405180830381865afa158015612924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190613195565b604051600090606990600190839061296c908a908a908a908a908a90602401613a3a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7b47d06b0000000000000000000000000000000000000000000000000000000017905280519091506125d7612bdc565b60606129dd600f611c9b565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b8152600401612a089190613b1d565b600060405180830381865afa158015612a25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107719190810190613b6a565b6000336001600160a01b03841614801590612a715750336001600160a01b03831614155b8015612b075750612a826008611c9b565b6040517fe8712aa70000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063e8712aa790602401602060405180830381865afa158015612ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0791906136c2565b8015610e385750612b186005611c9b565b6040517f8d5b67590000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301524360248301529190911690638d5b675990604401602060405180830381865afa158015612b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba391906136c2565b159392505050565b600081600003612bbc576000610e38565b610e388284613948565b6000818310612bd55781610e38565b5090919050565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b03811681146121cd57600080fd5b600080600060608486031215612c2457600080fd5b8335612c2f81612bfa565b95602085013595506040909401359392505050565b60008083601f840112612c5657600080fd5b50813567ffffffffffffffff811115612c6e57600080fd5b6020830191508360208260051b8501011115612c8957600080fd5b9250929050565b60008060208385031215612ca357600080fd5b823567ffffffffffffffff811115612cba57600080fd5b612cc685828601612c44565b90969095509350505050565b600060208284031215612ce457600080fd5b8135610e3881612bfa565b600080600060408486031215612d0457600080fd5b833567ffffffffffffffff811115612d1b57600080fd5b612d2786828701612c44565b909790965060209590950135949350505050565b60008083601f840112612d4d57600080fd5b50813567ffffffffffffffff811115612d6557600080fd5b602083019150836020828501011115612c8957600080fd5b600080600080600060608688031215612d9557600080fd5b8535612da081612bfa565b9450602086013567ffffffffffffffff80821115612dbd57600080fd5b612dc989838a01612d3b565b90965094506040880135915080821115612de257600080fd5b50612def88828901612d3b565b969995985093965092949392505050565b60008060408385031215612e1357600080fd5b8235612e1e81612bfa565b946020939093013593505050565b60008060408385031215612e3f57600080fd5b50508035926020909101359150565b803560118110611d2a57600080fd5b60008060408385031215612e7057600080fd5b612e7983612e4e565b91506020830135612e8981612bfa565b809150509250929050565b806080810183101561077157600080fd5b806040810183101561077157600080fd5b60008060008060008060008060006102a08a8c031215612ed557600080fd5b8935612ee081612bfa565b985060208a0135612ef081612bfa565b975060408a0135612f0081612bfa565b965060608a0135612f1081612bfa565b9550612f1f8b60808c01612e94565b9450612f2f8b6101008c01612ea5565b93506101a08a018b811115612f4357600080fd5b6101408b019350612f548c82612e94565b925050612f658b6102208c01612e94565b90509295985092959850929598565b60008060008060808587031215612f8a57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215612fbb57600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215612fed57600080fd5b8735612ff881612bfa565b9650602088013567ffffffffffffffff8082111561301557600080fd5b6130218b838c01612d3b565b909850965060408a0135955086915061303d8b60608c01612ea5565b945060a08a013591508082111561305357600080fd5b61305f8b838c01612ea5565b935060c08a013591508082111561307557600080fd5b506130828a828b01612ea5565b91505092959891949750929550565b6000602082840312156130a357600080fd5b610e3882612e4e565b60008151808452602080850194506020840160005b838110156130dd578151875295820195908201906001016130c1565b509495945050505050565b602081526000610e3860208301846130ac565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8183526000602080850194508260005b858110156130dd57813561314a81612bfa565b6001600160a01b031687529582019590820190600101613137565b604081526000613179604083018587613127565b828103602084015261318b81856130ac565b9695505050505050565b6000602082840312156131a757600080fd5b5051919050565b602081526000612450602083018486613127565b604051610180810167ffffffffffffffff811182821017156131e6576131e66130fb565b60405290565b6040805190810167ffffffffffffffff811182821017156131e6576131e66130fb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613238576132386130fb565b604052919050565b600067ffffffffffffffff82111561325a5761325a6130fb565b5060051b60200190565b80518015158114611d2a57600080fd5b6000602080838503121561328757600080fd5b825167ffffffffffffffff81111561329e57600080fd5b8301601f810185136132af57600080fd5b80516132c26132bd82613240565b61320f565b81815260059190911b820183019083810190878311156132e157600080fd5b928401925b82841015613306576132f784613264565b825292840192908401906132e6565b979650505050505050565b606081526000613325606083018688613127565b6020830194909452506040015292915050565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fd5b60408101600a841061337257613372613348565b9281526020015290565b6001600160e01b03198316815260408101600b831061339d5761339d613348565b8260208301529392505050565b8051611d2a81612bfa565b600067ffffffffffffffff8211156133cf576133cf6130fb565b50601f01601f191660200190565b60005b838110156133f85781810151838201526020016133e0565b50506000910152565b600082601f83011261341257600080fd5b81516134206132bd826133b5565b81815284602083860101111561343557600080fd5b6124508260208301602087016133dd565b60006020828403121561345857600080fd5b815167ffffffffffffffff8082111561347057600080fd5b90830190610180828603121561348557600080fd5b61348d6131c2565b613496836133aa565b81526134a4602084016133aa565b60208201526134b5604084016133aa565b60408201526134c6606084016133aa565b60608201526134d7608084016133aa565b608082015260a0830151828111156134ee57600080fd5b6134fa87828601613401565b60a08301525060c083015160c082015260e08301518281111561351c57600080fd5b61352887828601613401565b60e083015250610100915061353e8284016133aa565b918101919091526101208281015190820152610140808301519082015261016091820151918101919091529392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000838385526020808601955060208560051b8301018460005b8781101561362357848303601f19018952813536889003601e190181126135d957600080fd5b8701848101903567ffffffffffffffff8111156135f557600080fd5b80360382131561360457600080fd5b61360f858284613570565b9a86019a94505050908301906001016135b3565b5090979650505050505050565b60208082526000906060830183820185845b60028110156136b657868403601f19018352813536899003601e1901811261366957600080fd5b8801858101903567ffffffffffffffff81111561368557600080fd5b8060051b360382131561369757600080fd5b6136a2868284613599565b955050509184019190840190600101613642565b50919695505050505050565b6000602082840312156136d457600080fd5b610e3882613264565b600082601f8301126136ee57600080fd5b81356136fc6132bd826133b5565b81815284602083860101111561371157600080fd5b816020850160208301376000918101602001919091529392505050565b60006137386131ec565b80604084013681111561374a57600080fd5b845b818110156137fc57803567ffffffffffffffff8082111561376d5760008081fd5b9087019036601f8301126137815760008081fd5b813560206137916132bd83613240565b82815260059290921b840181019181810190368411156137b15760008081fd5b8286015b848110156137e9578035868111156137cd5760008081fd5b6137db3686838b01016136dd565b8452509183019183016137b5565b508952509096019550505060200161374c565b5090949350505050565b60006138106131ec565b80604084013681111561382257600080fd5b845b818110156137fc57803567ffffffffffffffff8111156138445760008081fd5b613850368289016136dd565b85525060209384019301613824565b60008060006060848603121561387457600080fd5b61387d84613264565b925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761077157610771613894565b8181038181111561077157610771613894565b601181106138e4576138e4613348565b9052565b6020810161077182846138d4565b6001600160e01b0319841681526060810161391460208301856138d4565b6001600160a01b0383166040830152949350505050565b60006020828403121561393d57600080fd5b8151610e3881612bfa565b8082018082111561077157610771613894565b6000806040838503121561396e57600080fd5b61397783613264565b91506020830151612e8981612bfa565b6001600160a01b03861681526060602082015260006139aa606083018688613570565b82810360408401526139bd818587613570565b98975050505050505050565b600081518084526139e18160208601602086016133dd565b601f01601f19169290920160200192915050565b600082604081018360005b6002811015613a2f578383038752613a198383516139c9565b6020978801979093509190910190600101613a00565b509095945050505050565b60c081526000613a4d60c08301886139c9565b60208781850152604084018760005b6002811015613a7957815183529183019190830190600101613a5c565b505050838203608085015281604081018760005b6002811015613afa578583038452815180518085529086019086850190600581901b8601880160005b82811015613ae457601f19888303018452613ad28286516139c9565b948a0194938a01939150600101613ab6565b5096880196955050509185019150600101613a8d565b505085810360a0870152613b0e81886139f5565b9b9a5050505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613b5e5783516001600160a01b031683529284019291840191600101613b39565b50909695505050505050565b60006020808385031215613b7d57600080fd5b825167ffffffffffffffff811115613b9457600080fd5b8301601f81018513613ba557600080fd5b8051613bb36132bd82613240565b81815260059190911b82018301908381019087831115613bd257600080fd5b928401925b82841015613306578351613bea81612bfa565b82529284019290840190613bd756fea2646970667358221220328be8ee6b210ea66eda1f1704a261d1897152a1e2aa57893e4ed9673803f4fb64736f6c63430008190033",
  "callValue": 0,
  "chainId": 2021,
  "constructorArgs": "0x",
  "contractName": "SlashIndicator",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063865e6fd31161010f578063d1f992f7116100a2578063e9bb166611610071578063e9bb1666146104b2578063f1001e78146104b9578063f562b3c4146104d9578063fd422cd0146104e157600080fd5b8063d1f992f714610455578063d3dd2bdf14610468578063de981f1b1461047b578063df4b6ee01461048e57600080fd5b8063ccbb72ed116100de578063ccbb72ed14610409578063cf39d13c1461041c578063d1737e271461042f578063d1cf43431461044257600080fd5b8063865e6fd3146103bf57806399103f7b146103d2578063a345ecb2146103e5578063c6391fa2146103f857600080fd5b80633101cfcb11610187578063487e00ea11610156578063487e00ea1461036357806362ffe6cb1461037e5780637c2b55a0146103915780638341df06146103ac57600080fd5b80633101cfcb1461029457806335cbdbe3146102a75780633d48fd7d146102ba578063478e6b93146102e757600080fd5b8063185368db116101c3578063185368db146102385780631e90b2a01461024b57806329b6eca91461025e57806329ddc3c01461027157600080fd5b806303933804146101ea57806307c2d2f6146101ff578063082e742014610212575b600080fd5b6101fd6101f8366004612c0f565b6104f4565b005b6101fd61020d366004612c90565b6105f3565b610225610220366004612cd2565b6106f3565b6040519081526020015b60405180910390f35b6101fd610246366004612cef565b610777565b6101fd610259366004612d7d565b610a8e565b6101fd61026c366004612cd2565b610cb5565b61028461027f366004612e00565b610e24565b604051901515815260200161022f565b6101fd6102a2366004612cd2565b610e3f565b6101fd6102b5366004612e00565b610f33565b60a55460a65460a75460a8545b60408051948552602085019390935291830152606082015260800161022f565b6040805180820182526000808252602091820152815180830183527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac8500548082527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85015491830191825283519081529051918101919091520161022f565b601d54601e546040805192835260208301919091520161022f565b61022561038c366004612e00565b611135565b60675b6040516001600160a01b03909116815260200161022f565b6101fd6103ba366004612e2c565b611149565b6101fd6103cd366004612e5d565b61115f565b6101fd6103e0366004612eb6565b61117a565b6101fd6103f3366004612e2c565b611303565b60dd5460de5460df5460e0546102c7565b6101fd610417366004612f74565b611315565b6101fd61042a366004612fa6565b61132f565b6101fd61043d366004612f74565b611342565b6101fd610450366004612fd2565b611356565b6101fd610463366004612cd2565b6117c0565b610225610476366004612cd2565b611c6c565b610394610489366004613091565b611c9b565b6001546002546003546040805193845260208401929092529082015260600161022f565b6069610394565b6104cc6104c7366004612c90565b611d2f565b60405161022f91906130e8565b60a354610225565b6101fd6104ef366004612cd2565b611e2f565b61011354600490610100900460ff1615801561051857506101135460ff8083169116105b6105805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b610113805461ffff191660ff83161761010017905561059f83836121d0565b6105aa601085612251565b610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150505050565b60086105fe81612302565b60008267ffffffffffffffff811115610619576106196130fb565b604051908082528060200260200182016040528015610642578160200160208202803683370190505b50905060005b838110156106bf57600085858381811061066457610664613111565b90506020020160208101906106799190612cd2565b6001600160a01b038116600090815260dc602052604081205583519091508390839081106106a9576106a9613111565b6000602091820292909201015250600101610648565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c234808484836040516105e593929190613165565b600061077161070183612367565b61070b6008611c9b565b6001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c9190613195565b6123f8565b92915050565b600861078281612302565b60003390506000816001600160a01b031663297a8fca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190613195565b90506000826001600160a01b0316637e1dc16f88886040518363ffffffff1660e01b815260040161081d9291906131ae565b600060405180830381865afa15801561083a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108629190810190613274565b905060006108706005611c9b565b6001600160a01b0316638b042a72898986436040518563ffffffff1660e01b81526004016108a19493929190613311565b600060405180830381865afa1580156108be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e69190810190613274565b905060008767ffffffffffffffff811115610903576109036130fb565b60405190808252806020026020018201604052801561092c578160200160208202803683370190505b50905060005b88811015610a475760008a8a8381811061094e5761094e613111565b90506020020160208101906109639190612cd2565b90506000610971828b6123f8565b9050600086848151811061098757610987613111565b6020026020010151905060008685815181106109a5576109a5613111565b60200260200101519050600082806109ba5750815b6109cf576109ca60dd5485612421565b6109d2565b60005b6001600160a01b038616600090815260dc602052604090205460de549192506109fc91839061243b565b6001600160a01b038616600090815260dc602052604090208190558751889088908110610a2b57610a2b613111565b6020026020010181815250508560010195505050505050610932565b507f8c02b2ccee964dc50649a48bd0a0446f0f9e88ecdb72d099f4ace07c39c23480898983604051610a7b93929190613165565b60405180910390a1505050505050505050565b610a96612458565b60008484604051610aa8929190613338565b6040518091039020905060008383604051610ac4929190613338565b604080519182900390912060008481526004602052919091205490915060ff1680610afd575060008181526004602052604090205460ff165b15610b1b5760405163f27b8ec960e01b815260040160405180910390fd5b600080610b27896124b4565b9150915081610b335750875b610b40818989898961254e565b15610caa576000610b516008611c9b565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190613195565b6000878152600460205260408082208054600160ff19918216811790925589845292829020805490931617909155519091506001600160a01b038416907f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d990610c2490600390859061335e565b60405180910390a260025460018054604051630bde081360e21b81526001600160a01b03878116600483015260248201949094526044810191909152606481019190915290831690632f78204c90608401600060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b5050505050505b505050505050505050565b61011354600290610100900460ff16158015610cd957506101135460ff8083169116105b610d3c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610577565b610113805461ffff191660ff831617610100179055600054610d69906008906001600160a01b0316612251565b606c54610d81906005906001600160a01b0316612251565b610d8c600483612251565b603554610da490600a906001600160a01b0316612251565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116909155606c8054821690556035805482169055603680549091169055610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6000610e38610e3284612367565b8361263f565b9392505050565b61011354600390610100900460ff16158015610e6357506101135460ff8083169116105b610ec65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610577565b610113805461ffff191660ff831617610100179055610ee6600f83612251565b610ef460015460025461266b565b610113805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610e18565b6010610f3e81612302565b6000610f4a6008611c9b565b6040805180820182527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85005481527f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85015460208083019190915282517f06040618000000000000000000000000000000000000000000000000000000008152925193945090926000926001600160a01b038616926306040618926004808401938290030181865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110259190613195565b90508160200151811015611071576040516001600160a01b0387169086907f110971beb246c5a515faae0544bdb1e3527fc70442b043a4df5e46a4acaeb36e90600090a3505050505050565b856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d96009876040516110ad92919061335e565b60405180910390a28151604051630bde081360e21b81526001600160a01b0388811660048301526000602483018190526044830193909352606482019290925290841690632f78204c90608401600060405180830381600087803b15801561111457600080fd5b505af1158015611128573d6000803e3d6000fd5b505050505050505b505050565b6000610e3861114384612367565b836123f8565b611151612458565b61115b82826121d0565b5050565b611167612458565b611170816126ab565b61115b8282612251565b61011354610100900460ff161580801561119c575061011354600160ff909116105b806111b75750303b1580156111b757506101135460ff166001145b61121a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610577565b610113805460ff19166001179055801561123f57610113805461ff0019166101001790555b61124a60088b612251565b61125560058a612251565b611260600488612251565b61126b600a89612251565b61127f8435602086013560408701356126fa565b6112988335602085013560408601356060870135612747565b6112b182356020840135604085013560608601356127e8565b801561112857610113805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050505050565b61130b612458565b61115b828261266b565b61131d612458565b611329848484846127e8565b50505050565b611337612458565b6111308383836126fa565b61134a612458565b61132984848484612747565b61135f336128b7565b60000361138f576000356001600160e01b0319166003604051620f948f60ea1b815260040161057792919061337c565b600061139a88612367565b905060006113a8600f611c9b565b6040517ff46609400000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291925060009183169063f466094090602401600060405180830381865afa15801561140d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114359190810190613446565b905060008989604051611449929190613338565b604051809103902090508160a0015180519060200120811415801561147957508160e00151805190602001208114155b156114be576040517f053265f10000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610577565b6040516bffffffffffffffffffffffff1960608d901b1660208201526034810189905260009060540160408051601f1981840301815291815281516020928301206000818152601f90935291205490915060ff16156115305760405163f27b8ec960e01b815260040160405180910390fd5b6040517f7e18b5660000000000000000000000000000000000000000000000000000000081526001600160a01b03851690637e18b56690611575908a90600401613630565b602060405180830381865afa158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b691906136c2565b6115ec576040517f1979097700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6116628b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820182528e935091508c90600290839083908082843760009201919091525061165491508c905061372e565b61165d8b613806565b612948565b156117b2576000818152601f60205260408120805460ff1916600117905561168a6008611c9b565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f09190613195565b9050866001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d960088360405161172e92919061335e565b60405180910390a2601e54601d54604051630bde081360e21b81526001600160a01b038a81166004830152602482019390935260448101919091526001606482015290831690632f78204c90608401600060405180830381600087803b15801561179757600080fd5b505af11580156117ab573d6000803e3d6000fd5b5050505050505b505050505050505050505050565b60006117cb82612367565b905060006117d96008611c9b565b6040517fa0c3f2d20000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529192509082169063a0c3f2d290602401602060405180830381865afa15801561183c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186091906136c2565b61188d576000356001600160e01b0319166008604051620f948f60ea1b815260040161057792919061337c565b6040517f46ebb2320000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301523360248301528216906346ebb23290604401602060405180830381865afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191691906136c2565b611943576000356001600160e01b0319166004604051620f948f60ea1b815260040161057792919061337c565b6040517f96585fc20000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009182918416906396585fc290602401606060405180830381865afa1580156119a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cb919061385f565b925050915081611a07576040517f6cd31b5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6b9190613195565b6001600160a01b038616600090815260db6020908152604080832084845290915290205490915060ff1615611acc576040517f7674d6a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600090815260dc602052604081205460df54909190611af590856138aa565b905080821015611b31576040517f8c5cb26e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f15b5ebde0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018590528716906315b5ebde90604401600060405180830381600087803b158015611b9457600080fd5b505af1158015611ba8573d6000803e3d6000fd5b505050506001600160a01b038716600090815260dc602052604081208054839290611bd49084906138c1565b90915550506001600160a01b038716600090815260a4602090815260408083208684529091528120556001600160a01b038716600081815260db60209081526040808320878452825291829020805460ff1916600117905581518681529081018490527f7ff9f7032d565c7e8919332964b2faa33c320b53604a65d9dd1f8112e12cd39d910160405180910390a25050505050505050565b600060dc6000611c7b84612367565b6001600160a01b0316815260208101919091526040016000205492915050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb6000836010811115611cd257611cd2613348565b60ff1681526020810191909152604001600020546001600160a01b0316905080611d2a57816040517f812281be00000000000000000000000000000000000000000000000000000000815260040161057791906138e8565b919050565b60606000611d6f8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d192505050565b9050805167ffffffffffffffff811115611d8b57611d8b6130fb565b604051908082528060200260200182016040528015611db4578160200160208202803683370190505b50915060005b8251811015611e275760dc6000838381518110611dd957611dd9613111565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110611e1457611e14613111565b6020908102919091010152600101611dba565b505092915050565b60a3544311611e6a576040517f557fd09100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4360a355334114611e9e576000356001600160e01b0319166002604051620f948f60ea1b815260040161057792919061337c565b6000611ea982612367565b9050611eb58282612a4d565b611ebd575050565b6000611ec96008611c9b565b90506000816001600160a01b031663060406186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f9190613195565b6001600160a01b038416600090815260a460209081526040808320848452909152812080546001019081905560a85492935091611f6d904390612bab565b905060a654820361203657846001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d9600285604051611fb492919061335e565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0387811660048301526024820184905260448201929092526000606482015290851690632f78204c90608401600060405180830381600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506121c7565b60a55482036121c757600061204b868561263f565b90508061210b57856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d960018660405161208e92919061335e565b60405180910390a2604051630bde081360e21b81526001600160a01b038781166004830152600060248301819052604483018190526064830152861690632f78204c90608401600060405180830381600087803b1580156120ee57600080fd5b505af1158015612102573d6000803e3d6000fd5b505050506121c5565b856001600160a01b03167f607adba66cff84b627e3537d1c17d088a98556bccd0536a2f3590c56329023d960078660405161214792919061335e565b60405180910390a260a754604051630bde081360e21b81526001600160a01b0388811660048301526024820185905260448201929092526001606482015290861690632f78204c90608401600060405180830381600087803b1580156121ac57600080fd5b505af11580156121c0573d6000803e3d6000fd5b505050505b505b50505050505b50565b7f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85008281557f91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac85018290556040518381527f3c00b102fc99ac0cdfbc7ab84559e84657b905a5b3183ff363b037402e0fc25c906020015b60405180910390a1505050565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084601081111561228757612287613348565b60ff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905581168260108111156122d5576122d5613348565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b61230b81611c9b565b6001600160a01b0316336001600160a01b0316146121cd576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610577939291906138f6565b6000612373600f611c9b565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156123d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610771919061392b565b6001600160a01b038216600090815260a460209081526040808320848452909152812054610e38565b6000818311612431576000610e38565b610e3882846138c1565b600061245061244a8486613948565b83612bc6565b949350505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633146124b2576000356001600160e01b0319166001604051620f948f60ea1b815260040161057792919061337c565b565b6000806124c1600f611c9b565b6040517f88660f2a0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291909116906388660f2a906024016040805180830381865afa158015612521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612545919061395b565b91509150915091565b6040516000906067906001908390612572908a908a908a908a908a90602401613987565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7fc356770000000000000000000000000000000000000000000000000000000017905280519091506125d7612bdc565b602083016020828483895afa6125ec57600094505b503d6125f757600093505b8361262e576040517f0fc2632100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5115159a9950505050505050505050565b6001600160a01b038216600090815260db6020908152604080832084845290915281205460ff16610e38565b601d829055601e81905560408051838152602081018390527f381ec200df2ed0875638486318f9f8a84e3550bdc686bf1400c9371a18d087f09101610e18565b806001600160a01b03163b6000036121cd576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610577565b60018390556002829055600381905560408051848152602081018490529081018290527f913da102149f952dde560cef3349db8e8002e9d580c41a7551d6d45329f4306b90606001612244565b8284111561278f576040517f87f6f0950000000000000000000000000000000000000000000000000000000081526001600160e01b0319600035166004820152602401610577565b60a584905560a683905560a782905560a88190556040805185815260208101859052908101839052606081018290527f442862e6143ad95854e7c13ff4947ec6e43bc87160e3b193e7c1abaf6e3aaa98906080016105e5565b82841115612822576040517f112af4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61271081111561285e576040517fe0b2228c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60dd84905560de83905560df82905560e08190556040805185815260208101859052908101839052606081018290527fe1f9c6c73554b5fa140eead3cfd4ec3e6d4824f3ed26fb25e38376f65b95470b906080016105e5565b60006128c3600a611c9b565b6040517fd78392f80000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063d78392f890602401602060405180830381865afa158015612924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190613195565b604051600090606990600190839061296c908a908a908a908a908a90602401613a3a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f7b47d06b0000000000000000000000000000000000000000000000000000000017905280519091506125d7612bdc565b60606129dd600f611c9b565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b8152600401612a089190613b1d565b600060405180830381865afa158015612a25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107719190810190613b6a565b6000336001600160a01b03841614801590612a715750336001600160a01b03831614155b8015612b075750612a826008611c9b565b6040517fe8712aa70000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063e8712aa790602401602060405180830381865afa158015612ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0791906136c2565b8015610e385750612b186005611c9b565b6040517f8d5b67590000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301524360248301529190911690638d5b675990604401602060405180830381865afa158015612b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba391906136c2565b159392505050565b600081600003612bbc576000610e38565b610e388284613948565b6000818310612bd55781610e38565b5090919050565b60405180602001604052806001906020820280368337509192915050565b6001600160a01b03811681146121cd57600080fd5b600080600060608486031215612c2457600080fd5b8335612c2f81612bfa565b95602085013595506040909401359392505050565b60008083601f840112612c5657600080fd5b50813567ffffffffffffffff811115612c6e57600080fd5b6020830191508360208260051b8501011115612c8957600080fd5b9250929050565b60008060208385031215612ca357600080fd5b823567ffffffffffffffff811115612cba57600080fd5b612cc685828601612c44565b90969095509350505050565b600060208284031215612ce457600080fd5b8135610e3881612bfa565b600080600060408486031215612d0457600080fd5b833567ffffffffffffffff811115612d1b57600080fd5b612d2786828701612c44565b909790965060209590950135949350505050565b60008083601f840112612d4d57600080fd5b50813567ffffffffffffffff811115612d6557600080fd5b602083019150836020828501011115612c8957600080fd5b600080600080600060608688031215612d9557600080fd5b8535612da081612bfa565b9450602086013567ffffffffffffffff80821115612dbd57600080fd5b612dc989838a01612d3b565b90965094506040880135915080821115612de257600080fd5b50612def88828901612d3b565b969995985093965092949392505050565b60008060408385031215612e1357600080fd5b8235612e1e81612bfa565b946020939093013593505050565b60008060408385031215612e3f57600080fd5b50508035926020909101359150565b803560118110611d2a57600080fd5b60008060408385031215612e7057600080fd5b612e7983612e4e565b91506020830135612e8981612bfa565b809150509250929050565b806080810183101561077157600080fd5b806040810183101561077157600080fd5b60008060008060008060008060006102a08a8c031215612ed557600080fd5b8935612ee081612bfa565b985060208a0135612ef081612bfa565b975060408a0135612f0081612bfa565b965060608a0135612f1081612bfa565b9550612f1f8b60808c01612e94565b9450612f2f8b6101008c01612ea5565b93506101a08a018b811115612f4357600080fd5b6101408b019350612f548c82612e94565b925050612f658b6102208c01612e94565b90509295985092959850929598565b60008060008060808587031215612f8a57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215612fbb57600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a031215612fed57600080fd5b8735612ff881612bfa565b9650602088013567ffffffffffffffff8082111561301557600080fd5b6130218b838c01612d3b565b909850965060408a0135955086915061303d8b60608c01612ea5565b945060a08a013591508082111561305357600080fd5b61305f8b838c01612ea5565b935060c08a013591508082111561307557600080fd5b506130828a828b01612ea5565b91505092959891949750929550565b6000602082840312156130a357600080fd5b610e3882612e4e565b60008151808452602080850194506020840160005b838110156130dd578151875295820195908201906001016130c1565b509495945050505050565b602081526000610e3860208301846130ac565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8183526000602080850194508260005b858110156130dd57813561314a81612bfa565b6001600160a01b031687529582019590820190600101613137565b604081526000613179604083018587613127565b828103602084015261318b81856130ac565b9695505050505050565b6000602082840312156131a757600080fd5b5051919050565b602081526000612450602083018486613127565b604051610180810167ffffffffffffffff811182821017156131e6576131e66130fb565b60405290565b6040805190810167ffffffffffffffff811182821017156131e6576131e66130fb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613238576132386130fb565b604052919050565b600067ffffffffffffffff82111561325a5761325a6130fb565b5060051b60200190565b80518015158114611d2a57600080fd5b6000602080838503121561328757600080fd5b825167ffffffffffffffff81111561329e57600080fd5b8301601f810185136132af57600080fd5b80516132c26132bd82613240565b61320f565b81815260059190911b820183019083810190878311156132e157600080fd5b928401925b82841015613306576132f784613264565b825292840192908401906132e6565b979650505050505050565b606081526000613325606083018688613127565b6020830194909452506040015292915050565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fd5b60408101600a841061337257613372613348565b9281526020015290565b6001600160e01b03198316815260408101600b831061339d5761339d613348565b8260208301529392505050565b8051611d2a81612bfa565b600067ffffffffffffffff8211156133cf576133cf6130fb565b50601f01601f191660200190565b60005b838110156133f85781810151838201526020016133e0565b50506000910152565b600082601f83011261341257600080fd5b81516134206132bd826133b5565b81815284602083860101111561343557600080fd5b6124508260208301602087016133dd565b60006020828403121561345857600080fd5b815167ffffffffffffffff8082111561347057600080fd5b90830190610180828603121561348557600080fd5b61348d6131c2565b613496836133aa565b81526134a4602084016133aa565b60208201526134b5604084016133aa565b60408201526134c6606084016133aa565b60608201526134d7608084016133aa565b608082015260a0830151828111156134ee57600080fd5b6134fa87828601613401565b60a08301525060c083015160c082015260e08301518281111561351c57600080fd5b61352887828601613401565b60e083015250610100915061353e8284016133aa565b918101919091526101208281015190820152610140808301519082015261016091820151918101919091529392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000838385526020808601955060208560051b8301018460005b8781101561362357848303601f19018952813536889003601e190181126135d957600080fd5b8701848101903567ffffffffffffffff8111156135f557600080fd5b80360382131561360457600080fd5b61360f858284613570565b9a86019a94505050908301906001016135b3565b5090979650505050505050565b60208082526000906060830183820185845b60028110156136b657868403601f19018352813536899003601e1901811261366957600080fd5b8801858101903567ffffffffffffffff81111561368557600080fd5b8060051b360382131561369757600080fd5b6136a2868284613599565b955050509184019190840190600101613642565b50919695505050505050565b6000602082840312156136d457600080fd5b610e3882613264565b600082601f8301126136ee57600080fd5b81356136fc6132bd826133b5565b81815284602083860101111561371157600080fd5b816020850160208301376000918101602001919091529392505050565b60006137386131ec565b80604084013681111561374a57600080fd5b845b818110156137fc57803567ffffffffffffffff8082111561376d5760008081fd5b9087019036601f8301126137815760008081fd5b813560206137916132bd83613240565b82815260059290921b840181019181810190368411156137b15760008081fd5b8286015b848110156137e9578035868111156137cd5760008081fd5b6137db3686838b01016136dd565b8452509183019183016137b5565b508952509096019550505060200161374c565b5090949350505050565b60006138106131ec565b80604084013681111561382257600080fd5b845b818110156137fc57803567ffffffffffffffff8111156138445760008081fd5b613850368289016136dd565b85525060209384019301613824565b60008060006060848603121561387457600080fd5b61387d84613264565b925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761077157610771613894565b8181038181111561077157610771613894565b601181106138e4576138e4613348565b9052565b6020810161077182846138d4565b6001600160e01b0319841681526060810161391460208301856138d4565b6001600160a01b0383166040830152949350505050565b60006020828403121561393d57600080fd5b8151610e3881612bfa565b8082018082111561077157610771613894565b6000806040838503121561396e57600080fd5b61397783613264565b91506020830151612e8981612bfa565b6001600160a01b03861681526060602082015260006139aa606083018688613570565b82810360408401526139bd818587613570565b98975050505050505050565b600081518084526139e18160208601602086016133dd565b601f01601f19169290920160200192915050565b600082604081018360005b6002811015613a2f578383038752613a198383516139c9565b6020978801979093509190910190600101613a00565b509095945050505050565b60c081526000613a4d60c08301886139c9565b60208781850152604084018760005b6002811015613a7957815183529183019190830190600101613a5c565b505050838203608085015281604081018760005b6002811015613afa578583038452815180518085529086019086850190600581901b8601880160005b82811015613ae457601f19888303018452613ad28286516139c9565b948a0194938a01939150600101613ab6565b5096880196955050509185019150600101613a8d565b505085810360a0870152613b0e81886139f5565b9b9a5050505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613b5e5783516001600160a01b031683529284019291840191600101613b39565b50909695505050505050565b60006020808385031215613b7d57600080fd5b825167ffffffffffffffff811115613b9457600080fd5b8301601f81018513613ba557600080fd5b8051613bb36132bd82613240565b81815260059190911b82018301908381019087831115613bd257600080fd5b928401925b82841015613306578351613bea81612bfa565b82529284019290840190613bd756fea2646970667358221220328be8ee6b210ea66eda1f1704a261d1897152a1e2aa57893e4ed9673803f4fb64736f6c63430008190033",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "bailOut(address)": {
        "details": "A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`."
      },
      "checkBailedOutAtPeriod(address,uint256)": {
        "details": "Returns the whether the `consensus` has been bailed out at the `period`."
      },
      "currentUnavailabilityIndicator(address)": {
        "details": "Returns the current unavailability indicator of a block producer."
      },
      "execResetCreditScores(address[])": {
        "details": "Resets the credit score for the revoked validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`."
      },
      "execUpdateCreditScores(address[],uint256)": {
        "details": "Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getCreditScore(address)": {
        "details": "Returns the current credit score of the validator."
      },
      "getCreditScoreConfigs()": {
        "details": "Returns the configs related to credit score.",
        "returns": {
          "bailOutCostMultiplier_": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "cutOffPercentageAfterBailout_": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.",
          "gainCreditScore_": "The score to gain per period.",
          "maxCreditScore_": "The max number of credit score that a validator can hold."
        }
      },
      "getDoubleSignSlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "params": {
          "_doubleSigningOffsetLimitBlock": "The number of block that the current block is at most far from the double signing block."
        },
        "returns": {
          "doubleSigningJailUntilBlock_": "The block number that the punished validator will be jailed until, due to double signing.",
          "slashDoubleSignAmount_": "The amount of RON to slash double sign."
        }
      },
      "getFastFinalitySlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "fastFinalityJailUntilBlock_": "The block number that the punished validator will be jailed until, due to malicious fast finality.",
          "slashFastFinalityAmount_": "The amount of RON to slash fast finality."
        }
      },
      "getManyCreditScores(address[])": {
        "details": "Returns the current credit score of a list of validators."
      },
      "getRandomBeaconSlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "config": "The random beacon slash configs."
        }
      },
      "getUnavailabilityIndicator(address,uint256)": {
        "details": "Returns the unavailability indicator in the period `period` of a block producer."
      },
      "getUnavailabilitySlashingConfigs()": {
        "details": "Returns the configs related to block producer slashing.",
        "returns": {
          "jailDurationForUnavailabilityTier2Threshold_": "The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.",
          "slashAmountForUnavailabilityTier2Threshold_": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with tier-2 or tier-3.",
          "unavailabilityTier1Threshold_": "The mining reward will be deprecated, if (s)he missed more than this threshold. This threshold is applied for tier-1 and tier-3 slash.",
          "unavailabilityTier2Threshold_": " The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash."
        }
      },
      "initialize(address,address,address,address,uint256[4],uint256[2],uint256[3],uint256[4],uint256[4])": {
        "details": "Initializes the contract storage."
      },
      "lastUnavailabilitySlashedBlock()": {
        "details": "Returns the last block that a block producer is slashed for unavailability."
      },
      "precompileValidateDoubleSignAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "precompileValidateFastFinalityAddress()": {
        "details": "Gets the address of the precompile of validating double sign evidence"
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setCreditScoreConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.",
        "params": {
          "_bailOutMultiplier": "The number that will be multiplied with the remaining jailed time to get the cost of bailing out.",
          "_cutOffPercentage": "The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.",
          "_gainScore": "The score to gain per period.",
          "_maxScore": "The max number of credit score that a validator can hold."
        }
      },
      "setDoubleSignSlashingConfigs(uint256,uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.",
        "params": {
          "_doubleSigningOffsetLimitBlock": "The number of block that the current block is at most far from the double signing block.",
          "_jailUntilBlock": "The block number that the punished validator will be jailed until, due to double signing.",
          "_slashAmount": "The amount of RON to slash double sign."
        }
      },
      "setFastFinalitySlashingConfigs(uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `FastFinalitySlashingConfigsUpdated`.",
        "params": {
          "jailUntilBlock": "The block number that the punished validator will be jailed until, due to fast finality.",
          "slashAmount": "The amount of RON to slash fast finality."
        }
      },
      "setRandomBeaconSlashingConfigs(uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `RandomBeaconSlashingConfigsUpdated`.",
        "params": {
          "activatedAtPeriod": "The period to activate the slashing.",
          "slashAmount": "The amount of RON to slash random beacon."
        }
      },
      "setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)": {
        "details": "Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.",
        "params": {
          "jailDurationForTier2Threshold": "The number of blocks to jail a block producer when (s)he is slashed tier-2.",
          "slashAmountForTier2Threshold": "The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.",
          "tier1Threshold": "The mining reward will be deprecated, if (s)he missed more than this threshold.",
          "tier2Threshold": "The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold."
        }
      },
      "slashDoubleSign(address,bytes,bytes)": {
        "details": "Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid."
      },
      "slashFastFinality(address,bytes,uint256,bytes32[2],bytes[][2],bytes[2])": {
        "details": "Slashes for fast finality. Requirements: - Only whitelisted addresses are allowed to call. Emits the event `Slashed` if the fast finality evidence of the two headers valid."
      },
      "slashRandomBeacon(address,uint256)": {
        "details": "Slashes for random beacon. Requirements: - Only RandomBeacon contract is allowed to call. Emits the event `Slashed`.",
        "params": {
          "period": "The current period.",
          "validatorId": "The id of the validator."
        }
      },
      "slashUnavailability(address)": {
        "details": "Slashes for unavailability by increasing the counter of block producer `consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached."
      }
    },
    "events": {
      "BailedOut(address,uint256,uint256)": {
        "details": "Emitted when a validator bailed out of jail."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details."
      },
      "CreditScoresUpdated(address[],uint256[])": {
        "details": "Emitted the credit score of validators is updated."
      },
      "DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)": {
        "details": "Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs` for param details."
      },
      "FastFinalitySlashingConfigsUpdated(uint256,uint256)": {
        "details": "Emitted when the configs to slash fast finality is updated. See the method `getFastFinalitySlashingConfigs` for param details."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RandomBeaconSlashingConfigsUpdated(uint256)": {
        "details": "Emitted when the configs to slash random beacon is updated. See the method `getRandomBeaconSlashingConfigs` for param details."
      },
      "Slashed(address,uint8,uint256)": {
        "details": "Emitted when the validator is slashed."
      },
      "SlashingBeaconSkipped(uint256,address)": {
        "details": "Emitted when current period is less than `activatedAtPeriod` and validator is not slashed."
      },
      "UnavailabilitySlashingConfigsUpdated(uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs` for param details."
      }
    },
    "errors": {
      "ErrCallPrecompiled()": [
        {
          "details": "Error of call to precompile fails."
        }
      ],
      "ErrCallerMustBeJailedInTheCurrentPeriod()": [
        {
          "details": "Error thrown when the caller must be jailed in the current period."
        }
      ],
      "ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock()": [
        {
          "details": "Error thrown when attempting to slash a validator twice or slash more than one validator in one block."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrEvidenceAlreadySubmitted()": [
        {
          "details": "Error thrown when evidence has already been submitted."
        }
      ],
      "ErrInsufficientCreditScoreToBailOut()": [
        {
          "details": "Error thrown when the caller's credit score is insufficient to bail out a situation."
        }
      ],
      "ErrInvalidArguments(bytes4)": [
        {
          "details": "Error indicating that arguments are invalid."
        }
      ],
      "ErrInvalidCreditScoreConfig()": [
        {
          "details": "Error thrown when an invalid credit score configuration is provided."
        }
      ],
      "ErrInvalidCutOffPercentageConfig()": [
        {
          "details": "Error thrown when an invalid cut-off percentage configuration is provided."
        }
      ],
      "ErrInvalidThreshold(bytes4)": [
        {
          "details": "Error indicating that the provided threshold is invalid for a specific function signature.",
          "params": {
            "msgSig": "The function signature (bytes4) that the invalid threshold applies to."
          }
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrUnregisteredPublicKey()": [
        {
          "details": "Error thrown when public key in evidence is not registered."
        }
      ],
      "ErrValidatorHasBailedOutPreviously()": [
        {
          "details": "Error thrown when a validator has previously bailed out."
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrCallPrecompiled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeJailedInTheCurrentPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrEvidenceAlreadySubmitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientCreditScoreToBailOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCreditScoreConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCutOffPercentageConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrInvalidThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnregisteredPublicKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrValidatorHasBailedOutPreviously\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedCreditScore\",\"type\":\"uint256\"}],\"name\":\"BailedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCreditScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailOutCostMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cutOffPercentageAfterBailout\",\"type\":\"uint256\"}],\"name\":\"CreditScoreConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"creditScores\",\"type\":\"uint256[]\"}],\"name\":\"CreditScoresUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashDoubleSignAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doubleSigningJailUntilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"doubleSigningOffsetLimitBlock\",\"type\":\"uint256\"}],\"name\":\"DoubleSignSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashFastFinalityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastFinalityJailUntilBlock\",\"type\":\"uint256\"}],\"name\":\"FastFinalitySlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashRandomBeaconAmount\",\"type\":\"uint256\"}],\"name\":\"RandomBeaconSlashingConfigsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseSlash.SlashType\",\"name\":\"slashType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"}],\"name\":\"SlashingBeaconSkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier1Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashAmountForUnavailabilityTier2Threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailDurationForUnavailabilityTier2Threshold\",\"type\":\"uint256\"}],\"name\":\"UnavailabilitySlashingConfigsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"bailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"checkBailedOutAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"currentUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validatorIds\",\"type\":\"address[]\"}],\"name\":\"execResetCreditScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validatorIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execUpdateCreditScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"getCreditScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditScoreConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gainCreditScore_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCreditScore_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bailOutCostMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cutOffPercentageAfterBailout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDoubleSignSlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashDoubleSignAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doubleSigningJailUntilBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"doubleSigningOffsetLimitBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFastFinalitySlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slashFastFinalityAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fastFinalityJailUntilBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusAddrs\",\"type\":\"address[]\"}],\"name\":\"getManyCreditScores\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resultList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomBeaconSlashingConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activatedAtPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct ISlashRandomBeacon.SlashRandomBeaconConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getUnavailabilityIndicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnavailabilitySlashingConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unavailabilityTier1Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unavailabilityTier2Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashAmountForUnavailabilityTier2Threshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailDurationForUnavailabilityTier2Threshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__validatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninGovernanceAdminContract\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_doubleSignSlashingConfigs\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_unavailabilitySlashingConfigs\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_creditScoreConfigs\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roninGovernanceAdminContract\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileContract\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"randomBeaconContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomBeaconSlashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activatedAtPeriod\",\"type\":\"uint256\"}],\"name\":\"initializeV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnavailabilitySlashedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileValidateDoubleSignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precompileValidateFastFinalityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gainScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bailOutMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cutOffPercentage\",\"type\":\"uint256\"}],\"name\":\"setCreditScoreConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailUntilBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offsetLimitBlock\",\"type\":\"uint256\"}],\"name\":\"setDoubleSignSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setFastFinalitySlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activatedAtPeriod\",\"type\":\"uint256\"}],\"name\":\"setRandomBeaconSlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier1Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashAmountForTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailDurationForTier2\",\"type\":\"uint256\"}],\"name\":\"setUnavailabilitySlashingConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"header1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"header2\",\"type\":\"bytes\"}],\"name\":\"slashDoubleSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"voterPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"targetBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[2]\",\"name\":\"targetBlockHash\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes[][2]\",\"name\":\"listOfPublicKey\",\"type\":\"bytes[][2]\"},{\"internalType\":\"bytes[2]\",\"name\":\"aggregatedSignature\",\"type\":\"bytes[2]\"}],\"name\":\"slashFastFinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"slashRandomBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"slashUnavailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrCallPrecompiled()\":[{\"details\":\"Error of call to precompile fails.\"}],\"ErrCallerMustBeJailedInTheCurrentPeriod()\":[{\"details\":\"Error thrown when the caller must be jailed in the current period.\"}],\"ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock()\":[{\"details\":\"Error thrown when attempting to slash a validator twice or slash more than one validator in one block.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrEvidenceAlreadySubmitted()\":[{\"details\":\"Error thrown when evidence has already been submitted.\"}],\"ErrInsufficientCreditScoreToBailOut()\":[{\"details\":\"Error thrown when the caller's credit score is insufficient to bail out a situation.\"}],\"ErrInvalidArguments(bytes4)\":[{\"details\":\"Error indicating that arguments are invalid.\"}],\"ErrInvalidCreditScoreConfig()\":[{\"details\":\"Error thrown when an invalid credit score configuration is provided.\"}],\"ErrInvalidCutOffPercentageConfig()\":[{\"details\":\"Error thrown when an invalid cut-off percentage configuration is provided.\"}],\"ErrInvalidThreshold(bytes4)\":[{\"details\":\"Error indicating that the provided threshold is invalid for a specific function signature.\",\"params\":{\"msgSig\":\"The function signature (bytes4) that the invalid threshold applies to.\"}}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrUnregisteredPublicKey()\":[{\"details\":\"Error thrown when public key in evidence is not registered.\"}],\"ErrValidatorHasBailedOutPreviously()\":[{\"details\":\"Error thrown when a validator has previously bailed out.\"}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}]},\"events\":{\"BailedOut(address,uint256,uint256)\":{\"details\":\"Emitted when a validator bailed out of jail.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"CreditScoreConfigsUpdated(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\"},\"CreditScoresUpdated(address[],uint256[])\":{\"details\":\"Emitted the credit score of validators is updated.\"},\"DoubleSignSlashingConfigsUpdated(uint256,uint256,uint256)\":{\"details\":\"Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs` for param details.\"},\"FastFinalitySlashingConfigsUpdated(uint256,uint256)\":{\"details\":\"Emitted when the configs to slash fast finality is updated. See the method `getFastFinalitySlashingConfigs` for param details.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RandomBeaconSlashingConfigsUpdated(uint256)\":{\"details\":\"Emitted when the configs to slash random beacon is updated. See the method `getRandomBeaconSlashingConfigs` for param details.\"},\"Slashed(address,uint8,uint256)\":{\"details\":\"Emitted when the validator is slashed.\"},\"SlashingBeaconSkipped(uint256,address)\":{\"details\":\"Emitted when current period is less than `activatedAtPeriod` and validator is not slashed.\"},\"UnavailabilitySlashingConfigsUpdated(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs` for param details.\"}},\"kind\":\"dev\",\"methods\":{\"bailOut(address)\":{\"details\":\"A slashed validator use this method to get out of jail. Requirements: - The `_consensusAddr` must be a validator. - Only validator's admin can call this method. Emits the event `BailedOut`.\"},\"checkBailedOutAtPeriod(address,uint256)\":{\"details\":\"Returns the whether the `consensus` has been bailed out at the `period`.\"},\"currentUnavailabilityIndicator(address)\":{\"details\":\"Returns the current unavailability indicator of a block producer.\"},\"execResetCreditScores(address[])\":{\"details\":\"Resets the credit score for the revoked validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`.\"},\"execUpdateCreditScores(address[],uint256)\":{\"details\":\"Updates the credit score for the validators. Requirements: - Only validator contract can call this method. - This method is only called at the end of each period. Emits the event `CreditScoresUpdated`.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getCreditScore(address)\":{\"details\":\"Returns the current credit score of the validator.\"},\"getCreditScoreConfigs()\":{\"details\":\"Returns the configs related to credit score.\",\"returns\":{\"bailOutCostMultiplier_\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"cutOffPercentageAfterBailout_\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\",\"gainCreditScore_\":\"The score to gain per period.\",\"maxCreditScore_\":\"The max number of credit score that a validator can hold.\"}},\"getDoubleSignSlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"params\":{\"_doubleSigningOffsetLimitBlock\":\"The number of block that the current block is at most far from the double signing block.\"},\"returns\":{\"doubleSigningJailUntilBlock_\":\"The block number that the punished validator will be jailed until, due to double signing.\",\"slashDoubleSignAmount_\":\"The amount of RON to slash double sign.\"}},\"getFastFinalitySlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"fastFinalityJailUntilBlock_\":\"The block number that the punished validator will be jailed until, due to malicious fast finality.\",\"slashFastFinalityAmount_\":\"The amount of RON to slash fast finality.\"}},\"getManyCreditScores(address[])\":{\"details\":\"Returns the current credit score of a list of validators.\"},\"getRandomBeaconSlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"config\":\"The random beacon slash configs.\"}},\"getUnavailabilityIndicator(address,uint256)\":{\"details\":\"Returns the unavailability indicator in the period `period` of a block producer.\"},\"getUnavailabilitySlashingConfigs()\":{\"details\":\"Returns the configs related to block producer slashing.\",\"returns\":{\"jailDurationForUnavailabilityTier2Threshold_\":\"The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.\",\"slashAmountForUnavailabilityTier2Threshold_\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with tier-2 or tier-3.\",\"unavailabilityTier1Threshold_\":\"The mining reward will be deprecated, if (s)he missed more than this threshold. This threshold is applied for tier-1 and tier-3 slash.\",\"unavailabilityTier2Threshold_\":\" The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\"}},\"initialize(address,address,address,address,uint256[4],uint256[2],uint256[3],uint256[4],uint256[4])\":{\"details\":\"Initializes the contract storage.\"},\"lastUnavailabilitySlashedBlock()\":{\"details\":\"Returns the last block that a block producer is slashed for unavailability.\"},\"precompileValidateDoubleSignAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"precompileValidateFastFinalityAddress()\":{\"details\":\"Gets the address of the precompile of validating double sign evidence\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setCreditScoreConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to credit score. Requirements: - The method caller is admin. Emits the event `CreditScoreConfigsUpdated`.\",\"params\":{\"_bailOutMultiplier\":\"The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\",\"_cutOffPercentage\":\"The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\",\"_gainScore\":\"The score to gain per period.\",\"_maxScore\":\"The max number of credit score that a validator can hold.\"}},\"setDoubleSignSlashingConfigs(uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `DoubleSignSlashingConfigsUpdated`.\",\"params\":{\"_doubleSigningOffsetLimitBlock\":\"The number of block that the current block is at most far from the double signing block.\",\"_jailUntilBlock\":\"The block number that the punished validator will be jailed until, due to double signing.\",\"_slashAmount\":\"The amount of RON to slash double sign.\"}},\"setFastFinalitySlashingConfigs(uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `FastFinalitySlashingConfigsUpdated`.\",\"params\":{\"jailUntilBlock\":\"The block number that the punished validator will be jailed until, due to fast finality.\",\"slashAmount\":\"The amount of RON to slash fast finality.\"}},\"setRandomBeaconSlashingConfigs(uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `RandomBeaconSlashingConfigsUpdated`.\",\"params\":{\"activatedAtPeriod\":\"The period to activate the slashing.\",\"slashAmount\":\"The amount of RON to slash random beacon.\"}},\"setUnavailabilitySlashingConfigs(uint256,uint256,uint256,uint256)\":{\"details\":\"Sets the configs to slash block producers. Requirements: - The method caller is admin. Emits the event `BridgeOperatorSlashingConfigsUpdated`.\",\"params\":{\"jailDurationForTier2Threshold\":\"The number of blocks to jail a block producer when (s)he is slashed tier-2.\",\"slashAmountForTier2Threshold\":\"The amount of RON to deduct from self-staking of a block producer when (s)he is slashed tier-2.\",\"tier1Threshold\":\"The mining reward will be deprecated, if (s)he missed more than this threshold.\",\"tier2Threshold\":\"The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted self-staking if (s)he misses more than this threshold.\"}},\"slashDoubleSign(address,bytes,bytes)\":{\"details\":\"Slashes for double signing. Requirements: - The method caller is coinbase. Emits the event `Slashed` if the double signing evidence of the two headers valid.\"},\"slashFastFinality(address,bytes,uint256,bytes32[2],bytes[][2],bytes[2])\":{\"details\":\"Slashes for fast finality. Requirements: - Only whitelisted addresses are allowed to call. Emits the event `Slashed` if the fast finality evidence of the two headers valid.\"},\"slashRandomBeacon(address,uint256)\":{\"details\":\"Slashes for random beacon. Requirements: - Only RandomBeacon contract is allowed to call. Emits the event `Slashed`.\",\"params\":{\"period\":\"The current period.\",\"validatorId\":\"The id of the validator.\"}},\"slashUnavailability(address)\":{\"details\":\"Slashes for unavailability by increasing the counter of block producer `consensusAddr`. Requirements: - The method caller is coinbase. Emits the event `Slashed` when the threshold is reached.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/slash-indicator/SlashIndicator.sol\":\"SlashIndicator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/\",\":@contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":@fdk/=lib/foundry-deployment-kit/script/\",\":@openzeppelin-v5/contracts/=lib/oz-v5/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":@solady/=lib/foundry-deployment-kit/lib/solady/src/\",\":chainlink/=lib/chainlink/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/oz-v5/lib/erc4626-tests/\",\":forge-std/=lib/foundry-deployment-kit/lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":oz-v5/=lib/oz-v5/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":safe-smart-account/contracts/=lib/safe-smart-account/contracts/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/foundry-deployment-kit/lib/solady/src/\"]},\"sources\":{\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) { }\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xeac1fc1818ca3720fff47e43270accaee506dbedabc25a4f67476d49bd6ef7f3\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address payable contract_) {\\n    contract_ = payable(_getContractMap()[uint8(contractType)]);\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x53b9c2c44f39fa16fd4582b4667e808b8ab7c43437c263b59b5cbf5d2df47e78\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../udvts/Types.sol\\\";\\n\\ninterface IMaintenance {\\n  /**\\n   * @dev Error thrown when attempting to exit maintenance status while not in maintenance duration.\\n   */\\n  error ErrNotOnMaintenance();\\n  /**\\n   * @dev Error thrown when attempting to schedule an already scheduled event.\\n   */\\n  error ErrAlreadyScheduled();\\n\\n  /**\\n   * @dev Error thrown when referring to a non-existent schedule.\\n   */\\n  error ErrUnexistedSchedule();\\n\\n  /**\\n   * @dev Error thrown when the end block of a schedule is out of range.\\n   */\\n  error ErrEndBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when the start block of a schedule is out of range.\\n   */\\n  error ErrStartBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when attempting to initiate maintenance while already in maintenance mode.\\n   */\\n  error ErrAlreadyOnMaintenance();\\n\\n  /**\\n   * @dev Error thrown when attempting an action before the cooldown period has ended.\\n   */\\n  error ErrCooldownTimeNotYetEnded();\\n\\n  /**\\n   * @dev Error thrown when the total number of schedules exceeds the limit.\\n   */\\n  error ErrTotalOfSchedulesExceeded();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration is specified.\\n   */\\n  error ErrInvalidMaintenanceDuration();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration configuration is provided.\\n   */\\n  error ErrInvalidMaintenanceDurationConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid offset is specified to start the schedule configurations.\\n   */\\n  error ErrInvalidOffsetToStartScheduleConfigs();\\n\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is early exit in maintenance duration.\\n  event MaintenanceExited(address indexed cid);\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed cid, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed cid);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Exits the maintenance status.\\n   * @param consensusAddr The address of the consensus to exit maintenance status for.\\n   */\\n  function exitMaintenance(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator whose id `validatorId` maintained at the block number `_block`.\\n   */\\n  function checkMaintainedById(address validatorId, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `k` or not.\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata consensusAddrList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedById(\\n    address[] calldata candidateIdList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata _consensusAddrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has finished cooldown.\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has schedule.\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `consensusAddr`.\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedule() external view returns (uint256 count);\\n\\n  /**\\n   * @dev Returns the cooldown to maintain in seconds.\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedules_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `startedAtBlock` to `endedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - The candidate `consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - A schedule for the `consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x5dd7249bb4cb2b9d991d0eb89d7f9eb481b4f004bf5a4f00960f5aa8d6286573\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Validator\\u2019s admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Timestamp of last change of any profile info.\\n    uint256 profileLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n    /// @dev Old consensus\\n    TConsensus oldConsensus;\\n    /// @dev Timestamp where the profile is registered.\\n    uint256 registeredAt;\\n    /// @dev VRF key hash for the profile.\\n    bytes32 vrfKeyHash;\\n    /// @dev Timestamp of last change of VRF key hash. Only used in the logic of Beacon. Not used for checking for cooldown of updating the profile.\\n    uint256 vrfKeyHashLastChange;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the consensus of a non-governor profile is changed.\\n  event ConsensusAddressOfNonGovernorChanged(address indexed id);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the VRF key hash of the `id` is changed.\\n  event VRFKeyHashChanged(address indexed id, bytes32 vrfKeyHash);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change any address or pubkey in the profile because cooldown is not ended.\\n  error ErrProfileChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrDuplicatedVRFKeyHash(bytes32 vrfKeyHash);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n  error ErrLookUpIdFailed(TConsensus consensus);\\n  error ErrLookUpIdFromVRFKeyFailed(bytes32 vrfKeyHash);\\n  error ErrValidatorOnRenunciation(address cid);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to query required random beacon info from `vrfKeyHash`.\\n  function getVRFKeyHash2BeaconInfo(bytes32 vrfKeyHash)\\n    external\\n    view\\n    returns (address id, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query required random beacon info from `id` address.\\n  function getId2BeaconInfo(address id)\\n    external\\n    view\\n    returns (bytes32 vrfKeyHash, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query `admin` from `id` address.\\n  function getId2Admin(address id) external view returns (address);\\n\\n  /// @dev Getter to query `treasury` from `id` address.\\n  function getId2Treasury(address id) external view returns (address payable);\\n\\n  /// @dev Getter to query `pubkey` from `id` address.\\n  function getId2Pubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `profileLastChange` from `id` address.\\n  function getId2ProfileLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `oldPubkey` from `id` address.\\n  function getId2OldPubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `oldConsensus` from `id` address.\\n  function getId2OldConsensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `registeredAt` from `id` address.\\n  function getId2RegisteredAt(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `consensus` from `id` address.\\n  function getId2Consensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `vrfKeyHash` from `id` address.\\n  function getId2VRFKeyHash(address id) external view returns (bytes32);\\n\\n  /// @dev Getter to query `vrfKeyHashLastChange` from `id` address.\\n  function getId2VRFKeyHashLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to batch query from `id` to `registeredAt`.\\n  function getManyId2RegisteredAt(address[] calldata idList) external view returns (uint256[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `admin`, return address(0) if the profile not exist.\\n  function getManyId2Admin(address[] calldata idList) external view returns (address[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address, revert if not found.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address, revert if not found.\\n  function getVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address.\\n  function tryGetVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeAdminAddr(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @notice The candidate admin changes the VRF key hash.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New VRF key hash must not be duplicated.\\n   * - The VRF key hash change cooldown must be ended.\\n   */\\n  function changeVRFKeyHash(address id, bytes32 vrfKeyHash) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setCooldownConfig(uint256 cooldown) external;\\n\\n  /**\\n   * @dev Returns the config of cool down on change profile info.\\n   */\\n  function getCooldownConfig() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x13528cbc90483bb8db8ba1b1195b6fedfac874432df2814ecc4e32decf596891\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0xd9dc4bcb05f8208ba64cc249e99c650aa0507342c3596c4b5f5522545c01e689\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address payable contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x3cb6bc67853229163685bbba63469fb2ef103bf1cbfec0fed3e9e4686049f45b\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3,\\n    FAST_FINALITY,\\n    RANDOM_BEACON\\n  }\\n\\n  /// @dev Error thrown when evidence has already been submitted.\\n  error ErrEvidenceAlreadySubmitted();\\n\\n  /// @dev Error thrown when public key in evidence is not registered.\\n  error ErrUnregisteredPublicKey();\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed cid, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x9ed2a219d6282772992662d28e4f9043f5e7b08dbdd8ae004be129e23c1189fe\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICreditScore {\\n  /**\\n   * @dev Error thrown when an invalid credit score configuration is provided.\\n   */\\n  error ErrInvalidCreditScoreConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid cut-off percentage configuration is provided.\\n   */\\n  error ErrInvalidCutOffPercentageConfig();\\n\\n  /**\\n   * @dev Error thrown when the caller's credit score is insufficient to bail out a situation.\\n   */\\n  error ErrInsufficientCreditScoreToBailOut();\\n\\n  /**\\n   * @dev Error thrown when a validator has previously bailed out.\\n   */\\n  error ErrValidatorHasBailedOutPreviously();\\n\\n  /**\\n   * @dev Error thrown when the caller must be jailed in the current period.\\n   */\\n  error ErrCallerMustBeJailedInTheCurrentPeriod();\\n\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore, uint256 maxCreditScore, uint256 bailOutCostMultiplier, uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated.\\n  event CreditScoresUpdated(address[] cids, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail.\\n  event BailedOut(address indexed cid, uint256 period, uint256 usedCreditScore);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execUpdateCreditScores(address[] calldata validatorIds, uint256 period) external;\\n\\n  /**\\n   * @dev Resets the credit score for the revoked validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execResetCreditScores(address[] calldata validatorIds) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(TConsensus consensus) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(TConsensus[] calldata consensusAddrs)\\n    external\\n    view\\n    returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `consensus` has been bailed out at the `period`.\\n   */\\n  function checkBailedOutAtPeriod(TConsensus consensus, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x169144782436806217f74b40dc72abdadc9d55f7bf5ce3331e303c4b59dbde1b\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(\\n    uint256 slashDoubleSignAmount, uint256 doubleSigningJailUntilBlock, uint256 doubleSigningOffsetLimitBlock\\n  );\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(TConsensus _validatorAddr, bytes calldata _header1, bytes calldata _header2) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _slashDoubleSignAmount,\\n      uint256 _doubleSigningJailUntilBlock,\\n      uint256 _doubleSigningOffsetLimitBlock\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _doubleSigningOffsetLimitBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1c083f88ecfaa5e476bbc3501fea7b6ea8d8687d1103651c54e4e04de5cfd1e1\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashFastFinality.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashFastFinality is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash fast finality is updated. See the method `getFastFinalitySlashingConfigs`\\n   * for param details.\\n   */\\n  event FastFinalitySlashingConfigsUpdated(uint256 slashFastFinalityAmount, uint256 fastFinalityJailUntilBlock);\\n\\n  /**\\n   * @dev Slashes for fast finality.\\n   *\\n   * Requirements:\\n   * - Only whitelisted addresses are allowed to call.\\n   *\\n   * Emits the event `Slashed` if the fast finality evidence of the two headers valid.\\n   */\\n  function slashFastFinality(\\n    TConsensus consensusAddr,\\n    bytes calldata voterPublicKey,\\n    uint256 targetBlockNumber,\\n    bytes32[2] calldata targetBlockHash,\\n    bytes[][2] calldata listOfPublicKey,\\n    bytes[2] calldata aggregatedSignature\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return slashFastFinalityAmount The amount of RON to slash fast finality.\\n   * @return fastFinalityJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * malicious fast finality.\\n   */\\n  function getFastFinalitySlashingConfigs()\\n    external\\n    view\\n    returns (uint256 slashFastFinalityAmount, uint256 fastFinalityJailUntilBlock);\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `FastFinalitySlashingConfigsUpdated`.\\n   *\\n   * @param slashAmount The amount of RON to slash fast finality.\\n   * @param jailUntilBlock The block number that the punished validator will be jailed until, due to fast finality.\\n   *\\n   */\\n  function setFastFinalitySlashingConfigs(uint256 slashAmount, uint256 jailUntilBlock) external;\\n}\\n\",\"keccak256\":\"0xaa45b7bdd92b68161124ac9db3ed0d3c87e2297f4b22eb42eee4abc2de5e6b14\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is ISlashDoubleSign, ISlashUnavailability, ICreditScore { }\\n\",\"keccak256\":\"0x5fb033140845400bd071a7d306436a1861058d431f4c4a65e25b5638d34ea103\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashRandomBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IBaseSlash } from \\\"./IBaseSlash.sol\\\";\\n\\ninterface ISlashRandomBeacon is IBaseSlash {\\n  struct SlashRandomBeaconConfig {\\n    uint256 _slashAmount;\\n    uint256 _activatedAtPeriod;\\n  }\\n\\n  /**\\n   * @dev Emitted when the configs to slash random beacon is updated. See the method `getRandomBeaconSlashingConfigs`\\n   * for param details.\\n   */\\n  event RandomBeaconSlashingConfigsUpdated(uint256 slashRandomBeaconAmount);\\n\\n  /**\\n   * @dev Emitted when current period is less than `activatedAtPeriod` and validator is not slashed.\\n   */\\n  event SlashingBeaconSkipped(uint256 indexed period, address indexed validatorId);\\n\\n  /**\\n   * @dev Slashes for random beacon.\\n   *\\n   * Requirements:\\n   * - Only RandomBeacon contract is allowed to call.\\n   *\\n   * Emits the event `Slashed`.\\n   *\\n   * @param validatorId The id of the validator.\\n   * @param period The current period.\\n   */\\n  function slashRandomBeacon(address validatorId, uint256 period) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return config The random beacon slash configs.\\n   *\\n   */\\n  function getRandomBeaconSlashingConfigs() external view returns (SlashRandomBeaconConfig memory config);\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `RandomBeaconSlashingConfigsUpdated`.\\n   *\\n   * @param slashAmount The amount of RON to slash random beacon.\\n   * @param activatedAtPeriod The period to activate the slashing.\\n   */\\n  function setRandomBeaconSlashingConfigs(uint256 slashAmount, uint256 activatedAtPeriod) external;\\n}\\n\",\"keccak256\":\"0xdc2a7093be8cb5d40648f081ab3d8342777d213a790877d836575546ef003739\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Error thrown when attempting to slash a validator twice or slash more than one validator in one block.\\n   */\\n  error ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock();\\n\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability indicator in the period `period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(TConsensus consensusAddr, uint256 period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold. This threshold is applied for tier-1 and tier-3 slash.\\n   * @return unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   * @return slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed with tier-2 or tier-3.\\n   * @return jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed with tier-2 or tier-3.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 unavailabilityTier1Threshold,\\n      uint256 unavailabilityTier2Threshold,\\n      uint256 slashAmountForUnavailabilityTier2Threshold,\\n      uint256 jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 tier1Threshold,\\n    uint256 tier2Threshold,\\n    uint256 slashAmountForTier2Threshold,\\n    uint256 jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1a30a9edd2eb5593e1da65210dcd712173b9702d6814f4fb31f800efb5f2098b\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfoById(address cid) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x995ebd44ad76f770f204e41833c3abe80da9b9a7d2465bb02a78a5d52ad4098d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeAdminAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddr(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddr(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeTreasuryAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddr(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xeb30738d0fdf8b2fc08241326bffa251128a13cb61d1878f864d062d80c10389\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(address indexed cid, uint256 rewardAmount, BlockRewardDeprecatedType deprecatedType);\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid, address indexed bridgeOperator, address indexed recipientAddr, uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount, address[] cids, uint256[] amounts, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x03be261e34fe05476a0ef7475c7676064be005ad4328b53796146a29716dea19\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(address indexed cid, address indexed recipient, uint256 unlockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid, address indexed recipient, uint256 unlockedAmount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x1e702fcc28ecab3925b459cc1b9dd242308d7d9da55d4fd30c8b0f8382bc6c12\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{ }\\n\",\"keccak256\":\"0xc4c89daac6da524c3ca3c64923d2aa36d092874a0afe20d5c9fa28aa57b8aafe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(TConsensus addr)\\n    external\\n    view\\n    returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcaf9e1294ce8e49bb5a95201face19e11b659fa40dd1e79971bdb9429b2e917d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the consensus address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the id is block producer or not.\\n   */\\n  function isBlockProducerById(address id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa81c50d30de1e9475d868f3c1930aa5ba2a74024eba27e0d33bd62dcc799a764\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xb6ca1ee184facb21437c9703c2041019cbd9b58a27f09efdcbfa5704f2b7716f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LibArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IndexMap } from \\\"./LibIndexMap.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibArray\\n * @dev A library for array-related utility functions in Solidity.\\n */\\nlibrary LibArray {\\n  /**\\n   * @dev Error indicating a length mismatch between two arrays.\\n   */\\n  error ErrLengthMismatch();\\n\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Calculates the sum of an array of uint256 values.\\n   *\\n   * Modified from: https://docs.soliditylang.org/en/v0.8.25/assembly.html#example\\n   *\\n   * @param data The array of uint256 values for which the sum is calculated.\\n   * @return result The sum of the provided array.\\n   */\\n  function sum(uint256[] memory data) internal pure returns (uint256 result) {\\n    assembly (\\\"memory-safe\\\") {\\n      // Load the length (first 32 bytes)\\n      let len := mload(data)\\n      let dataElementLocation := add(data, 0x20)\\n\\n      // Iterate until the bound is not met.\\n      for { let end := add(dataElementLocation, mul(len, 0x20)) } lt(dataElementLocation, end) {\\n        dataElementLocation := add(dataElementLocation, 0x20)\\n      } { result := add(result, mload(dataElementLocation)) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    uint256 length = A.length;\\n    if (length == 0) return false;\\n\\n    unchecked {\\n      for (uint256 i; i < length - 1; ++i) {\\n        for (uint256 j = i + 1; j < length; ++j) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @notice This method normalized the descending-sorted array `values` so that all elements in the `values`\\n   * are still in correct order, have 'relative' diffs and not greater than `sum(normed(values))/divisor`.\\n   * Returns the `normSum` and the `pivot` after normalizing the array.\\n   *\\n   * @dev Given a tuple of `(a, s, k)` and divisor `d` where:\\n   *    - `a` is the array of values of length `n`,\\n   *    - `s` is the sum of the array,\\n   *    - `k` is the pivot value, `k = s / d` initially.\\n   *\\n   * This method normalizes `a` to `a'` such that:\\n   *    (1) Elements in `a` and `a'` are decreased relatively\\n   *    (2) `k' = (s' / d)` and `\\u2200x \\u2208 a': x \\u2264 k'`\\n   *\\n   * Algorithm:\\n   *    1. Init `s = sum(a)`, `k = s/d`.\\n   *    2. While `k` changes:\\n   *       * Replace all `a[i] > k` by `k`\\n   *       * k := sum(unchanged(a[i])) / (d - count(changed(a[i])))\\n   *\\n   * For example:\\n   *    Input:\\n   *      a = [100, 70, 20, 15, 3]\\n   *      d = 3\\n   *    Calculation:\\n   *      Init:    a = [ 100,  70,  20,  15,  3 ];    s = 208;   k = 69\\n   *      Round 1: a = [  69,  69,  20,  15,  3 ];    s = 177;   k = 38\\n   *      Round 2: a = [  38,  38,  20,  15,  3 ];    s = 114;   k = 38\\n   *\\n   *      The calculation stop since all elements in a is \\u2264 k, in other words, `k` is unchanged.\\n   *    Output:\\n   *      s = 114\\n   *      k = 38\\n   *\\n   * Implementation denotes:\\n   *    `pivot`: k\\n   *    `left`:  to-be-changed elements\\n   *    `right`: unchanged elements\\n   *\\n   *    Input:\\n   *                     pivot\\n   *                       v\\n   *            --*-----*--|--------*---------*--------*------\\n   *              ^     ^           ^         ^        ^\\n   *              a[0]  a[1]        a[2]      a[3]     a[4]\\n   *\\n   *    Output:\\n   *                         pivot = a[0] = a[1]\\n   *                           v\\n   *            ---------------|----*---------*--------*------\\n   *                                ^         ^        ^\\n   *                                a[2]      a[3]     a[4]\\n   *\\n   *\\n   */\\n  function findNormalizedSumAndPivot(\\n    uint256[] memory values,\\n    uint256 divisor\\n  ) internal pure returns (uint256 normSum, uint256 pivot) {\\n    divisor = Math.min(values.length, divisor);\\n    values = inplaceDescSort(values);\\n\\n    uint256 sLeft;\\n    uint256 nLeft;\\n    uint256 sRight;\\n    bool shouldExit;\\n\\n    normSum = sum(values);\\n    pivot = normSum / divisor;\\n\\n    while (!shouldExit) {\\n      shouldExit = true;\\n\\n      while (values[nLeft] > pivot) {\\n        sLeft += values[nLeft++];\\n        shouldExit = false;\\n      }\\n\\n      if (shouldExit) break;\\n\\n      sRight = normSum - sLeft;\\n      pivot = sRight / (divisor - nLeft); // Mathematically proven `divisor` is always larger than `nLeft`\\n      sLeft = pivot * nLeft;\\n      normSum = sRight + sLeft;\\n    }\\n  }\\n\\n  /**\\n   * @dev Clips the values in the given array to be within the specified lower and upper bounds.\\n   *\\n   * - The input array is modified in place.\\n   *\\n   * - Examples:\\n   * `inplaceClip([1, 2, 3, 4, 5], 2, 4)` => `[2, 2, 3, 4, 4]`\\n   */\\n  function inplaceClip(\\n    uint256[] memory values,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256[] memory clippedValues) {\\n    uint256 length = values.length;\\n\\n    for (uint256 i; i < length; ++i) {\\n      if (values[i] < lower) values[i] = lower;\\n      if (values[i] > upper) values[i] = upper;\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      clippedValues := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory self, address[] memory other) internal pure returns (bool yes) {\\n    return hash(self) == hash(other);\\n  }\\n\\n  /**\\n   * @dev Hash dynamic size array\\n   * @param self The array of uint256\\n   * @return digest The hash result of the array\\n   */\\n  function hash(uint256[] memory self) internal pure returns (bytes32 digest) {\\n    assembly (\\\"memory-safe\\\") {\\n      digest := keccak256(add(self, 0x20), mul(mload(self), 0x20))\\n    }\\n  }\\n\\n  function hash(address[] memory self) internal pure returns (bytes32 digest) {\\n    return hash(toUint256s(self));\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (uint256) from a and b.\\n   */\\n  function concat(uint256[] memory a, uint256[] memory b) internal pure returns (uint256[] memory c) {\\n    unchecked {\\n      uint256 lengthA = a.length;\\n      uint256 lengthB = b.length;\\n\\n      if (lengthA == 0) return b;\\n      if (lengthB == 0) return a;\\n\\n      c = new uint256[](lengthA + lengthB);\\n\\n      uint256 i;\\n\\n      for (; i < lengthA;) {\\n        c[i] = a[i];\\n        ++i;\\n      }\\n      for (uint256 j; j < lengthB;) {\\n        c[i] = b[j];\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (address) from a and b.\\n   */\\n  function concat(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    return unsafeToAddresses(concat(toUint256s(a), toUint256s(b)));\\n  }\\n\\n  /**\\n   * @dev Converts an array of address to an array of uint256.\\n   */\\n  function toUint256s(address[] memory self) internal pure returns (uint256[] memory uint256s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint256s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of uint96.\\n   */\\n  function unsafeToUint96s(uint256[] memory self) internal pure returns (uint96[] memory uint96s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint96s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of address.\\n   */\\n  function unsafeToAddresses(uint256[] memory self) internal pure returns (address[] memory addresses) {\\n    assembly (\\\"memory-safe\\\") {\\n      addresses := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Create an array of indices (an index array) with provided range.\\n   * @param length The array size\\n   * @return data an array of indices\\n   */\\n  function arange(uint256 length) internal pure returns (uint256[] memory data) {\\n    unchecked {\\n      data = new uint256[](length);\\n      for (uint256 i; i < length; ++i) {\\n        data[i] = i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (uint256) given an array of indices.\\n   *\\n   * Inspiration from: https://numpy.org/doc/stable/reference/generated/numpy.take.html\\n   */\\n  function take(uint256[] memory self, uint256[] memory ids) internal pure returns (uint256[] memory result) {\\n    uint256 length = ids.length;\\n    result = new uint256[](length);\\n    for (uint256 i; i < length; ++i) {\\n      result[i] = self[ids[i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (address) given an array of indices.\\n   */\\n  function take(address[] memory self, uint256[] memory indices) internal pure returns (address[] memory result) {\\n    return unsafeToAddresses(take(toUint256s(self), indices));\\n  }\\n\\n  /**\\n   * @dev Pick the top `k` `keys` of type address[] based on their corresponding `values`.\\n   */\\n  function pickTopKByValues(\\n    address[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (address[] memory pickeds) {\\n    return unsafeToAddresses(pickTopKByValues(toUint256s(keys), values, k));\\n  }\\n\\n  /**\\n   * @dev Picks the top `k` `keys` based on their corresponding `values`.\\n   *\\n   * WARNING: The input array size will be changed. Besides, this fn does not guarantee all elements are sorted\\n   */\\n  function pickTopKByValues(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (uint256[] memory pickeds) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      if (k >= length) return keys;\\n\\n      inplaceDescSortByValue(keys, values);\\n      unsafeResize(keys, k);\\n\\n      return keys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding `indexMap` with the filter function `filterFn`.\\n   */\\n  function filterByIndexMap(\\n    uint256[] memory keys,\\n    IndexMap memory indexMap,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    return filterBy(keys, indexMap._inner, filterFn);\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding value array `values` with the filter function `filterFn`.\\n   */\\n  function filterBy(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      filteredKeys = new uint256[](length);\\n      uint256 nFiltered;\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (filterFn(i, values)) {\\n          filteredKeys[nFiltered++] = keys[i];\\n        }\\n      }\\n\\n      unsafeResize(filteredKeys, nFiltered);\\n\\n      return filteredKeys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of uint256 `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `values`.\\n   */\\n  function inplaceDescSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSort(values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function inplaceDescQuickSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = values.length;\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSort(values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function _inplaceDescQuickSort(uint256[] memory values, int256 left, int256 right) private pure {\\n    unchecked {\\n      if (left < right) {\\n        if (left == right) return;\\n        int256 i = left;\\n        int256 j = right;\\n        uint256 pivot = values[uint256(left + right) >> 1];\\n\\n        while (i <= j) {\\n          while (pivot < values[uint256(i)]) ++i;\\n          while (pivot > values[uint256(j)]) --j;\\n\\n          if (i <= j) {\\n            (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n            ++i;\\n            --j;\\n          }\\n        }\\n\\n        if (left < j) _inplaceDescQuickSort(values, left, j);\\n        if (i < right) _inplaceDescQuickSort(values, i, right);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of addresses `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    address[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (address[] memory sorted) {\\n    return unsafeToAddresses(inplaceDescQuickSortByValue(toUint256s(self), values));\\n  }\\n\\n  /**\\n   * @dev Resize a memory array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(uint256[] memory self, uint256 length) internal pure returns (uint256[] memory resized) {\\n    assembly (\\\"memory-safe\\\") {\\n      resized := self\\n      mstore(resized, length)\\n    }\\n  }\\n\\n  /**\\n   * @dev Resize a memory address array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(address[] memory self, uint256 length) internal pure returns (address[] memory resized) {\\n    return unsafeToAddresses(unsafeResize(toUint256s(self), length));\\n  }\\n\\n  /**\\n   * @dev Sorts `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSortByValue(self, values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `self` and `values`\\n   */\\n  function inplaceDescQuickSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = self.length;\\n    if (length != values.length) revert ErrLengthMismatch();\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSortByValue(self, values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values` based on a corresponding `arr`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `arr` and `values`\\n   */\\n  function _inplaceDescQuickSortByValue(\\n    uint256[] memory arr,\\n    uint256[] memory values,\\n    int256 left,\\n    int256 right\\n  ) private pure {\\n    unchecked {\\n      if (left == right) return;\\n      int256 i = left;\\n      int256 j = right;\\n      uint256 pivot = values[uint256(left + right) >> 1];\\n\\n      while (i <= j) {\\n        while (pivot < values[uint256(i)]) ++i;\\n        while (values[uint256(j)] < pivot) --j;\\n\\n        if (i <= j) {\\n          (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n          (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n          ++i;\\n          --j;\\n        }\\n      }\\n\\n      if (left < j) _inplaceDescQuickSortByValue(arr, values, left, j);\\n      if (i < right) _inplaceDescQuickSortByValue(arr, values, i, right);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe602052be2234f57b7040de8f34aaa934ca1c00d5edec95d607843a16718142a\",\"license\":\"MIT\"},\"contracts/libraries/LibIndexMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nstruct IndexMap {\\n  uint256[] _inner;\\n}\\n\\nusing LibIndexMap for IndexMap global;\\n\\n/**\\n * @title LibIndexMap\\n * @author TuDo1403\\n * @dev The `IndexMap` is a bitmap that represents the presence or absence of elements at specific indices.\\n * It is implemented as an array of uint256 values, where each element in an array is a bitmap which can represent the presence or absence of an element at a particular index.\\n * Each element in an array of bitmap can represent the presence or absence of 256 elements.\\n * The Presence of a particular index is represented by setting the corresponding bit in the bitmap to 1.\\n * Example:\\n * - Given an array of values: [11, 24, 33, 52]. Returns the indexes of odd numbers.\\n * - The values of odd numbers are: [11, 33]. Therefore, the indices of odd numbers are: [0, 2].\\n * - However, we can save more gas by using a bitmap to represent the indices of odd numbers.\\n * - Index 0 is an odd number, so we set the first bit of the bitmap to 1, (bitmap = 0001)\\n * - Index 2 is an odd number, so we set the third bit of the bitmap to 1, (bitmap = 0100)\\n * - The bitmap for the indices of odd number is: b'0001' | b'0100' = b'0101' = 5 in decimal\\n */\\nlibrary LibIndexMap {\\n  /// @dev Throws if the index is out of bitmap length.\\n  error ErrOutOfRange(uint256 index);\\n\\n  /// @dev Maximum number of bits in an indexmap slot.\\n  uint256 internal constant MAX_BIT = 256;\\n\\n  /**\\n   * @dev Wraps an array of uint256 values into an IndexMap struct.\\n   * @param inner The array of uint256 values to wrap.\\n   * @return The wrapped IndexMap struct.\\n   */\\n  function wrap(uint256[] memory inner) internal pure returns (IndexMap memory) {\\n    return IndexMap(inner);\\n  }\\n\\n  /**\\n   * @dev Creates a indexmap array based on the given number of elements.\\n   * @param numElement The number of elements to create the indexmap for.\\n   * @return indexmap The created indexmap array.\\n   */\\n  function create(uint16 numElement) internal pure returns (IndexMap memory indexmap) {\\n    unchecked {\\n      indexmap._inner = new uint256[](1 + uint256(numElement) / MAX_BIT);\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if an index is present in the map.\\n   * @param indexmap The map to check.\\n   * @param index The index to check.\\n   * @return A boolean indicating whether the index is present in the map.\\n   */\\n  function contains(IndexMap memory indexmap, uint256 index) internal pure returns (bool) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      // if index is out of range, return false\\n      if (index >= indexmap._inner.length * size) return false;\\n      return (indexmap._inner[index / size] & (1 << (index % size))) != 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of an element in a indexmap based on its value.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of the element.\\n   * @param index The value to record.\\n   * @return The updated indexmap with recorded existence of the element.\\n   */\\n  function set(IndexMap memory indexmap, uint256 index) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      uint256 pos = index / size;\\n\\n      if (pos >= indexmap._inner.length) revert ErrOutOfRange(index);\\n\\n      indexmap._inner[index / size] |= 1 << (index % size);\\n\\n      return indexmap;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of elements in a indexmap based on their values.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of elements.\\n   * @param indices The array of indices to record.\\n   * @return The updated indexmap with recorded existence of elements.\\n   */\\n  function setBatch(IndexMap memory indexmap, uint256[] memory indices) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 pos;\\n      uint256 size = MAX_BIT;\\n      uint256 length = indices.length;\\n      uint256 bitmapLength = indexmap._inner.length;\\n\\n      for (uint256 i; i < length; ++i) {\\n        pos = indices[i] / size;\\n\\n        if (pos >= bitmapLength) revert ErrOutOfRange(indices[i]);\\n\\n        indexmap._inner[pos] |= 1 << (indices[i] % size);\\n      }\\n\\n      return indexmap;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xce4278abfd4fbdc0de4a7605e8003c248984ed07e8ff3f2eb20183f5f302a6d4\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/precompile-usages/PCUValidateDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUValidateDoubleSign is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileValidateDoubleSignAddress() public view virtual returns (address) {\\n    return address(0x67);\\n  }\\n\\n  /**\\n   * @dev Validates the two submitted block header if they are produced by the same address\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcValidateEvidence(\\n    address _consensusAddr,\\n    bytes calldata _header1,\\n    bytes calldata _header2\\n  ) internal view virtual returns (bool _validEvidence) {\\n    address _smc = precompileValidateDoubleSignAddress();\\n    bool _success = true;\\n\\n    bytes memory _payload =\\n      abi.encodeWithSignature(\\\"validatingDoubleSignProof(address,bytes,bytes)\\\", _consensusAddr, _header1, _header2);\\n    uint _payloadLength = _payload.length;\\n    uint[1] memory _output;\\n\\n    assembly {\\n      let _payloadStart := add(_payload, 0x20)\\n      if iszero(staticcall(gas(), _smc, _payloadStart, _payloadLength, _output, 0x20)) { _success := 0 }\\n\\n      if iszero(returndatasize()) { _success := 0 }\\n    }\\n\\n    if (!_success) revert ErrCallPrecompiled();\\n    return (_output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x2d7a72a87dfb77f67966f719676a5d81d26fc22e265fba56b55f9500564a72cf\",\"license\":\"MIT\"},\"contracts/precompile-usages/PCUValidateFastFinality.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PCUValidateFastFinality is PrecompiledUsage {\\n  /// @dev Gets the address of the precompile of validating double sign evidence\\n  function precompileValidateFastFinalityAddress() public view virtual returns (address) {\\n    return address(0x69);\\n  }\\n\\n  /**\\n   * @dev Validates the proof of malicious voting on fast finality\\n   *\\n   * Note: The recover process is done by pre-compiled contract. This function is marked as\\n   * virtual for implementing mocking contract for testing purpose.\\n   */\\n  function _pcValidateFastFinalityEvidence(\\n    bytes memory voterPublicKey,\\n    uint256 targetBlockNumber,\\n    bytes32[2] memory targetBlockHash,\\n    bytes[][2] memory listOfPublicKey,\\n    bytes[2] memory aggregatedSignature\\n  ) internal view virtual returns (bool validEvidence) {\\n    address smc = precompileValidateFastFinalityAddress();\\n    bool success = true;\\n\\n    bytes memory payload = abi.encodeWithSignature(\\n      \\\"validateFinalityVoteProof(bytes,uint256,bytes32[2],bytes[][2],bytes[2])\\\",\\n      voterPublicKey,\\n      targetBlockNumber,\\n      targetBlockHash,\\n      listOfPublicKey,\\n      aggregatedSignature\\n    );\\n    uint payloadLength = payload.length;\\n    uint[1] memory output;\\n\\n    assembly {\\n      let payloadStart := add(payload, 0x20)\\n      if iszero(staticcall(gas(), smc, payloadStart, payloadLength, output, 0x20)) { success := 0 }\\n      if iszero(returndatasize()) { success := 0 }\\n    }\\n\\n    if (!success) revert ErrCallPrecompiled();\\n    return (output[0] != 0);\\n  }\\n}\\n\",\"keccak256\":\"0x696e2cbf7ce8a65e3731797cd322687a4bfcb9408d24c52a2ea5d305b029f75f\",\"license\":\"MIT\"},\"contracts/precompile-usages/PrecompiledUsage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PrecompiledUsage.sol\\\";\\n\\nabstract contract PrecompiledUsage {\\n  /// @dev Error of call to precompile fails.\\n  error ErrCallPrecompiled();\\n}\\n\",\"keccak256\":\"0x76facc3f3a8dd573c826bbbfedaa5cd8ef30963fbabd8c163c0c72b6efea5551\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/CreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ICreditScore.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasValidatorDeprecated, HasMaintenanceDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport { ErrUnauthorized, RoleAccess } from \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract CreditScore is\\n  ICreditScore,\\n  HasContracts,\\n  HasValidatorDeprecated,\\n  HasMaintenanceDeprecated,\\n  PercentageConsumer\\n{\\n  /// @dev Mapping from validator id => period index => whether bailed out before\\n  mapping(address => mapping(uint256 => bool)) internal _checkBailedOutAtPeriod;\\n  /// @dev Mapping from validator address => credit score\\n  mapping(address => uint256) internal _creditScore;\\n\\n  /// @dev The max gained number of credit score per period.\\n  uint256 internal _gainCreditScore;\\n  /// @dev The max number of credit score that a validator can hold.\\n  uint256 internal _maxCreditScore;\\n  /// @dev The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n  uint256 internal _bailOutCostMultiplier;\\n  /// @dev The percentage of reward to be cut off from the validator in the rest of the period after bailed out.\\n  uint256 internal _cutOffPercentageAfterBailout;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function execUpdateCreditScores(\\n    address[] calldata validatorIds,\\n    uint256 period\\n  ) external override onlyContract(ContractType.VALIDATOR) {\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(msg.sender);\\n    uint256 periodStartAtBlock = validatorContract.currentPeriodStartAtBlock();\\n\\n    bool[] memory jaileds = validatorContract.checkManyJailedById(validatorIds);\\n    bool[] memory maintaineds = IMaintenance(getContract(ContractType.MAINTENANCE)).checkManyMaintainedInBlockRangeById(\\n      validatorIds, periodStartAtBlock, block.number\\n    );\\n    uint256[] memory updatedCreditScores = new uint256[](validatorIds.length);\\n\\n    for (uint i = 0; i < validatorIds.length;) {\\n      address vId = validatorIds[i];\\n\\n      uint256 indicator = _getUnavailabilityIndicatorById(vId, period);\\n      bool isJailedInPeriod = jaileds[i];\\n      bool isMaintainingInPeriod = maintaineds[i];\\n\\n      uint256 _actualGain =\\n        (isJailedInPeriod || isMaintainingInPeriod) ? 0 : Math.subNonNegative(_gainCreditScore, indicator);\\n\\n      _creditScore[vId] = Math.addWithUpperbound(_creditScore[vId], _actualGain, _maxCreditScore);\\n      updatedCreditScores[i] = _creditScore[vId];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit CreditScoresUpdated(validatorIds, updatedCreditScores);\\n  }\\n\\n  function execResetCreditScores(address[] calldata validatorIds)\\n    external\\n    override\\n    onlyContract(ContractType.VALIDATOR)\\n  {\\n    uint256[] memory updatedCreditScores = new uint256[](validatorIds.length);\\n    for (uint i = 0; i < validatorIds.length;) {\\n      address _validator = validatorIds[i];\\n      delete _creditScore[_validator];\\n      delete updatedCreditScores[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    emit CreditScoresUpdated(validatorIds, updatedCreditScores);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function bailOut(TConsensus consensusAddr) external override {\\n    address validatorId = __css2cid(consensusAddr);\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    if (!validatorContract.isValidatorCandidate(consensusAddr)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.VALIDATOR_CANDIDATE);\\n    }\\n\\n    if (!validatorContract.isCandidateAdminById(validatorId, msg.sender)) {\\n      revert ErrUnauthorized(msg.sig, RoleAccess.CANDIDATE_ADMIN);\\n    }\\n\\n    (bool isJailed,, uint256 jailedEpochLeft) = validatorContract.getJailedTimeLeft(consensusAddr);\\n    if (!isJailed) revert ErrCallerMustBeJailedInTheCurrentPeriod();\\n\\n    uint256 period = validatorContract.currentPeriod();\\n    if (_checkBailedOutAtPeriod[validatorId][period]) revert ErrValidatorHasBailedOutPreviously();\\n\\n    uint256 score = _creditScore[validatorId];\\n    uint256 cost = jailedEpochLeft * _bailOutCostMultiplier;\\n    if (score < cost) revert ErrInsufficientCreditScoreToBailOut();\\n\\n    validatorContract.execBailOut(validatorId, period);\\n\\n    _creditScore[validatorId] -= cost;\\n    _setUnavailabilityIndicator(validatorId, period, 0);\\n    _checkBailedOutAtPeriod[validatorId][period] = true;\\n    emit BailedOut(validatorId, period, cost);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external override onlyAdmin {\\n    _setCreditScoreConfigs(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability`\\n   */\\n  function _getUnavailabilityIndicatorById(address validator, uint256 period) internal view virtual returns (uint256);\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 gainCreditScore_,\\n      uint256 maxCreditScore_,\\n      uint256 bailOutCostMultiplier_,\\n      uint256 cutOffPercentageAfterBailout_\\n    )\\n  {\\n    return (_gainCreditScore, _maxCreditScore, _bailOutCostMultiplier, _cutOffPercentageAfterBailout);\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getCreditScore(TConsensus consensusAddr) external view override returns (uint256) {\\n    return _creditScore[__css2cid(consensusAddr)];\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function getManyCreditScores(TConsensus[] calldata consensusAddrs)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory resultList)\\n  {\\n    address[] memory validatorIds = __css2cidBatch(consensusAddrs);\\n    resultList = new uint256[](validatorIds.length);\\n\\n    for (uint i = 0; i < resultList.length;) {\\n      resultList[i] = _creditScore[validatorIds[i]];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICreditScore\\n   */\\n  function checkBailedOutAtPeriod(TConsensus consensus, uint256 period) external view override returns (bool) {\\n    return _checkBailedOutAtPeriodById(__css2cid(consensus), period);\\n  }\\n\\n  function _checkBailedOutAtPeriodById(address validatorId, uint256 period) internal view virtual returns (bool) {\\n    return _checkBailedOutAtPeriod[validatorId][period];\\n  }\\n\\n  /**\\n   * @dev See `SlashUnavailability`.\\n   */\\n  function _setUnavailabilityIndicator(address _validator, uint256 period, uint256 _indicator) internal virtual;\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n\\n  /**\\n   * @dev See `ICreditScore-setCreditScoreConfigs`.\\n   */\\n  function _setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) internal {\\n    if (_gainScore > _maxScore) revert ErrInvalidCreditScoreConfig();\\n    if (_cutOffPercentage > _MAX_PERCENTAGE) revert ErrInvalidCutOffPercentageConfig();\\n\\n    _gainCreditScore = _gainScore;\\n    _maxCreditScore = _maxScore;\\n    _bailOutCostMultiplier = _bailOutMultiplier;\\n    _cutOffPercentageAfterBailout = _cutOffPercentage;\\n    emit CreditScoreConfigsUpdated(_gainScore, _maxScore, _bailOutMultiplier, _cutOffPercentage);\\n  }\\n}\\n\",\"keccak256\":\"0xe6d9f56994e273270f713cef66b7d6cf213852abb02430afbba824be303030d8\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/DeprecatedSlashBridgeOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../extensions/collections/HasProxyAdmin.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract DeprecatedSlashBridgeOperator is\\n  HasProxyAdmin,\\n  HasContracts,\\n  HasValidatorDeprecated,\\n  PercentageConsumer\\n{\\n  /**\\n   * @dev The bridge operators will be deprecated reward if (s)he missed more than the ratio.\\n   * Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 private ____deprecatedMissingVotesRatioTier1;\\n  /**\\n   * @dev The bridge operators will be deprecated all rewards including bridge reward and mining reward if (s)he missed\\n   * more than the ratio. Values 0-10,000 map to 0%-100%.\\n   */\\n  uint256 private ____deprecatedMissingVotesRatioTier2;\\n  /// @dev The number of blocks to jail the corresponding block producer when its bridge operator is slashed tier-2.\\n  uint256 private ____deprecatedJailDurationForMissingVotesRatioTier2;\\n  /// @dev The threshold to skip slashing the bridge operator in case the total number of votes in the bridge is too small.\\n  uint256 private ____deprecatedSkipBridgeOperatorSlashingThreshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xcc5150f7add2223bda2e22a13dd49dedff5bab71ba5bb251a7b22f484b2f493d\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/DeprecatedSlashBridgeVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {\\n  HasValidatorDeprecated,\\n  HasTrustedOrgDeprecated,\\n  HasGovernanceAdminDeprecated\\n} from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\n\\n// TODO: remove this from slashing logic of consensus contract\\nabstract contract DeprecatedSlashBridgeVoting is\\n  HasContracts,\\n  HasValidatorDeprecated,\\n  HasTrustedOrgDeprecated,\\n  HasGovernanceAdminDeprecated\\n{\\n  /// @dev Mapping from validator address => period index => bridge voting slashed\\n  mapping(address => mapping(uint256 => bool)) private __deprecatedBridgeVotingSlashed;\\n  /// @dev The threshold to slash when a trusted organization does not vote for bridge operators.\\n  uint256 private __deprecatedBridgeVotingThreshold;\\n  /// @dev The amount of RON to slash bridge voting.\\n  uint256 private __deprecatedBridgeVotingSlashAmount;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x6628540e2ba703ff3390c99af1259b65d1e28d3c3759f4b658c36c1e699cf9c5\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ISlashDoubleSign.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../precompile-usages/PCUValidateDoubleSign.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract SlashDoubleSign is ISlashDoubleSign, HasContracts, HasValidatorDeprecated, PCUValidateDoubleSign {\\n  /// @dev The amount of RON to slash double sign.\\n  uint256 internal _slashDoubleSignAmount;\\n  /// @dev The block number that the punished validator will be jailed until, due to double signing.\\n  uint256 internal _doubleSigningJailUntilBlock;\\n  /**\\n   * @dev The offset from the submitted block to the current block, from which double signing will be invalidated.\\n   * This parameter is exposed for system transaction.\\n   *\\n   */\\n  uint256 internal _doubleSigningOffsetLimitBlock;\\n  /// @dev Recording of submitted proof to prevent relay attack.\\n  mapping(bytes32 => bool) _submittedEvidence;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[24] private ______gap;\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function slashDoubleSign(\\n    TConsensus consensusAddr,\\n    bytes calldata header1,\\n    bytes calldata header2\\n  ) external override onlyAdmin {\\n    bytes32 header1Checksum = keccak256(header1);\\n    bytes32 header2Checksum = keccak256(header2);\\n\\n    if (_submittedEvidence[header1Checksum] || _submittedEvidence[header2Checksum]) {\\n      revert ErrEvidenceAlreadySubmitted();\\n    }\\n\\n    (bool found, address validatorId) = __tryCss2cid(consensusAddr);\\n\\n    // NOTE: Edge case: non-validator who never apply for the candidate role, nor have a profile.\\n    // Must be slashed by the consensus address, since the validatorId will be address(0).\\n    if (!found) {\\n      validatorId = TConsensus.unwrap(consensusAddr);\\n    }\\n\\n    if (_pcValidateEvidence(validatorId, header1, header2)) {\\n      IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n      uint256 period = validatorContract.currentPeriod();\\n      _submittedEvidence[header1Checksum] = true;\\n      _submittedEvidence[header2Checksum] = true;\\n      emit Slashed(validatorId, SlashType.DOUBLE_SIGNING, period);\\n      validatorContract.execSlash(validatorId, _doubleSigningJailUntilBlock, _slashDoubleSignAmount, true);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 slashDoubleSignAmount_,\\n      uint256 doubleSigningJailUntilBlock_,\\n      uint256 doubleSigningOffsetLimitBlock_\\n    )\\n  {\\n    return (_slashDoubleSignAmount, _doubleSigningJailUntilBlock, _doubleSigningOffsetLimitBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashDoubleSign\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _offsetLimitBlock\\n  ) external override onlyAdmin {\\n    _setDoubleSignSlashingConfigs(_slashAmount, _jailUntilBlock, _offsetLimitBlock);\\n  }\\n\\n  /**\\n   * @dev See `ISlashDoubleSign-setDoubleSignSlashingConfigs`.\\n   */\\n  function _setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _offsetLimitBlock\\n  ) internal {\\n    _slashDoubleSignAmount = _slashAmount;\\n    _doubleSigningJailUntilBlock = _jailUntilBlock;\\n    _doubleSigningOffsetLimitBlock = _offsetLimitBlock;\\n    emit DoubleSignSlashingConfigsUpdated(_slashAmount, _jailUntilBlock, _doubleSigningOffsetLimitBlock);\\n  }\\n\\n  /**\\n   * @dev Returns whether the id `cid` should be slashed or not.\\n   */\\n  function _shouldSlash(TConsensus consensus, address validatorId) internal view virtual returns (bool);\\n\\n  function __tryCss2cid(TConsensus consensusAddr) internal view virtual returns (bool, address);\\n}\\n\",\"keccak256\":\"0x77c1e0cc125679d2c77daa1caeec1ece4e4d08951be897208d6a03e33aad716f\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashFastFinality.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/slash-indicator/ISlashFastFinality.sol\\\";\\nimport { IRoninValidatorSet } from \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport { IProfile } from \\\"../../interfaces/IProfile.sol\\\";\\nimport { IRoninTrustedOrganization } from \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../precompile-usages/PCUValidateFastFinality.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract SlashFastFinality is ISlashFastFinality, HasContracts, PCUValidateFastFinality {\\n  /// @dev The amount of RON to slash fast finality.\\n  uint256 internal _slashFastFinalityAmount;\\n  /// @dev The block number that the punished validator will be jailed until, due to malicious fast finality.\\n  uint256 internal _fastFinalityJailUntilBlock;\\n  /// @dev Recording of submitted proof to prevent relay attack.\\n  mapping(bytes32 => bool) internal _processedEvidence;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[21] private ______gap;\\n\\n  modifier onlyGoverningValidator() {\\n    if (_getGovernorWeight(msg.sender) == 0) revert ErrUnauthorized(msg.sig, RoleAccess.GOVERNOR);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashFastFinality\\n   */\\n  function slashFastFinality(\\n    TConsensus consensusAddr,\\n    bytes calldata voterPublicKey,\\n    uint256 targetBlockNumber,\\n    bytes32[2] calldata targetBlockHash,\\n    bytes[][2] calldata listOfPublicKey,\\n    bytes[2] calldata aggregatedSignature\\n  ) external override onlyGoverningValidator {\\n    address validatorId = __css2cid(consensusAddr);\\n    IProfile profileContract = IProfile(getContract(ContractType.PROFILE));\\n\\n    IProfile.CandidateProfile memory profile = profileContract.getId2Profile(validatorId);\\n    bytes32 voterPublicKeyHash = keccak256(voterPublicKey);\\n    if ((voterPublicKeyHash != keccak256(profile.pubkey)) && (voterPublicKeyHash != keccak256(profile.oldPubkey))) {\\n      revert ErrInvalidArguments(msg.sig);\\n    }\\n\\n    bytes32 evidenceHash = keccak256(abi.encodePacked(consensusAddr, targetBlockNumber));\\n    if (_processedEvidence[evidenceHash]) revert ErrEvidenceAlreadySubmitted();\\n\\n    if (!profileContract.arePublicKeysRegistered(listOfPublicKey)) {\\n      revert ErrUnregisteredPublicKey();\\n    }\\n\\n    if (\\n      _pcValidateFastFinalityEvidence(\\n        voterPublicKey, targetBlockNumber, targetBlockHash, listOfPublicKey, aggregatedSignature\\n      )\\n    ) {\\n      _processedEvidence[evidenceHash] = true;\\n\\n      IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n      uint256 period = validatorContract.currentPeriod();\\n      emit Slashed(validatorId, SlashType.FAST_FINALITY, period);\\n      validatorContract.execSlash({\\n        cid: validatorId,\\n        newJailedUntil: _fastFinalityJailUntilBlock,\\n        slashAmount: _slashFastFinalityAmount,\\n        cannotBailout: true\\n      });\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashFastFinality\\n   */\\n  function getFastFinalitySlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (uint256 slashFastFinalityAmount_, uint256 fastFinalityJailUntilBlock_)\\n  {\\n    return (_slashFastFinalityAmount, _fastFinalityJailUntilBlock);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashFastFinality\\n   */\\n  function setFastFinalitySlashingConfigs(uint256 slashAmount, uint256 jailUntilBlock) external override onlyAdmin {\\n    _setFastFinalitySlashingConfigs(slashAmount, jailUntilBlock);\\n  }\\n\\n  /**\\n   * @dev See `ISlashFastFinality-setFastFinalitySlashingConfigs`.\\n   */\\n  function _setFastFinalitySlashingConfigs(uint256 slashAmount, uint256 jailUntilBlock) internal {\\n    _slashFastFinalityAmount = slashAmount;\\n    _fastFinalityJailUntilBlock = jailUntilBlock;\\n    emit FastFinalitySlashingConfigsUpdated(slashAmount, jailUntilBlock);\\n  }\\n\\n  /**\\n   * @dev Get governor, i.e. governing validator's weight, of the `addr`.\\n   */\\n  function _getGovernorWeight(address addr) internal view returns (uint256) {\\n    return IRoninTrustedOrganization(getContract(ContractType.RONIN_TRUSTED_ORGANIZATION)).getGovernorWeight(addr);\\n  }\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x805f8910fa23aaf7f331e183b7d7162678a756925693852ce0cc282de1014b96\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"./DeprecatedSlashBridgeOperator.sol\\\";\\nimport \\\"./DeprecatedSlashBridgeVoting.sol\\\";\\nimport \\\"./SlashDoubleSign.sol\\\";\\nimport \\\"./SlashFastFinality.sol\\\";\\nimport \\\"./SlashUnavailability.sol\\\";\\nimport \\\"./SlashRandomBeacon.sol\\\";\\nimport \\\"./CreditScore.sol\\\";\\n\\ncontract SlashIndicator is\\n  ISlashIndicator,\\n  SlashDoubleSign,\\n  SlashFastFinality,\\n  SlashRandomBeacon,\\n  DeprecatedSlashBridgeVoting,\\n  DeprecatedSlashBridgeOperator,\\n  SlashUnavailability,\\n  CreditScore,\\n  Initializable\\n{\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __validatorContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address __roninGovernanceAdminContract,\\n    uint256[4] calldata, /* _bridgeOperatorSlashingConfigs */\\n    uint256[2] calldata, /* _bridgeVotingSlashingConfigs */\\n    // _doubleSignSlashingConfigs[0]: _slashDoubleSignAmount\\n    // _doubleSignSlashingConfigs[1]: _doubleSigningJailUntilBlock\\n    // _doubleSignSlashingConfigs[2]: _doubleSigningOffsetLimitBlock\\n    uint256[3] calldata _doubleSignSlashingConfigs,\\n    // _unavailabilitySlashingConfigs[0]: _unavailabilityTier1Threshold\\n    // _unavailabilitySlashingConfigs[1]: _unavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[2]: _slashAmountForUnavailabilityTier2Threshold\\n    // _unavailabilitySlashingConfigs[3]: _jailDurationForUnavailabilityTier2Threshold\\n    uint256[4] calldata _unavailabilitySlashingConfigs,\\n    // _creditScoreConfigs[0]: _gainCreditScore\\n    // _creditScoreConfigs[1]: _maxCreditScore\\n    // _creditScoreConfigs[2]: _bailOutCostMultiplier\\n    // _creditScoreConfigs[3]: _cutOffPercentageAfterBailout\\n    uint256[4] calldata _creditScoreConfigs\\n  ) external initializer {\\n    _setContract(ContractType.VALIDATOR, __validatorContract);\\n    _setContract(ContractType.MAINTENANCE, __maintenanceContract);\\n    _setContract(ContractType.GOVERNANCE_ADMIN, __roninGovernanceAdminContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, __roninTrustedOrganizationContract);\\n\\n    _setDoubleSignSlashingConfigs(\\n      _doubleSignSlashingConfigs[0], _doubleSignSlashingConfigs[1], _doubleSignSlashingConfigs[2]\\n    );\\n    _setUnavailabilitySlashingConfigs(\\n      _unavailabilitySlashingConfigs[0],\\n      _unavailabilitySlashingConfigs[1],\\n      _unavailabilitySlashingConfigs[2],\\n      _unavailabilitySlashingConfigs[3]\\n    );\\n    _setCreditScoreConfigs(\\n      _creditScoreConfigs[0], _creditScoreConfigs[1], _creditScoreConfigs[2], _creditScoreConfigs[3]\\n    );\\n  }\\n\\n  function initializeV2(address roninGovernanceAdminContract) external reinitializer(2) {\\n    _setContract(ContractType.VALIDATOR, ______deprecatedValidator);\\n    _setContract(ContractType.MAINTENANCE, ______deprecatedMaintenance);\\n    _setContract(ContractType.GOVERNANCE_ADMIN, roninGovernanceAdminContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, ______deprecatedTrustedOrg);\\n\\n    delete ______deprecatedValidator;\\n    delete ______deprecatedMaintenance;\\n    delete ______deprecatedTrustedOrg;\\n    delete ______deprecatedGovernanceAdmin;\\n  }\\n\\n  function initializeV3(address profileContract) external reinitializer(3) {\\n    _setContract(ContractType.PROFILE, profileContract);\\n    _setFastFinalitySlashingConfigs(_slashDoubleSignAmount, _doubleSigningJailUntilBlock);\\n  }\\n\\n  function initializeV4(\\n    address randomBeaconContract,\\n    uint256 randomBeaconSlashAmount,\\n    uint256 activatedAtPeriod\\n  ) external reinitializer(4) {\\n    _setRandomBeaconSlashingConfigs(randomBeaconSlashAmount, activatedAtPeriod);\\n    _setContract(ContractType.RANDOM_BEACON, randomBeaconContract);\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to reset the indicator of the validator after bailing out.\\n   */\\n  function _setUnavailabilityIndicator(\\n    address validator,\\n    uint256 period,\\n    uint256 indicator\\n  ) internal override(CreditScore, SlashUnavailability) {\\n    SlashUnavailability._setUnavailabilityIndicator(validator, period, indicator);\\n  }\\n\\n  /**\\n   * @dev Helper for CreditScore contract to query indicator of the validator.\\n   */\\n  function _getUnavailabilityIndicatorById(\\n    address validatorId,\\n    uint256 period\\n  ) internal view override(CreditScore, SlashUnavailability) returns (uint256) {\\n    return SlashUnavailability._getUnavailabilityIndicatorById(validatorId, period);\\n  }\\n\\n  function _checkBailedOutAtPeriodById(\\n    address cid,\\n    uint256 period\\n  ) internal view override(CreditScore, SlashUnavailability) returns (bool) {\\n    return CreditScore._checkBailedOutAtPeriodById(cid, period);\\n  }\\n\\n  /**\\n   * @dev Sanity check the address to be slashed\\n   */\\n  function _shouldSlash(\\n    TConsensus consensus,\\n    address validatorId\\n  ) internal view override(SlashDoubleSign, SlashUnavailability) returns (bool) {\\n    return\\n    // The slasher must not be identical with the slashee\\n    (msg.sender != TConsensus.unwrap(consensus)) && (msg.sender != validatorId)\\n    // The slashee must still be block producer at the time of being slashed\\n    && IRoninValidatorSet(getContract(ContractType.VALIDATOR)).isBlockProducerById(validatorId)\\n    // The slashee must not on maintenance\\n    && !IMaintenance(getContract(ContractType.MAINTENANCE)).checkMaintainedById(validatorId, block.number);\\n  }\\n\\n  function __css2cid(TConsensus consensusAddr)\\n    internal\\n    view\\n    override(CreditScore, SlashUnavailability, SlashFastFinality)\\n    returns (address)\\n  {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  function __tryCss2cid(TConsensus consensusAddr) internal view override(SlashDoubleSign) returns (bool, address) {\\n    return IProfile(getContract(ContractType.PROFILE)).tryGetConsensus2Id(consensusAddr);\\n  }\\n\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view override returns (address[] memory) {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n}\\n\",\"keccak256\":\"0x9f903a08b1bb4d4340cf9dbd78cd22c2fb057465c771e85fdd8ba68090937d1e\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashRandomBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { HasContracts } from \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { IRoninValidatorSet } from \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport { ITimingInfo } from \\\"../../interfaces/validator/info-fragments/ITimingInfo.sol\\\";\\nimport { ISlashRandomBeacon } from \\\"../../interfaces/slash-indicator/ISlashRandomBeacon.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\nabstract contract SlashRandomBeacon is ISlashRandomBeacon, HasContracts {\\n  /// @dev value is equal to keccak256(abi.encode(uint256(keccak256(\\\"@ronin.SlashRandomBeacon.storage.SlashRandomBeaconConfig\\\")) - 1)) & ~bytes32(uint256(0xff))\\n  bytes32 private constant $$_SlashRandomBeaconConfigStorageLocation =\\n    0x91c8f2da0132d5a54177c69679e2999120ba8f9ed42cabc35c99b69642ac8500;\\n\\n  /**\\n   * @inheritdoc ISlashRandomBeacon\\n   */\\n  function slashRandomBeacon(address validatorId, uint256 period) external onlyContract(ContractType.RANDOM_BEACON) {\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    SlashRandomBeaconConfig memory config = _getSlashRandomBeaconConfig();\\n    uint256 currPeriod = ITimingInfo(address(validatorContract)).currentPeriod();\\n\\n    if (currPeriod < config._activatedAtPeriod) {\\n      emit SlashingBeaconSkipped(period, validatorId);\\n      return;\\n    }\\n\\n    emit Slashed(validatorId, SlashType.RANDOM_BEACON, period);\\n\\n    validatorContract.execSlash({\\n      cid: validatorId,\\n      newJailedUntil: 0,\\n      slashAmount: config._slashAmount,\\n      cannotBailout: false\\n    });\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashRandomBeacon\\n   */\\n  function getRandomBeaconSlashingConfigs() external pure returns (SlashRandomBeaconConfig memory config) {\\n    return _getSlashRandomBeaconConfig();\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashRandomBeacon\\n   */\\n  function setRandomBeaconSlashingConfigs(uint256 slashAmount, uint256 activatedAtPeriod) external onlyAdmin {\\n    _setRandomBeaconSlashingConfigs(slashAmount, activatedAtPeriod);\\n  }\\n\\n  /**\\n   * @dev See `ISlashRandomBeacon-setRandomBeaconSlashingConfigs`.\\n   */\\n  function _setRandomBeaconSlashingConfigs(uint256 slashAmount, uint256 activatedAtPeriod) internal {\\n    SlashRandomBeaconConfig storage $ = _getSlashRandomBeaconConfig();\\n\\n    $._slashAmount = slashAmount;\\n    $._activatedAtPeriod = activatedAtPeriod;\\n\\n    emit RandomBeaconSlashingConfigsUpdated(slashAmount);\\n  }\\n\\n  /**\\n   * @dev Returns the storage of the random beacon slashing configs.\\n   */\\n  function _getSlashRandomBeaconConfig() private pure returns (SlashRandomBeaconConfig storage $) {\\n    assembly (\\\"memory-safe\\\") {\\n      $.slot := $$_SlashRandomBeaconConfigStorageLocation\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa0e0096699c504ddb69b9145b4240a8d6de5bf98a62cd27837063b90a2578e78\",\"license\":\"MIT\"},\"contracts/ronin/slash-indicator/SlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./CreditScore.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashUnavailability.sol\\\";\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport { HasValidatorDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport { ErrInvalidThreshold } from \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract SlashUnavailability is ISlashUnavailability, HasContracts, HasValidatorDeprecated {\\n  /// @dev The last block that a validator is slashed for unavailability.\\n  uint256 internal _lastUnavailabilitySlashedBlock;\\n  /// @dev Mapping from validator address => period index => unavailability indicator.\\n  mapping(address => mapping(uint256 => uint256)) internal _unavailabilityIndicator;\\n\\n  /**\\n   * @dev The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * This threshold is applied for tier-1 and tier-3 of unavailability slash.\\n   */\\n  uint256 internal _unavailabilityTier1Threshold;\\n  /**\\n   * @dev The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   */\\n  uint256 internal _unavailabilityTier2Threshold;\\n  /**\\n   * @dev The amount of RON to deduct from self-staking of a block producer when (s)he is slashed with\\n   * tier-2 or tier-3.\\n   *\\n   */\\n  uint256 internal _slashAmountForUnavailabilityTier2Threshold;\\n  /// @dev The number of blocks to jail a block producer when (s)he is slashed with tier-2 or tier-3.\\n  uint256 internal _jailDurationForUnavailabilityTier2Threshold;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  modifier oncePerBlock() {\\n    if (block.number <= _lastUnavailabilitySlashedBlock) {\\n      revert ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock();\\n    }\\n\\n    _lastUnavailabilitySlashedBlock = block.number;\\n    _;\\n  }\\n\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256) {\\n    return _lastUnavailabilitySlashedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function slashUnavailability(TConsensus consensusAddr) external override oncePerBlock {\\n    if (msg.sender != block.coinbase) revert ErrUnauthorized(msg.sig, RoleAccess.COINBASE);\\n\\n    address validatorId = __css2cid(consensusAddr);\\n    if (!_shouldSlash(consensusAddr, validatorId)) {\\n      // Should return instead of throwing error since this is a part of system transaction.\\n      return;\\n    }\\n\\n    IRoninValidatorSet validatorContract = IRoninValidatorSet(getContract(ContractType.VALIDATOR));\\n    uint256 period = validatorContract.currentPeriod();\\n    uint256 count;\\n    unchecked {\\n      count = ++_unavailabilityIndicator[validatorId][period];\\n    }\\n    uint256 newJailedUntilBlock = Math.addIfNonZero(block.number, _jailDurationForUnavailabilityTier2Threshold);\\n\\n    if (count == _unavailabilityTier2Threshold) {\\n      emit Slashed(validatorId, SlashType.UNAVAILABILITY_TIER_2, period);\\n      validatorContract.execSlash(validatorId, newJailedUntilBlock, _slashAmountForUnavailabilityTier2Threshold, false);\\n    } else if (count == _unavailabilityTier1Threshold) {\\n      bool tier1SecondTime = _checkBailedOutAtPeriodById(validatorId, period);\\n      if (!tier1SecondTime) {\\n        emit Slashed(validatorId, SlashType.UNAVAILABILITY_TIER_1, period);\\n        validatorContract.execSlash(validatorId, 0, 0, false);\\n      } else {\\n        /// Handles tier-3\\n        emit Slashed(validatorId, SlashType.UNAVAILABILITY_TIER_3, period);\\n        validatorContract.execSlash(validatorId, newJailedUntilBlock, _slashAmountForUnavailabilityTier2Threshold, true);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 tier1Threshold,\\n    uint256 tier2Threshold,\\n    uint256 slashAmountForTier2,\\n    uint256 jailDurationForTier2\\n  ) external override onlyAdmin {\\n    _setUnavailabilitySlashingConfigs({\\n      tier1Threshold: tier1Threshold,\\n      tier2Threshold: tier2Threshold,\\n      slashAmountForTier2: slashAmountForTier2,\\n      jailDurationForTier2: jailDurationForTier2\\n    });\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 unavailabilityTier1Threshold_,\\n      uint256 unavailabilityTier2Threshold_,\\n      uint256 slashAmountForUnavailabilityTier2Threshold_,\\n      uint256 jailDurationForUnavailabilityTier2Threshold_\\n    )\\n  {\\n    return (\\n      _unavailabilityTier1Threshold,\\n      _unavailabilityTier2Threshold,\\n      _slashAmountForUnavailabilityTier2Threshold,\\n      _jailDurationForUnavailabilityTier2Threshold\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function currentUnavailabilityIndicator(TConsensus consensus) external view override returns (uint256) {\\n    return _getUnavailabilityIndicatorById(\\n      __css2cid(consensus), IRoninValidatorSet(getContract(ContractType.VALIDATOR)).currentPeriod()\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashUnavailability\\n   */\\n  function getUnavailabilityIndicator(\\n    TConsensus consensus,\\n    uint256 period\\n  ) external view virtual override returns (uint256) {\\n    return _getUnavailabilityIndicatorById(__css2cid(consensus), period);\\n  }\\n\\n  function _getUnavailabilityIndicatorById(address validatorId, uint256 period) internal view virtual returns (uint256) {\\n    return _unavailabilityIndicator[validatorId][period];\\n  }\\n\\n  /**\\n   * @dev Sets the unavailability indicator of the `_validator` at `_period`.\\n   */\\n  function _setUnavailabilityIndicator(address _validator, uint256 _period, uint256 _indicator) internal virtual {\\n    _unavailabilityIndicator[_validator][_period] = _indicator;\\n  }\\n\\n  /**\\n   * @dev See `ISlashUnavailability-setUnavailabilitySlashingConfigs`.\\n   */\\n  function _setUnavailabilitySlashingConfigs(\\n    uint256 tier1Threshold,\\n    uint256 tier2Threshold,\\n    uint256 slashAmountForTier2,\\n    uint256 jailDurationForTier2\\n  ) internal {\\n    if (tier1Threshold > tier2Threshold) revert ErrInvalidThreshold(msg.sig);\\n\\n    _unavailabilityTier1Threshold = tier1Threshold;\\n    _unavailabilityTier2Threshold = tier2Threshold;\\n    _slashAmountForUnavailabilityTier2Threshold = slashAmountForTier2;\\n    _jailDurationForUnavailabilityTier2Threshold = jailDurationForTier2;\\n    emit UnavailabilitySlashingConfigsUpdated(tier1Threshold, tier2Threshold, slashAmountForTier2, jailDurationForTier2);\\n  }\\n\\n  /**\\n   * @dev Returns whether the account `_addr` should be slashed or not.\\n   */\\n  function _shouldSlash(TConsensus consensus, address validatorId) internal view virtual returns (bool);\\n\\n  /**\\n   * @dev See `ICreditScore-checkBailedOutAtPeriodById`\\n   */\\n  function _checkBailedOutAtPeriodById(address validatorId, uint256 period) internal view virtual returns (bool);\\n\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0xb74c3e2686a36643ad09cf4afec438d31e1a295cd7394ededc6b0b95600f8af5\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\n\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x48a81c14acbe613ff334674f913cf287eb14d52134abba5a7e44ebaba3b3adfc\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */\\n  UNKNOWN,\\n  /*  1 */\\n  PAUSE_ENFORCER,\\n  /*  2 */\\n  BRIDGE,\\n  /*  3 */\\n  BRIDGE_TRACKING,\\n  /*  4 */\\n  GOVERNANCE_ADMIN,\\n  /*  5 */\\n  MAINTENANCE,\\n  /*  6 */\\n  SLASH_INDICATOR,\\n  /*  7 */\\n  STAKING_VESTING,\\n  /*  8 */\\n  VALIDATOR,\\n  /*  9 */\\n  STAKING,\\n  /* 10 */\\n  RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */\\n  BRIDGE_MANAGER,\\n  /* 12 */\\n  BRIDGE_SLASH,\\n  /* 13 */\\n  BRIDGE_REWARD,\\n  /* 14 */\\n  FAST_FINALITY_TRACKING,\\n  /* 15 */\\n  PROFILE,\\n  /* 16 */\\n  RANDOM_BEACON\\n}\\n\",\"keccak256\":\"0x2ef1b8fcaa991f1d856ca67d19e8ac1576319c03c874cedcc6a7da1860d65a78\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibArray } from \\\"../libraries/LibArray.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport {\\n  ErrAddressIsNotCreatedEOA,\\n  ErrZeroAddress,\\n  ErrOnlySelfCall,\\n  ErrZeroCodeContract,\\n  ErrUnsupportedInterface\\n} from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using LibArray for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert LibArray.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x7d525f577b73f76a4327fe3cb6ad410b2fa8ae7c5702b2128bb899cae3ee52b5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */\\n  UNKNOWN,\\n  /* 1 */\\n  ADMIN,\\n  /* 2 */\\n  COINBASE,\\n  /* 3 */\\n  GOVERNOR,\\n  /* 4 */\\n  CANDIDATE_ADMIN,\\n  /* 5 */\\n  WITHDRAWAL_MIGRATOR,\\n  /* 6 */\\n  __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */\\n  BLOCK_PRODUCER,\\n  /* 8 */\\n  VALIDATOR_CANDIDATE,\\n  /* 9 */\\n  CONSENSUS,\\n  /* 10 */\\n  TREASURY\\n}\\n\",\"keccak256\":\"0xb4be3fbf480504f85653a3f598dd90b32b1afd1c93de472cfbcc0a0741c1aece\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 194391,
  "storageLayout": {
    "storage": [
      {
        "astId": 45344,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedValidator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 35071,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashDoubleSignAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 35074,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_doubleSigningJailUntilBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 35077,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_doubleSigningOffsetLimitBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 35082,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_submittedEvidence",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 35087,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)24_storage"
      },
      {
        "astId": 35305,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashFastFinalityAmount",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 35308,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_fastFinalityJailUntilBlock",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 35313,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_processedEvidence",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 35318,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_uint256)21_storage"
      },
      {
        "astId": 45356,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedTrustedOrg",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 45360,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedGovernanceAdmin",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 35040,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "__deprecatedBridgeVotingSlashed",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 35043,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "__deprecatedBridgeVotingThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 35046,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "__deprecatedBridgeVotingSlashAmount",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 35051,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 45352,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______deprecatedMaintenance",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 35003,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedMissingVotesRatioTier1",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 35006,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedMissingVotesRatioTier2",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 35009,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedJailDurationForMissingVotesRatioTier2",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 35012,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "____deprecatedSkipBridgeOperatorSlashingThreshold",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 35017,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 36161,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_lastUnavailabilitySlashedBlock",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 36168,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityIndicator",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 36171,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier1Threshold",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 36174,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_unavailabilityTier2Threshold",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 36177,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_slashAmountForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 36180,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_jailDurationForUnavailabilityTier2Threshold",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 36185,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "169",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 34379,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_checkBailedOutAtPeriod",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 34384,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_creditScore",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34387,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_gainCreditScore",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 34390,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_maxCreditScore",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 34393,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_bailOutCostMultiplier",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 34396,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_cutOffPercentageAfterBailout",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 34401,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "______gap",
        "offset": 0,
        "slot": "225",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 106616,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initialized",
        "offset": 0,
        "slot": "275",
        "type": "t_uint8"
      },
      {
        "astId": 106619,
        "contract": "contracts/ronin/slash-indicator/SlashIndicator.sol:SlashIndicator",
        "label": "_initializing",
        "offset": 1,
        "slot": "275",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)21_storage": {
        "encoding": "inplace",
        "label": "uint256[21]",
        "numberOfBytes": "672",
        "base": "t_uint256"
      },
      "t_array(t_uint256)24_storage": {
        "encoding": "inplace",
        "label": "uint256[24]",
        "numberOfBytes": "768",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "timestamp": 1717148297,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}