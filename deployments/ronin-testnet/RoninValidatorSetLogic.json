{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "fallback",
      "stateMutability": "payable"
    },
    {
      "type": "receive",
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "DEFAULT_ADDITION_GAS",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "PERIOD_DURATION",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkJailed",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkJailedAtBlock",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "blockNum",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyJailed",
      "inputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkManyJailedById",
      "inputs": [
        {
          "name": "candidateIds",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool[]",
          "internalType": "bool[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMiningRewardDeprecated",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkMiningRewardDeprecatedAtPeriod",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "currentPeriod",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "currentPeriodStartAtBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "emergencyExitLockedAmount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "emergencyExpiryDuration",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "epochEndingAt",
      "inputs": [
        {
          "name": "_block",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "epochOf",
      "inputs": [
        {
          "name": "_block",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "execApplyValidatorCandidate",
      "inputs": [
        {
          "name": "candidateAdmin",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "treasuryAddr",
          "type": "address",
          "internalType": "address payable"
        },
        {
          "name": "commissionRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execBailOut",
      "inputs": [
        {
          "name": "validatorId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execChangeAdminAddr",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newAdmin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execChangeConsensusAddr",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newConsensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execChangeTreasuryAddr",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newTreasury",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execReleaseLockedFundForEmergencyExitRequest",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRequestEmergencyExit",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "secLeftToRevoke",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRequestRenounceCandidate",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "secsLeft",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execRequestUpdateCommissionRate",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "effectiveDaysOnwards",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "commissionRate",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execSlash",
      "inputs": [
        {
          "name": "validatorId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "newJailedUntil",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "slashAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "cannotBailout",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getBlockProducerIds",
      "inputs": [],
      "outputs": [
        {
          "name": "cids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getBlockProducers",
      "inputs": [],
      "outputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCandidateInfo",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ICandidateManager.ValidatorCandidate",
          "components": [
            {
              "name": "__shadowedAdmin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "__shadowedConsensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "__shadowedTreasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "____deprecatedBridgeOperatorAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "commissionRate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "revokingTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "topupDeadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCandidateInfoById",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ICandidateManager.ValidatorCandidate",
          "components": [
            {
              "name": "__shadowedAdmin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "__shadowedConsensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "__shadowedTreasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "____deprecatedBridgeOperatorAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "commissionRate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "revokingTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "topupDeadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCandidateInfos",
      "inputs": [],
      "outputs": [
        {
          "name": "list",
          "type": "tuple[]",
          "internalType": "struct ICandidateManager.ValidatorCandidate[]",
          "components": [
            {
              "name": "__shadowedAdmin",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "__shadowedConsensus",
              "type": "address",
              "internalType": "TConsensus"
            },
            {
              "name": "__shadowedTreasury",
              "type": "address",
              "internalType": "address payable"
            },
            {
              "name": "____deprecatedBridgeOperatorAddr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "commissionRate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "revokingTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "topupDeadline",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getCommissionChangeSchedule",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ICandidateManager.CommissionSchedule",
          "components": [
            {
              "name": "effectiveTimestamp",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "commissionRate",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ],
      "outputs": [
        {
          "name": "contract_",
          "type": "address",
          "internalType": "address payable"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getEmergencyExitInfo",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "_info",
          "type": "tuple",
          "internalType": "struct ICommonInfo.EmergencyExitInfo",
          "components": [
            {
              "name": "lockedAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "recyclingAt",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getJailedTimeLeft",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "isJailed_",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "blockLeft_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "epochLeft_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getJailedTimeLeftAtBlock",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "_blockNum",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "isJailed_",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "blockLeft_",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "epochLeft_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getLastUpdatedBlock",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidatorCandidateIds",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidatorCandidates",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidatorIds",
      "inputs": [],
      "outputs": [
        {
          "name": "cids",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getValidators",
      "inputs": [],
      "outputs": [
        {
          "name": "consensusList",
          "type": "address[]",
          "internalType": "TConsensus[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        {
          "name": "__slashIndicatorContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__stakingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__stakingVestingContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__maintenanceContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "__roninTrustedOrganizationContract",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__maxValidatorCandidate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__minEffectiveDaysOnwards",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__numberOfBlocksInEpoch",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "__emergencyExitConfigs",
          "type": "uint256[2]",
          "internalType": "uint256[2]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV2",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV3",
      "inputs": [
        {
          "name": "fastFinalityTrackingContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "initializeV4",
      "inputs": [
        {
          "name": "profileContract",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "isBlockProducer",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isBlockProducerById",
      "inputs": [
        {
          "name": "id",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isCandidateAdmin",
      "inputs": [
        {
          "name": "consensusAddr",
          "type": "address",
          "internalType": "TConsensus"
        },
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isCandidateAdminById",
      "inputs": [
        {
          "name": "candidateId",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isPeriodEnding",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isValidatorCandidate",
      "inputs": [
        {
          "name": "consensus",
          "type": "address",
          "internalType": "TConsensus"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxPrioritizedValidatorNumber",
      "inputs": [],
      "outputs": [
        {
          "name": "_maximumPrioritizedValidatorNumber",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxValidatorCandidate",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "maxValidatorNumber",
      "inputs": [],
      "outputs": [
        {
          "name": "_maximumValidatorNumber",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "minEffectiveDaysOnward",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "numberOfBlocksInEpoch",
      "inputs": [],
      "outputs": [
        {
          "name": "_numberOfBlocks",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "setContract",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setEmergencyExitLockedAmount",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setEmergencyExpiryDuration",
      "inputs": [
        {
          "name": "duration",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaxValidatorCandidate",
      "inputs": [
        {
          "name": "_number",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMinEffectiveDaysOnwards",
      "inputs": [
        {
          "name": "_numOfDays",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "submitBlockReward",
      "inputs": [],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "totalBlockProducer",
      "inputs": [],
      "outputs": [
        {
          "name": "total",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "totalDeprecatedReward",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tryGetPeriodOfEpoch",
      "inputs": [
        {
          "name": "_epoch",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "_filled",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "_periodNumber",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "validatorCount",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "wrapUpEpoch",
      "inputs": [],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "event",
      "name": "BlockProducerSetUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "epoch",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BlockRewardDeprecated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "rewardAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "deprecatedType",
          "type": "uint8",
          "indexed": false,
          "internalType": "enum ICoinbaseExecution.BlockRewardDeprecatedType"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BlockRewardSubmitted",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "submittedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "bonusAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BridgeOperatorRewardDistributed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "bridgeOperator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipientAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BridgeOperatorRewardDistributionFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "bridgeOperator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BridgeOperatorSetUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "epoch",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "bridgeOperators",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidateGranted",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "treasuryAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "admin",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidateRevokingTimestampUpdated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "revokingTimestamp",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidateTopupDeadlineUpdated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "topupDeadline",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CandidatesRevoked",
      "inputs": [
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CommissionRateUpdateScheduled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "effectiveTimestamp",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "rate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CommissionRateUpdated",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "rate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ContractUpdated",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "indexed": true,
          "internalType": "enum ContractType"
        },
        {
          "name": "addr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DeprecatedRewardRecycleFailed",
      "inputs": [
        {
          "name": "recipientAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "balance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "DeprecatedRewardRecycled",
      "inputs": [
        {
          "name": "recipientAddr",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitLockedAmountUpdated",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitLockedFundReleased",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "unlockedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitLockedFundReleasingFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "unlockedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExitRequested",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "lockedAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "EmergencyExpiryDurationUpdated",
      "inputs": [
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "FastFinalityRewardDistributed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "FastFinalityRewardDistributionFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Initialized",
      "inputs": [
        {
          "name": "version",
          "type": "uint8",
          "indexed": false,
          "internalType": "uint8"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaxValidatorCandidateUpdated",
      "inputs": [
        {
          "name": "threshold",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MinEffectiveDaysOnwardsUpdated",
      "inputs": [
        {
          "name": "numOfDays",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MiningRewardDistributed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MiningRewardDistributionFailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "recipient",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "StakingRewardDistributed",
      "inputs": [
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "StakingRewardDistributionFailed",
      "inputs": [
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]",
          "indexed": false,
          "internalType": "uint256[]"
        },
        {
          "name": "contractBalance",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorPunished",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "jailedUntil",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "deductedStakingAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "blockProducerRewardDeprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        },
        {
          "name": "bridgeOperatorRewardDeprecated",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorSetUpdated",
      "inputs": [
        {
          "name": "period",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "cids",
          "type": "address[]",
          "indexed": false,
          "internalType": "address[]"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ValidatorUnjailed",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "period",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WrappedUpEpoch",
      "inputs": [
        {
          "name": "periodNumber",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "epochNumber",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "periodEnding",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "ErrAlreadyRequestedEmergencyExit",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyRequestedRevokingCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyRequestedUpdatingCommissionRate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAlreadyWrappedEpoch",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrAtEndOfEpochOnly",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCallerMustBeCoinbase",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrCannotBailout",
      "inputs": [
        {
          "name": "validator",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrContractTypeNotFound",
      "inputs": [
        {
          "name": "contractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExceedsMaxNumberOfCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrExistentCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrExistentCandidateAdmin",
      "inputs": [
        {
          "name": "candidateAdminAddr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrExistentTreasury",
      "inputs": [
        {
          "name": "treasuryAddr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInsufficientBalance",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "currentBalance",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "sendAmount",
          "type": "uint256",
          "internalType": "uint256"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrInvalidCommissionRate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidEffectiveDaysOnwards",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMaxPrioritizedValidatorNumber",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrInvalidMinEffectiveDaysOnwards",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrLockedFundMightBeRecycled",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrLockedFundReleaseInfoNotFound",
      "inputs": [
        {
          "name": "cid",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrNonExistentCandidate",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrRecipientRevert",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrTrustedOrgCannotRenounce",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnauthorized",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedRole",
          "type": "uint8",
          "internalType": "enum RoleAccess"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrUnauthorizedReceiveRON",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ErrUnexpectedInternalCall",
      "inputs": [
        {
          "name": "msgSig",
          "type": "bytes4",
          "internalType": "bytes4"
        },
        {
          "name": "expectedContractType",
          "type": "uint8",
          "internalType": "enum ContractType"
        },
        {
          "name": "actual",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ErrZeroCodeContract",
      "inputs": [
        {
          "name": "addr",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "NonExistentRecyclingInfo",
      "inputs": []
    }
  ],
  "absolutePath": "RoninValidatorSet.sol",
  "address": "0x47B9895DebC6c23B30A654eC0d2D0e5ef8e6989A",
  "ast": "",
  "blockNumber": 27813238,
  "bytecode": "0x6080604052348015600f57600080fd5b506016601a565b60d8565b600054610100900460ff161560855760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101560d6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615ace806100e76000396000f3fe6080604052600436106103e25760003560e01c8063612c8d981161020d578063a3d545f511610128578063d09f1ab4116100bb578063e8712aa71161008a578063eeb629a81161006f578063eeb629a814610b4c578063eecaefd914610b61578063f883afaf14610b81576103f1565b8063e8712aa714610b0c578063edb194bb14610b2c576103f1565b8063d09f1ab414610a7f578063dd716ad314610a94578063de981f1b14610ab4578063e5125a1d14610aec576103f1565b8063ba77b06c116100f7578063ba77b06c14610a15578063c3c8b5d614610a2a578063c4e227f314610a4a578063cdaa4e8114610a5f576103f1565b8063a3d545f5146109b6578063a66c0f77146109d6578063afc69d73146109eb578063b7ab4db514610a00576103f1565b80637593ff71116101a057806387c891bd1161016f57806387c891bd1461094c57806396585fc2146109615780639a57bd9314610981578063a0c3f2d214610996576103f1565b80637593ff71146108cc5780637e1dc16f146108ec578063865e6fd31461090c578063873a5a701461092c576103f1565b8063690b7536116101dc578063690b75361461087a5780636aa1c2ef1461088f5780636ef826c8146108a457806372e46810146108c4576103f1565b8063612c8d981461080e57806365244ece146108235780636558954f146108435780636611f8431461085a576103f1565b80632f78204c116102fd5780634de2b7351161029057806352091f171161025f57806352091f17146107ba5780635248184a146107c25780635cd8a76b146107e4578063605239a1146107f9576103f1565b80634de2b735146107365780634e9b8b0a146107635780634ee4d72b146107855780634f2a693f1461079a576103f1565b8063468c96ae116102cc578063468c96ae1461069d57806346ebb232146106d457806349096d26146106f45780634d8df06314610716576103f1565b80632f78204c1461061d5780633101cfcb1461063d57806331a8aef51461065d578063367ec12b1461067d576103f1565b80631196ab661161037557806328bde1e11161034457806328bde1e11461059b5780632924de71146105bb578063297a8fca146105db5780632d784a98146105f0576103f1565b80631196ab661461052657806315b5ebde14610546578063217f35c21461056657806323c65eb01461057b576103f1565b80630bbed9af116103b15780630bbed9af146104945780630f43a677146104b4578063110a8308146104c957806311662dc2146104e9576103f1565b806303827884146103f95780630447e5911461042257806304d971ab1461044f578063060406181461047f576103f1565b366103f1576103ef610ba1565b005b6103ef610ba1565b34801561040557600080fd5b5061040f61183881565b6040519081526020015b60405180910390f35b34801561042e57600080fd5b5061044261043d366004614ed1565b610c20565b6040516104199190614eee565b34801561045b57600080fd5b5061046f61046a366004614f4c565b610d00565b6040519015158152602001610419565b34801561048b57600080fd5b5061040f610d3a565b3480156104a057600080fd5b506103ef6104af366004614f4c565b610d4a565b3480156104c057600080fd5b5060aa5461040f565b3480156104d557600080fd5b506103ef6104e4366004614ed1565b610d87565b3480156104f557600080fd5b50610509610504366004614f85565b610e75565b604080519315158452602084019290925290820152606001610419565b34801561053257600080fd5b506103ef610541366004614fb1565b610e9a565b34801561055257600080fd5b506103ef610561366004614f85565b610eae565b34801561057257600080fd5b5061046f610fc8565b34801561058757600080fd5b5061046f610596366004614f85565b610fdd565b3480156105a757600080fd5b506104426105b6366004614ed1565b611011565b3480156105c757600080fd5b5061046f6105d6366004614ed1565b611065565b3480156105e757600080fd5b5060045461040f565b3480156105fc57600080fd5b5061061061060b366004614ed1565b611095565b6040516104199190614fca565b34801561062957600080fd5b506103ef610638366004614fef565b611129565b34801561064957600080fd5b506103ef610658366004614ed1565b611349565b34801561066957600080fd5b5061046f610678366004614f85565b6113ed565b34801561068957600080fd5b506103ef61069836600461504a565b611424565b3480156106a957600080fd5b506106bd6106b8366004614fb1565b61159e565b604080519215158352602083019190915201610419565b3480156106e057600080fd5b5061046f6106ef366004614f4c565b6115dc565b34801561070057600080fd5b50610709611603565b6040516104199190615110565b34801561072257600080fd5b506103ef610731366004614fb1565b611615565b34801561074257600080fd5b506107566107513660046151a9565b611626565b60405161041991906151eb565b34801561076f57600080fd5b5061077861166c565b604051610419919061526a565b34801561079157600080fd5b5060e45461040f565b3480156107a657600080fd5b506103ef6107b5366004614fb1565b611736565b6103ef611747565b3480156107ce57600080fd5b506107d7611bb7565b604051610419919061527d565b3480156107f057600080fd5b506103ef611d0b565b34801561080557600080fd5b5060725461040f565b34801561081a57600080fd5b5060765461040f565b34801561082f57600080fd5b5061046f61083e366004614ed1565b611e9d565b34801561084f57600080fd5b5061040f6201518081565b34801561086657600080fd5b506103ef610875366004614fb1565b611eb0565b34801561088657600080fd5b5060e55461040f565b34801561089b57600080fd5b5060015461040f565b3480156108b057600080fd5b506103ef6108bf366004614f4c565b611ec1565b6103ef611efe565b3480156108d857600080fd5b5061046f6108e7366004614fb1565b61231d565b3480156108f857600080fd5b506107566109073660046151a9565b612341565b34801561091857600080fd5b506103ef61092736600461531e565b61237f565b34801561093857600080fd5b5061046f610947366004614ed1565b61239e565b34801561095857600080fd5b5060025461040f565b34801561096d57600080fd5b5061050961097c366004614ed1565b6123e0565b34801561098d57600080fd5b50610778612404565b3480156109a257600080fd5b5061046f6109b1366004614ed1565b6124b1565b3480156109c257600080fd5b5061040f6109d1366004614fb1565b6124dc565b3480156109e257600080fd5b5060e65461040f565b3480156109f757600080fd5b5061040f6124e7565b348015610a0c57600080fd5b5061070961252a565b348015610a2157600080fd5b50610709612537565b348015610a3657600080fd5b506103ef610a45366004614f4c565b612544565b348015610a5657600080fd5b50610778612810565b348015610a6b57600080fd5b506103ef610a7a366004614f85565b612872565b348015610a8b57600080fd5b5061040f612b13565b348015610aa057600080fd5b506103ef610aaf366004614f85565b612b8c565b348015610ac057600080fd5b50610ad4610acf36600461533a565b612c44565b6040516001600160a01b039091168152602001610419565b348015610af857600080fd5b506103ef610b07366004615355565b612cd3565b348015610b1857600080fd5b5061046f610b27366004614ed1565b612e17565b348015610b3857600080fd5b50610610610b47366004614ed1565b612e22565b348015610b5857600080fd5b5061040f612e7c565b348015610b6d57600080fd5b506103ef610b7c366004614f4c565b612eb4565b348015610b8d57600080fd5b506103ef610b9c36600461538a565b612eee565b610bab6007612c44565b6001600160a01b0316336001600160a01b031614158015610be75750610bd16009612c44565b6001600160a01b0316336001600160a01b031614155b15610c1e576040517fffcb451300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040805160e08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c083018290526001600160a01b0385168252607490529190912054610c8b5760405163a64b34ad60e01b815260040160405180910390fd5b506001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015290565b6000610d31610d0e84613172565b6001600160a01b0390811660009081526075602052604090205481169084161490565b90505b92915050565b6000610d4560035490565b905090565b600f610d5581613203565b506001600160a01b03918216600090815260756020526040902060020180546001600160a01b03191691909216179055565b600054600490610100900460ff16158015610da9575060005460ff8083169116105b610e115760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff831617610100179055610e30600f83613268565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000806000610e8c610e8686613172565b8561330c565b9250925092505b9250925092565b610ea261338e565b610eab81613402565b50565b6006610eb981613203565b6001600160a01b0383166000908152603c60205260409020544311610f15576040517f53e0424d0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610e08565b6001600160a01b038316600081815260386020908152604080832086845282528083208054600160ff199182168117909255948452603783528184208785529092529091208054909216909155610f6c90436153f1565b6001600160a01b0384166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e90610fbb9085815260200190565b60405180910390a2505050565b6000610d45610fd642613472565b6003541090565b600080610fe984613172565b6001600160a01b0381166000908152603a60205260409020549091508311155b949350505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529061105383613172565b905061105e81610c20565b9392505050565b60008061107183613172565b6001600160a01b0381166000908152603a602052604090205490915043111561105e565b604080518082019091526000808252602082015260e860006110b684613172565b6001600160a01b03168152602080820192909252604090810160009081208251808401909352805483526001015492820183905290925003611124576040517fe1fba9e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600661113481613203565b600061113e610d3a565b6001600160a01b03871660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e09091529190205491925061118c91615404565b60e4600082825461119d9190615404565b90915550506001600160a01b038616600090815260e06020908152604080832083905560e18252808320839055603a9091529020546111dd908690613481565b6001600160a01b0387166000908152603a602052604090205583156112985760006112086009612c44565b60405163138ac02f60e11b81526001600160a01b038981166004830152602482018890529190911690632715805e906044016020604051808303816000875af1158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d9190615417565b90508060e460008282546112919190615404565b9091555050505b82156112dc576001600160a01b0386166000908152603c60205260409020546112c2908690613481565b6001600160a01b0387166000908152603c60205260409020555b6001600160a01b0386166000818152603a6020908152604080832054815190815291820188905260019082015260608101919091528291907f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a9060800160405180910390a3505050505050565b600054600390610100900460ff1615801561136b575060005460ff8083169116105b6113ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e08565b6000805461ffff191660ff831617610100179055610e30600e83613268565b6000610d316113fb84613172565b6001600160a01b0316600090815260376020908152604080832086845290915290205460ff1690565b600054610100900460ff16158080156114445750600054600160ff909116105b8061145e5750303b15801561145e575060005460ff166001145b6114c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e08565b6000805460ff1916600117905580156114e4576000805461ff0019166101001790555b6114ef60068e613268565b6114fa60098d613268565b61150560078c613268565b61151060058b613268565b61151b600a8a613268565b61152486613498565b61152d84613402565b61153782356134cd565b6115446020830135613502565b6001839055801561158f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b6000806115aa436124dc565b831115806115c5575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6001600160a01b038281166000908152607560205260408120549091838116911614610d31565b6060610d4561161061166c565b613537565b61161d61338e565b610eab81613502565b6060610d316116678484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506135b392505050565b61362f565b606060aa5467ffffffffffffffff81111561168957611689615446565b6040519080825280602002602001820160405280156116b2578160200160208202803683370190505b5090506000805b825181101561173057600081815260ab60205260409020546001600160a01b03166116e3816136d5565b15611727578084846116f48161545c565b95508151811061170657611706615430565b60200260200101906001600160a01b031690816001600160a01b0316815250505b506001016116b9565b50815290565b61173e61338e565b610eab81613498565b61174f61370f565b600061175a33613172565b90506000611767826136d5565b8015611779575061177782613748565b155b80156117b957506117b78261178c610d3a565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b155b90506000806117c86007612c44565b6040517f0634f5b90000000000000000000000000000000000000000000000000000000081528415156004820152600060248201526001600160a01b039190911690630634f5b9906044016080604051808303816000875af1158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190615475565b935050925050826118c4573460e460008282546118739190615404565b92505081905550836001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e3460016040516118b69291906154ca565b60405180910390a250505050565b60408051348152602081018490526001600160a01b038616917f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b1910160405180910390a26000611912610d3a565b905060006119208434615404565b9050600061271061193185846154ee565b61193b919061551b565b9050600061194982846153f1565b905060008260e2600082825461195f9190615404565b909155505033600090815260386020908152604080832088845290915290205460ff1615611a735760006119936006612c44565b6001600160a01b031663c6391fa26040518163ffffffff1660e01b8152600401608060405180830381865afa1580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f4919061552f565b93505050506127108184611a0891906154ee565b611a12919061551b565b91508160e46000828254611a269190615404565b92505081905550896001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e836002604051611a699291906154ca565b60405180910390a2505b611a7d81836153f1565b9150600080611a8c6009612c44565b6001600160a01b0316634530d2026040518163ffffffff1660e01b81526004016040805180830381865afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aec9190615565565b6001600160a01b038d1660009081526075602052604081206004015492945090925090611b2390611b1d9084613769565b84613481565b90506000612710611b3487846154ee565b611b3e919061551b565b6001600160a01b038e16600090815260e06020526040812080549293508392909190611b6b908490615404565b90915550611b7b905081876153f1565b6001600160a01b038e16600090815260e1602052604081208054909190611ba3908490615404565b909155505050505050505050505050505050565b60735460609067ffffffffffffffff811115611bd557611bd5615446565b604051908082528060200260200182016040528015611c3c57816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c08201528252600019909201910181611bf35790505b50905060005b8151811015611d07576075600060738381548110611c6257611c62615430565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611cf457611cf4615430565b6020908102919091010152600101611c42565b5090565b600054600290610100900460ff16158015611d2d575060005460ff8083169116105b611d905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e08565b6000805461ffff191660ff831617610100179055607154611dbc906009906001600160a01b0316613268565b606f54611dd4906005906001600160a01b0316613268565b607054611dec906006906001600160a01b0316613268565b606d54611e04906007906001600160a01b0316613268565b60a854611e1c90600a906001600160a01b0316613268565b607180546001600160a01b0319908116909155606f8054821690556070805482169055606d805482169055606e80548216905560a8805490911690556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6000610d34611eab83613172565b6136d5565b611eb861338e565b610eab816134cd565b600f611ecc81613203565b506001600160a01b03918216600090815260756020526040902060010180546001600160a01b03191691909216179055565b611f0661370f565b611f0f4361231d565b611f45576040517f6c74eecf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f4e436124dc565b611f596002546124dc565b10611f90576040517f2458f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b436002556000611f9f42613472565b90506000611fae826003541090565b90506000611fba610d3a565b90506000611fc7436124dc565b90506000611fd6826001615404565b90506000611fe2612404565b90506000611ff06010612c44565b6040517fe3a4376500000000000000000000000000000000000000000000000000000000815260048101879052602481018990529091506001600160a01b0382169063e3a4376590604401600060405180830381600087803b15801561205557600080fd5b505af1158015612069573d6000803e3d6000fd5b505050506120778483613778565b85156122ad57600060738054806020026020016040519081016040528092919081815260200182805480156120d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120b7575b50506040517f76987772000000000000000000000000000000000000000000000000000000008152600481018b9052602481018d905293945050506001600160a01b0384169163769877729150604401600060405180830381600087803b15801561213f57600080fd5b505af1158015612153573d6000803e3d6000fd5b5050505060008061216488846138f2565b9150915061217488848484613ade565b61217c613c01565b612184613d55565b60006121906006612c44565b6040517f185368db0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063185368db906121da9087908d90600401615589565b600060405180830381600087803b1580156121f457600080fd5b505af1158015612208573d6000803e3d6000fd5b5050505060006122178c613eb1565b805190915015612299576040517f07c2d2f60000000000000000000000000000000000000000000000000000000081526001600160a01b038316906307c2d2f69061226690849060040161526a565b600060405180830381600087803b15801561228057600080fd5b505af1158015612294573d6000803e3d6000fd5b505050505b6122a4436001615404565b60045550505050505b6122b88188856143d9565b91506122c5878484614470565b83857f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce7886040516122fa911515815260200190565b60405180910390a350506000908152600560205260409020849055505050600355565b60006001805461232d91906153f1565b60015461233a90846155ab565b1492915050565b6060610d3183838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061362f92505050565b61238761338e565b6123908161470c565b61239a8282613268565b5050565b6000806123a9610d3a565b905061105e6123b784613172565b6001600160a01b0316600090815260376020908152604080832085845290915290205460ff1690565b60008060006123f76123f185613172565b4361330c565b9250925092509193909250565b606060aa5467ffffffffffffffff81111561242157612421615446565b60405190808252806020026020018201604052801561244a578160200160208202803683370190505b5090506000805b82518110156124ac57600081815260ab602052604090205483516001600160a01b039091169250829084908390811061248c5761248c615430565b6001600160a01b0390921660209283029190910190910152600101612451565b505090565b6000610d346124bf83613172565b6001600160a01b0316600090815260746020526040902054151590565b6000610d348261475b565b6000805b60aa54811015611d0757600081815260ab6020526040902054612516906001600160a01b03166136d5565b15612522576001909101905b6001016124eb565b6060610d45611610612404565b6060610d45611610612810565b61254c61338e565b6001600160a01b038216600090815260e8602052604081206001015490036125ab576040517fe8e6d2dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610e08565b60e7548060005b8281101561260157846001600160a01b031660e782815481106125d7576125d7615430565b6000918252602090912001546001600160a01b0316036125f957809150612601565b6001016125b2565b50818103612646576040517fb69ea4250000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610e08565b6001600160a01b038416600090815260e860205260409020548015612809576001600160a01b038516600090815260e8602052604081208181556001908101919091558311156127085760e761269d6001856153f1565b815481106126ad576126ad615430565b60009182526020909120015460e780546001600160a01b0390921691849081106126d9576126d9615430565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612719576127196155bf565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff1916600117905561276b8482611838614776565b156127c457836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e4836040516127b591815260200190565b60405180910390a35050505050565b604080518281524760208201526001600160a01b0380871692908816917f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a191016127b5565b5050505050565b6060607380548060200260200160405190810160405280929190818152602001828054801561286857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161284a575b5050505050905090565b600961287d81613203565b6001600160a01b038316600090815260e8602052604090206001810154156128d1576040517f2bd5598800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006128dd8442615404565b6001600160a01b038616600090815260756020526040902090915061290290826147eb565b6001600160a01b0385166000818152603b602052604080822084905560e554905163138ac02f60e11b815260048101939093526024830152903390632715805e906044016020604051808303816000875af1158015612965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129899190615417565b90508015612ac857600060e654426129a19190615404565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038b1617905583865585018190559050612a287fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001600160a01b03888116600081815260756020526040908190206002015490517fa2fae5700000000000000000000000000000000000000000000000000000000081526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b158015612aae57600080fd5b505af1158015612ac2573d6000803e3d6000fd5b50505050505b856001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c482604051612b0391815260200190565b60405180910390a2505050505050565b6000612b1f6010612c44565b6001600160a01b031663035d006260016040518263ffffffff1660e01b8152600401612b4b91906155d5565b602060405180830381865afa158015612b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d459190615417565b6009612b9781613203565b612ba083614887565b15612bd7576040517f030081e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166000908152607560205260409020600581015415612c2b576040517ffab9167300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c3e81612c398542615404565b6147eb565b50505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb6000836010811115612c7b57612c7b6154b4565b60ff1681526020810191909152604001600020546001600160a01b031690508061112457816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610e089190615603565b6009612cde81613203565b6001600160a01b03841660009081526077602052604090205415612d2e576040517f5e65b9ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710821115612d5157604051631b8454a360e21b815260040160405180910390fd5b607654831015612d8d576040517ffa0ae69300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152607760205260408120906201518085612db5824261551b565b612dbf9190615404565b612dc991906154ee565b8083556001830185905560408051828152602081018790529192506001600160a01b038816917f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f219101612b03565b6000610d34826136d5565b604080518082019091526000808252602082015260776000612e4384613172565b6001600160a01b031681526020808201929092526040908101600020815180830190925280548252600101549181019190915292915050565b6000612e886010612c44565b6001600160a01b031663035d006260026040518263ffffffff1660e01b8152600401612b4b91906155d5565b600f612ebf81613203565b506001600160a01b03918216600090815260756020526040902080546001600160a01b03191691909216179055565b6009612ef981613203565b6073546072548110612f37576040517f8616841b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03851660009081526074602052604090205415612f87576040517f8ad9cdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710831115612faa57604051631b8454a360e21b815260040160405180910390fd5b60005b818110156130a15760006075600060738481548110612fce57612fce615430565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603613043576040517ffc3d8c750000000000000000000000000000000000000000000000000000000081526001600160a01b0389166004820152602401610e08565b60028101546001600160a01b0390811690871603613098576040517f5a674fce0000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152602401610e08565b50600101612fad565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b031990811687179091556075909352818420805484168d881690811782559181018054851687179055600281018054909416968b1696871790935560048301899055905191949093909290917f1ca451a9920472b99355a9cf74185bf017604a7849c113f020888ecec9db93669190a450505050505050565b600061317e600f612c44565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156131df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190615611565b61320c81612c44565b6001600160a01b0316336001600160a01b031614610eab576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610e089392919061562e565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084601081111561329e5761329e6154b4565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392831617905581168260108111156132df576132df6154b4565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b0382166000908152603a6020526040812054819081908481101561334257600080600093509350935050610e93565b6001935061335085826153f1565b61335b906001615404565b9250613366856124dc565b61336f826124dc565b61337991906153f1565b613384906001615404565b9150509250925092565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610c1e576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610e08929190615663565b600181101561343d576040517f17b8970f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a2526790602001611e92565b6000610d34620151808361551b565b6000818310156134915781610d31565b5090919050565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001611e92565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a90602001611e92565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b90602001611e92565b6060613543600f612c44565b6001600160a01b031663b261596f836040518263ffffffff1660e01b815260040161356e919061526a565b600060405180830381865afa15801561358b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3491908101906156d9565b60606135bf600f612c44565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016135ea9190615110565b600060405180830381865afa158015613607573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d349190810190615778565b6060815167ffffffffffffffff81111561364b5761364b615446565b604051908082528060200260200182016040528015613674578160200160208202803683370190505b50905060005b82518110156136cf576136a583828151811061369857613698615430565b6020026020010151613748565b8282815181106136b7576136b7615430565b9115156020928302919091019091015260010161367a565b50919050565b6001600160a01b038116600090815260ac6020526040812054610d349060019060ff166003811115613709576137096154b4565b90614920565b334114610c1e576040517f09f358fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152603a6020526040812054431115610d34565b60008183106134915781610d31565b6000613784600e612c44565b6001600160a01b0316633a205da084846040518363ffffffff1660e01b81526004016137b1929190615807565b600060405180830381865afa1580156137ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137f69190810190615820565b9050600061380382614953565b9050806000036138135750505050565b60e2548351600091908290815b818110156138c2578587828151811061383b5761383b615430565b60200260200101518561384e91906154ee565b613858919061551b565b94508460e360008a848151811061387157613871615430565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546138a89190615404565b909155506138b890508584615404565b9250600101613820565b506138cd82846153f1565b60e460008282546138de9190615404565b9091555050600060e2555050505050505050565b60006060600080845167ffffffffffffffff81111561391357613913615446565b60405190808252806020026020018201604052801561393c578160200160208202803683370190505b50925060005b8551811015613ad45785818151811061395d5761395d615430565b6020908102919091018101516001600160a01b038082166000908152607590935260409092206002015490945016915061399683613748565b1580156139c757506001600160a01b03831660009081526037602090815260408083208a845290915290205460ff16155b15613a45576001600160a01b038316600090815260e160205260409020546139ef9086615404565b6001600160a01b038416600090815260e16020526040902054855191965090859083908110613a2057613a20615430565b602002602001018181525050613a368383614983565b613a408383614a4b565b613a9c565b6001600160a01b038316600090815260e3602090815260408083205460e183528184205460e0909352922054613a7b9190615404565b613a859190615404565b60e46000828254613a969190615404565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e3909152812055600101613942565b5050509250929050565b6000613aea6009612c44565b9050821561280957613afc8184614b06565b15613bbd576040517facd79c460000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063acd79c4690613b4a90879086908a906004016158d7565b600060405180830381600087803b158015613b6457600080fd5b505af1158015613b78573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613baf9392919061590d565b60405180910390a150612c3e565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613bf29493929190615942565b60405180910390a15050505050565b60e754600080805b83831015612c3e5760e78381548110613c2457613c24615430565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613d4a57805460e48054600090613c6c908490615404565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613c9b8561597f565b9450841115613d125760e78481548110613cb757613cb7615430565b60009182526020909120015460e780546001600160a01b039092169185908110613ce357613ce3615430565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613d2357613d236155bf565b600082815260209020810160001990810180546001600160a01b0319169055019055613c09565b600190920191613c09565b60e4548015610eab576000613d6a6007612c44565b600060e481905560408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f59f778df00000000000000000000000000000000000000000000000000000000179052905192935090916001600160a01b038416918591613de59190615996565b60006040518083038185875af1925050503d8060008114613e22576040519150601f19603f3d011682016040523d82523d6000602084013e613e27565b606091505b505090508015613e6c57816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051610fbb91815260200190565b604080518481524760208201526001600160a01b038416917fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b739101610fbb565b505050565b60606000613ebf6009612c44565b90506000816001600160a01b031663af2454296040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f259190615417565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8b9190615417565b90506000836001600160a01b031663446850a160736040518263ffffffff1660e01b8152600401613fbc91906159c5565b600060405180830381865afa158015613fd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140019190810190615820565b60735490915060008167ffffffffffffffff81111561402257614022615446565b60405190808252806020026020018201604052801561404b578160200160208202803683370190505b50965060008060005b84831015614311576073838154811061406f5761406f615430565b60009182526020808320909101546001600160a01b0316808352607590915260409091206006810154885192945090925015159088908890869081106140b7576140b7615430565b6020026020010151101561412557806141205760006140d68a42615404565b600684018190556040518181529091506001600160a01b038516907f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342759060200160405180910390a2505b614178565b8015614178578160060160009055826001600160a01b03167f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a34275600060405161416f91815260200190565b60405180910390a25b60008260050154600014158015614193575042836005015411155b806141b657506001600160a01b038416600090815260e9602052604090205460ff165b9050600083600601546000141580156141d3575042846006015411155b905081806141de5750805b1561427057886141ed8961597f565b9850888151811061420057614200615430565b602002602001015189878151811061421a5761421a615430565b602002602001018181525050848d888060010199508151811061423f5761423f615430565b60200260200101906001600160a01b031690816001600160a01b03168152505061426885614b62565b505050614054565b6001600160a01b03851660009081526077602052604090205480158015906142985750428111155b15614301576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b5050600190940193506140549050565b50505080875280156143ce577f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c918760405161434c919061526a565b60405180910390a16040517fe22d1c9d0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063e22d1c9d9061439b908a908c90600401615589565b600060405180830381600087803b1580156143b557600080fd5b505af11580156143c9573d6000803e3d6000fd5b505050505b505050505050919050565b6040517fe6c933a4000000000000000000000000000000000000000000000000000000008152600481018290526060906001600160a01b0385169063e6c933a490602401600060405180830381865afa15801561443a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144629190810190615778565b905061105e81825185614b8b565b600061447c6005612c44565b6001600160a01b031663ac57bd7683614496436001615404565b6040518363ffffffff1660e01b81526004016144b3929190615589565b600060405180830381865afa1580156144d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144f89190810190615a09565b905060005b82518110156146c557600083828151811061451a5761451a615430565b6020908102919091018101516001600160a01b0381166000908152603b90925260408220549092504211159061454f836136d5565b9050600061458284614562436001615404565b6001600160a01b03919091166000908152603a6020526040902054101590565b806145a3575085858151811061459a5761459a615430565b60200260200101515b806145ab5750825b159050811580156145b95750805b15614634576001600160a01b038416600090815260ac60205260409020546145f89060019060ff1660038111156145f2576145f26154b4565b90614ccb565b6001600160a01b038516600090815260ac60205260409020805460ff1916600183600381111561462a5761462a6154b4565b02179055506146b6565b81801561463f575080155b156146b6576001600160a01b038416600090815260ac602052604090205461467e9060019060ff166003811115614678576146786154b4565b90614d06565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156146b0576146b06154b4565b02179055505b846001019450505050506144fd565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b826146f161166c565b6040516146fe919061526a565b60405180910390a350505050565b806001600160a01b03163b600003610eab576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610e08565b60006001548261476b919061551b565b610d34906001615404565b60008260000361478f5761478c6108fc83615404565b91505b6040516001600160a01b03851690839085906000818181858888f193505050503d80600081146147db576040519150601f19603f3d011682016040523d82523d6000602084013e6147e0565b606091505b509095945050505050565b6001820154600090614805906001600160a01b0316613172565b9050614828816001600160a01b0316600090815260746020526040902054151590565b6148455760405163a64b34ad60e01b815260040160405180910390fd5b600583018290556040518281526001600160a01b038216907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e790602001610fbb565b600080614894600a612c44565b6040517fb8cc3a500000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919091169063b8cc3a5090602401602060405180830381865afa1580156148f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149199190615417565b1192915050565b6000816003811115614934576149346154b4565b836003811115614946576149466154b4565b1660ff1615159392505050565b60008151602083016020820281015b8082101561497b57815184019350602082019150614962565b505050919050565b6001600160a01b038216600090815260e060205260409020548015613eac576149af8282611838614776565b15614a0657816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec836040516149f991815260200190565b60405180910390a3505050565b604080518281524760208201526001600160a01b0380851692908616917f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e91016149f9565b6001600160a01b038216600090815260e360205260409020548015613eac57614a778282611838614776565b15614ac157816001600160a01b0316836001600160a01b03167f0c4d6a43fc8470dee97db74874b5685e412cc517d9bdecfde1623c5e835b18e4836040516149f991815260200190565b604080518281524760208201526001600160a01b0380851692908616917f98697ee35f04a599a814432016fff3968c483d2d88dacb484926b9358f8e7cf991016149f9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614b53576040519150601f19603f3d011682016040523d82523d6000602084013e614b58565b606091505b5090949350505050565b6001600160a01b038116600090815260e960205260409020805460ff19169055610eab81614d42565b815b60aa54811015614bdf57600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b0319169055600101614b8d565b5060005b82811015614c1f57600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff19169055600101614be3565b5060005b82811015614c93576000848281518110614c3f57614c3f615430565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b031916909117905550600101614c23565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051610fbb919061526a565b6000816003811115614cdf57614cdf6154b4565b836003811115614cf157614cf16154b4565b1760ff166003811115610d3157610d316154b4565b6000816003811115614d1a57614d1a6154b4565b19836003811115614d2d57614d2d6154b4565b1660ff166003811115610d3157610d316154b4565b6001600160a01b03811660009081526074602052604081205490819003614d67575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b031990811682556001808301805483169055600283018054831690556003830180549092169091556004820185905560058201859055600690910184905560748352818420849055607790925282208281558101829055607380549091614df1916153f1565b81548110614e0157614e01615430565b6000918252602090912001546001600160a01b03908116915083168114614e84576001600160a01b0381166000908152607460205260409020829055607380548291908419908110614e5557614e55615430565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6073805480614e9557614e956155bf565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6001600160a01b0381168114610eab57600080fd5b600060208284031215614ee357600080fd5b813561105e81614ebc565b60e08101610d3482846001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60008060408385031215614f5f57600080fd5b8235614f6a81614ebc565b91506020830135614f7a81614ebc565b809150509250929050565b60008060408385031215614f9857600080fd5b8235614fa381614ebc565b946020939093013593505050565b600060208284031215614fc357600080fd5b5035919050565b815181526020808301519082015260408101610d34565b8015158114610eab57600080fd5b6000806000806080858703121561500557600080fd5b843561501081614ebc565b93506020850135925060408501359150606085013561502e81614fe1565b939692955090935050565b8060408101831015610d3457600080fd5b6000806000806000806000806000806000806101a08d8f03121561506d57600080fd5b8c3561507881614ebc565b9b5060208d013561508881614ebc565b9a5060408d013561509881614ebc565b995060608d01356150a881614ebc565b985060808d01356150b881614ebc565b975060a08d01356150c881614ebc565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d013591506150fe8e6101608f01615039565b90509295989b509295989b509295989b565b6020808252825182820181905260009190848201906040850190845b818110156151515783516001600160a01b03168352928401929184019160010161512c565b50909695505050505050565b60008083601f84011261516f57600080fd5b50813567ffffffffffffffff81111561518757600080fd5b6020830191508360208260051b85010111156151a257600080fd5b9250929050565b600080602083850312156151bc57600080fd5b823567ffffffffffffffff8111156151d357600080fd5b6151df8582860161515d565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015615151578351151583529284019291840191600101615207565b60008151808452602080850194506020840160005b8381101561525f5781516001600160a01b03168752958201959082019060010161523a565b509495945050505050565b602081526000610d316020830184615225565b6020808252825182820181905260009190848201906040850190845b81811015615151576152fc8385516001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b9284019260e09290920191600101615299565b80356011811061112457600080fd5b6000806040838503121561533157600080fd5b614f6a8361530f565b60006020828403121561534c57600080fd5b610d318261530f565b60008060006060848603121561536a57600080fd5b833561537581614ebc565b95602085013595506040909401359392505050565b600080600080608085870312156153a057600080fd5b84356153ab81614ebc565b935060208501356153bb81614ebc565b925060408501356153cb81614ebc565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610d3457610d346153db565b80820180821115610d3457610d346153db565b60006020828403121561542957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006001820161546e5761546e6153db565b5060010190565b6000806000806080858703121561548b57600080fd5b845161549681614fe1565b60208601516040870151606090970151919890975090945092505050565b634e487b7160e01b600052602160045260246000fd5b82815260408101600383106154e1576154e16154b4565b8260208301529392505050565b8082028115828204841417610d3457610d346153db565b634e487b7160e01b600052601260045260246000fd5b60008261552a5761552a615505565b500490565b6000806000806080858703121561554557600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000806040838503121561557857600080fd5b505080516020909101519092909150565b60408152600061559c6040830185615225565b90508260208301529392505050565b6000826155ba576155ba615505565b500690565b634e487b7160e01b600052603160045260246000fd5b60208101600583106155e9576155e96154b4565b91905290565b601181106155ff576155ff6154b4565b9052565b60208101610d3482846155ef565b60006020828403121561562357600080fd5b815161105e81614ebc565b6001600160e01b0319841681526060810161564c60208301856155ef565b6001600160a01b0383166040830152949350505050565b6001600160e01b03198316815260408101600b83106154e1576154e16154b4565b604051601f8201601f1916810167ffffffffffffffff811182821017156156ad576156ad615446565b604052919050565b600067ffffffffffffffff8211156156cf576156cf615446565b5060051b60200190565b600060208083850312156156ec57600080fd5b825167ffffffffffffffff81111561570357600080fd5b8301601f8101851361571457600080fd5b8051615727615722826156b5565b615684565b81815260059190911b8201830190838101908783111561574657600080fd5b928401925b8284101561576d57835161575e81614ebc565b8252928401929084019061574b565b979650505050505050565b6000602080838503121561578b57600080fd5b825167ffffffffffffffff8111156157a257600080fd5b8301601f810185136157b357600080fd5b80516157c1615722826156b5565b81815260059190911b820183019083810190878311156157e057600080fd5b928401925b8284101561576d5783516157f881614ebc565b825292840192908401906157e5565b8281526040602082015260006110096040830184615225565b6000602080838503121561583357600080fd5b825167ffffffffffffffff81111561584a57600080fd5b8301601f8101851361585b57600080fd5b8051615869615722826156b5565b81815260059190911b8201830190838101908783111561588857600080fd5b928401925b8284101561576d5783518252928401929084019061588d565b60008151808452602080850194506020840160005b8381101561525f578151875295820195908201906001016158bb565b6060815260006158ea6060830186615225565b82810360208401526158fc81866158a6565b915050826040830152949350505050565b8381526060602082015260006159266060830185615225565b828103604084015261593881856158a6565b9695505050505050565b84815260806020820152600061595b6080830186615225565b828103604084015261596d81866158a6565b91505082606083015295945050505050565b60008161598e5761598e6153db565b506000190190565b6000825160005b818110156159b7576020818601810151858301520161599d565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156151515783546001600160a01b0316835260019384019392850192016159e4565b60006020808385031215615a1c57600080fd5b825167ffffffffffffffff811115615a3357600080fd5b8301601f81018513615a4457600080fd5b8051615a52615722826156b5565b81815260059190911b82018301908381019087831115615a7157600080fd5b928401925b8284101561576d578351615a8981614fe1565b82529284019290840190615a7656fea26469706673582212200a72ebeba6351ed1e1d60479ed9818ca581dfc119f5f662efa11bf690fb1811c64736f6c63430008190033",
  "callValue": 0,
  "chainId": 2021,
  "constructorArgs": "0x",
  "contractName": "RoninValidatorSet",
  "deployedBytecode": "0x6080604052600436106103e25760003560e01c8063612c8d981161020d578063a3d545f511610128578063d09f1ab4116100bb578063e8712aa71161008a578063eeb629a81161006f578063eeb629a814610b4c578063eecaefd914610b61578063f883afaf14610b81576103f1565b8063e8712aa714610b0c578063edb194bb14610b2c576103f1565b8063d09f1ab414610a7f578063dd716ad314610a94578063de981f1b14610ab4578063e5125a1d14610aec576103f1565b8063ba77b06c116100f7578063ba77b06c14610a15578063c3c8b5d614610a2a578063c4e227f314610a4a578063cdaa4e8114610a5f576103f1565b8063a3d545f5146109b6578063a66c0f77146109d6578063afc69d73146109eb578063b7ab4db514610a00576103f1565b80637593ff71116101a057806387c891bd1161016f57806387c891bd1461094c57806396585fc2146109615780639a57bd9314610981578063a0c3f2d214610996576103f1565b80637593ff71146108cc5780637e1dc16f146108ec578063865e6fd31461090c578063873a5a701461092c576103f1565b8063690b7536116101dc578063690b75361461087a5780636aa1c2ef1461088f5780636ef826c8146108a457806372e46810146108c4576103f1565b8063612c8d981461080e57806365244ece146108235780636558954f146108435780636611f8431461085a576103f1565b80632f78204c116102fd5780634de2b7351161029057806352091f171161025f57806352091f17146107ba5780635248184a146107c25780635cd8a76b146107e4578063605239a1146107f9576103f1565b80634de2b735146107365780634e9b8b0a146107635780634ee4d72b146107855780634f2a693f1461079a576103f1565b8063468c96ae116102cc578063468c96ae1461069d57806346ebb232146106d457806349096d26146106f45780634d8df06314610716576103f1565b80632f78204c1461061d5780633101cfcb1461063d57806331a8aef51461065d578063367ec12b1461067d576103f1565b80631196ab661161037557806328bde1e11161034457806328bde1e11461059b5780632924de71146105bb578063297a8fca146105db5780632d784a98146105f0576103f1565b80631196ab661461052657806315b5ebde14610546578063217f35c21461056657806323c65eb01461057b576103f1565b80630bbed9af116103b15780630bbed9af146104945780630f43a677146104b4578063110a8308146104c957806311662dc2146104e9576103f1565b806303827884146103f95780630447e5911461042257806304d971ab1461044f578063060406181461047f576103f1565b366103f1576103ef610ba1565b005b6103ef610ba1565b34801561040557600080fd5b5061040f61183881565b6040519081526020015b60405180910390f35b34801561042e57600080fd5b5061044261043d366004614ed1565b610c20565b6040516104199190614eee565b34801561045b57600080fd5b5061046f61046a366004614f4c565b610d00565b6040519015158152602001610419565b34801561048b57600080fd5b5061040f610d3a565b3480156104a057600080fd5b506103ef6104af366004614f4c565b610d4a565b3480156104c057600080fd5b5060aa5461040f565b3480156104d557600080fd5b506103ef6104e4366004614ed1565b610d87565b3480156104f557600080fd5b50610509610504366004614f85565b610e75565b604080519315158452602084019290925290820152606001610419565b34801561053257600080fd5b506103ef610541366004614fb1565b610e9a565b34801561055257600080fd5b506103ef610561366004614f85565b610eae565b34801561057257600080fd5b5061046f610fc8565b34801561058757600080fd5b5061046f610596366004614f85565b610fdd565b3480156105a757600080fd5b506104426105b6366004614ed1565b611011565b3480156105c757600080fd5b5061046f6105d6366004614ed1565b611065565b3480156105e757600080fd5b5060045461040f565b3480156105fc57600080fd5b5061061061060b366004614ed1565b611095565b6040516104199190614fca565b34801561062957600080fd5b506103ef610638366004614fef565b611129565b34801561064957600080fd5b506103ef610658366004614ed1565b611349565b34801561066957600080fd5b5061046f610678366004614f85565b6113ed565b34801561068957600080fd5b506103ef61069836600461504a565b611424565b3480156106a957600080fd5b506106bd6106b8366004614fb1565b61159e565b604080519215158352602083019190915201610419565b3480156106e057600080fd5b5061046f6106ef366004614f4c565b6115dc565b34801561070057600080fd5b50610709611603565b6040516104199190615110565b34801561072257600080fd5b506103ef610731366004614fb1565b611615565b34801561074257600080fd5b506107566107513660046151a9565b611626565b60405161041991906151eb565b34801561076f57600080fd5b5061077861166c565b604051610419919061526a565b34801561079157600080fd5b5060e45461040f565b3480156107a657600080fd5b506103ef6107b5366004614fb1565b611736565b6103ef611747565b3480156107ce57600080fd5b506107d7611bb7565b604051610419919061527d565b3480156107f057600080fd5b506103ef611d0b565b34801561080557600080fd5b5060725461040f565b34801561081a57600080fd5b5060765461040f565b34801561082f57600080fd5b5061046f61083e366004614ed1565b611e9d565b34801561084f57600080fd5b5061040f6201518081565b34801561086657600080fd5b506103ef610875366004614fb1565b611eb0565b34801561088657600080fd5b5060e55461040f565b34801561089b57600080fd5b5060015461040f565b3480156108b057600080fd5b506103ef6108bf366004614f4c565b611ec1565b6103ef611efe565b3480156108d857600080fd5b5061046f6108e7366004614fb1565b61231d565b3480156108f857600080fd5b506107566109073660046151a9565b612341565b34801561091857600080fd5b506103ef61092736600461531e565b61237f565b34801561093857600080fd5b5061046f610947366004614ed1565b61239e565b34801561095857600080fd5b5060025461040f565b34801561096d57600080fd5b5061050961097c366004614ed1565b6123e0565b34801561098d57600080fd5b50610778612404565b3480156109a257600080fd5b5061046f6109b1366004614ed1565b6124b1565b3480156109c257600080fd5b5061040f6109d1366004614fb1565b6124dc565b3480156109e257600080fd5b5060e65461040f565b3480156109f757600080fd5b5061040f6124e7565b348015610a0c57600080fd5b5061070961252a565b348015610a2157600080fd5b50610709612537565b348015610a3657600080fd5b506103ef610a45366004614f4c565b612544565b348015610a5657600080fd5b50610778612810565b348015610a6b57600080fd5b506103ef610a7a366004614f85565b612872565b348015610a8b57600080fd5b5061040f612b13565b348015610aa057600080fd5b506103ef610aaf366004614f85565b612b8c565b348015610ac057600080fd5b50610ad4610acf36600461533a565b612c44565b6040516001600160a01b039091168152602001610419565b348015610af857600080fd5b506103ef610b07366004615355565b612cd3565b348015610b1857600080fd5b5061046f610b27366004614ed1565b612e17565b348015610b3857600080fd5b50610610610b47366004614ed1565b612e22565b348015610b5857600080fd5b5061040f612e7c565b348015610b6d57600080fd5b506103ef610b7c366004614f4c565b612eb4565b348015610b8d57600080fd5b506103ef610b9c36600461538a565b612eee565b610bab6007612c44565b6001600160a01b0316336001600160a01b031614158015610be75750610bd16009612c44565b6001600160a01b0316336001600160a01b031614155b15610c1e576040517fffcb451300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6040805160e08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c083018290526001600160a01b0385168252607490529190912054610c8b5760405163a64b34ad60e01b815260040160405180910390fd5b506001600160a01b03908116600090815260756020908152604091829020825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c082015290565b6000610d31610d0e84613172565b6001600160a01b0390811660009081526075602052604090205481169084161490565b90505b92915050565b6000610d4560035490565b905090565b600f610d5581613203565b506001600160a01b03918216600090815260756020526040902060020180546001600160a01b03191691909216179055565b600054600490610100900460ff16158015610da9575060005460ff8083169116105b610e115760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff831617610100179055610e30600f83613268565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000806000610e8c610e8686613172565b8561330c565b9250925092505b9250925092565b610ea261338e565b610eab81613402565b50565b6006610eb981613203565b6001600160a01b0383166000908152603c60205260409020544311610f15576040517f53e0424d0000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610e08565b6001600160a01b038316600081815260386020908152604080832086845282528083208054600160ff199182168117909255948452603783528184208785529092529091208054909216909155610f6c90436153f1565b6001600160a01b0384166000818152603a6020526040908190209290925590517f6bb2436cb6b6eb65d5a52fac2ae0373a77ade6661e523ef3004ee2d5524e6c6e90610fbb9085815260200190565b60405180910390a2505050565b6000610d45610fd642613472565b6003541090565b600080610fe984613172565b6001600160a01b0381166000908152603a60205260409020549091508311155b949350505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529061105383613172565b905061105e81610c20565b9392505050565b60008061107183613172565b6001600160a01b0381166000908152603a602052604090205490915043111561105e565b604080518082019091526000808252602082015260e860006110b684613172565b6001600160a01b03168152602080820192909252604090810160009081208251808401909352805483526001015492820183905290925003611124576040517fe1fba9e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600661113481613203565b600061113e610d3a565b6001600160a01b03871660008181526037602090815260408083208584528252808320805460ff1916600117905592825260e181528282205460e09091529190205491925061118c91615404565b60e4600082825461119d9190615404565b90915550506001600160a01b038616600090815260e06020908152604080832083905560e18252808320839055603a9091529020546111dd908690613481565b6001600160a01b0387166000908152603a602052604090205583156112985760006112086009612c44565b60405163138ac02f60e11b81526001600160a01b038981166004830152602482018890529190911690632715805e906044016020604051808303816000875af1158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d9190615417565b90508060e460008282546112919190615404565b9091555050505b82156112dc576001600160a01b0386166000908152603c60205260409020546112c2908690613481565b6001600160a01b0387166000908152603c60205260409020555b6001600160a01b0386166000818152603a6020908152604080832054815190815291820188905260019082015260608101919091528291907f54ce99c5ce1fc9f61656d4a0fb2697974d0c973ac32eecaefe06fcf18b8ef68a9060800160405180910390a3505050505050565b600054600390610100900460ff1615801561136b575060005460ff8083169116105b6113ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e08565b6000805461ffff191660ff831617610100179055610e30600e83613268565b6000610d316113fb84613172565b6001600160a01b0316600090815260376020908152604080832086845290915290205460ff1690565b600054610100900460ff16158080156114445750600054600160ff909116105b8061145e5750303b15801561145e575060005460ff166001145b6114c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e08565b6000805460ff1916600117905580156114e4576000805461ff0019166101001790555b6114ef60068e613268565b6114fa60098d613268565b61150560078c613268565b61151060058b613268565b61151b600a8a613268565b61152486613498565b61152d84613402565b61153782356134cd565b6115446020830135613502565b6001839055801561158f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b6000806115aa436124dc565b831115806115c5575060008381526005602052604090205415155b600093845260056020526040909320549293915050565b6001600160a01b038281166000908152607560205260408120549091838116911614610d31565b6060610d4561161061166c565b613537565b61161d61338e565b610eab81613502565b6060610d316116678484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506135b392505050565b61362f565b606060aa5467ffffffffffffffff81111561168957611689615446565b6040519080825280602002602001820160405280156116b2578160200160208202803683370190505b5090506000805b825181101561173057600081815260ab60205260409020546001600160a01b03166116e3816136d5565b15611727578084846116f48161545c565b95508151811061170657611706615430565b60200260200101906001600160a01b031690816001600160a01b0316815250505b506001016116b9565b50815290565b61173e61338e565b610eab81613498565b61174f61370f565b600061175a33613172565b90506000611767826136d5565b8015611779575061177782613748565b155b80156117b957506117b78261178c610d3a565b6001600160a01b03919091166000908152603760209081526040808320938352929052205460ff1690565b155b90506000806117c86007612c44565b6040517f0634f5b90000000000000000000000000000000000000000000000000000000081528415156004820152600060248201526001600160a01b039190911690630634f5b9906044016080604051808303816000875af1158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190615475565b935050925050826118c4573460e460008282546118739190615404565b92505081905550836001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e3460016040516118b69291906154ca565b60405180910390a250505050565b60408051348152602081018490526001600160a01b038616917f0ede5c3be8625943fa64003cd4b91230089411249f3059bac6500873543ca9b1910160405180910390a26000611912610d3a565b905060006119208434615404565b9050600061271061193185846154ee565b61193b919061551b565b9050600061194982846153f1565b905060008260e2600082825461195f9190615404565b909155505033600090815260386020908152604080832088845290915290205460ff1615611a735760006119936006612c44565b6001600160a01b031663c6391fa26040518163ffffffff1660e01b8152600401608060405180830381865afa1580156119d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f4919061552f565b93505050506127108184611a0891906154ee565b611a12919061551b565b91508160e46000828254611a269190615404565b92505081905550896001600160a01b03167f4042bb9a70998f80a86d9963f0d2132e9b11c8ad94d207c6141c8e34b05ce53e836002604051611a699291906154ca565b60405180910390a2505b611a7d81836153f1565b9150600080611a8c6009612c44565b6001600160a01b0316634530d2026040518163ffffffff1660e01b81526004016040805180830381865afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aec9190615565565b6001600160a01b038d1660009081526075602052604081206004015492945090925090611b2390611b1d9084613769565b84613481565b90506000612710611b3487846154ee565b611b3e919061551b565b6001600160a01b038e16600090815260e06020526040812080549293508392909190611b6b908490615404565b90915550611b7b905081876153f1565b6001600160a01b038e16600090815260e1602052604081208054909190611ba3908490615404565b909155505050505050505050505050505050565b60735460609067ffffffffffffffff811115611bd557611bd5615446565b604051908082528060200260200182016040528015611c3c57816020015b6040805160e08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c08201528252600019909201910181611bf35790505b50905060005b8151811015611d07576075600060738381548110611c6257611c62615430565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825160e081018452815485168152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101546080830152600581015460a08301526006015460c08201528251839083908110611cf457611cf4615430565b6020908102919091010152600101611c42565b5090565b600054600290610100900460ff16158015611d2d575060005460ff8083169116105b611d905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610e08565b6000805461ffff191660ff831617610100179055607154611dbc906009906001600160a01b0316613268565b606f54611dd4906005906001600160a01b0316613268565b607054611dec906006906001600160a01b0316613268565b606d54611e04906007906001600160a01b0316613268565b60a854611e1c90600a906001600160a01b0316613268565b607180546001600160a01b0319908116909155606f8054821690556070805482169055606d805482169055606e80548216905560a8805490911690556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b6000610d34611eab83613172565b6136d5565b611eb861338e565b610eab816134cd565b600f611ecc81613203565b506001600160a01b03918216600090815260756020526040902060010180546001600160a01b03191691909216179055565b611f0661370f565b611f0f4361231d565b611f45576040517f6c74eecf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f4e436124dc565b611f596002546124dc565b10611f90576040517f2458f64100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b436002556000611f9f42613472565b90506000611fae826003541090565b90506000611fba610d3a565b90506000611fc7436124dc565b90506000611fd6826001615404565b90506000611fe2612404565b90506000611ff06010612c44565b6040517fe3a4376500000000000000000000000000000000000000000000000000000000815260048101879052602481018990529091506001600160a01b0382169063e3a4376590604401600060405180830381600087803b15801561205557600080fd5b505af1158015612069573d6000803e3d6000fd5b505050506120778483613778565b85156122ad57600060738054806020026020016040519081016040528092919081815260200182805480156120d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120b7575b50506040517f76987772000000000000000000000000000000000000000000000000000000008152600481018b9052602481018d905293945050506001600160a01b0384169163769877729150604401600060405180830381600087803b15801561213f57600080fd5b505af1158015612153573d6000803e3d6000fd5b5050505060008061216488846138f2565b9150915061217488848484613ade565b61217c613c01565b612184613d55565b60006121906006612c44565b6040517f185368db0000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063185368db906121da9087908d90600401615589565b600060405180830381600087803b1580156121f457600080fd5b505af1158015612208573d6000803e3d6000fd5b5050505060006122178c613eb1565b805190915015612299576040517f07c2d2f60000000000000000000000000000000000000000000000000000000081526001600160a01b038316906307c2d2f69061226690849060040161526a565b600060405180830381600087803b15801561228057600080fd5b505af1158015612294573d6000803e3d6000fd5b505050505b6122a4436001615404565b60045550505050505b6122b88188856143d9565b91506122c5878484614470565b83857f0195462033384fec211477c56217da64a58bd405e0bed331ba4ded67e4ae4ce7886040516122fa911515815260200190565b60405180910390a350506000908152600560205260409020849055505050600355565b60006001805461232d91906153f1565b60015461233a90846155ab565b1492915050565b6060610d3183838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061362f92505050565b61238761338e565b6123908161470c565b61239a8282613268565b5050565b6000806123a9610d3a565b905061105e6123b784613172565b6001600160a01b0316600090815260376020908152604080832085845290915290205460ff1690565b60008060006123f76123f185613172565b4361330c565b9250925092509193909250565b606060aa5467ffffffffffffffff81111561242157612421615446565b60405190808252806020026020018201604052801561244a578160200160208202803683370190505b5090506000805b82518110156124ac57600081815260ab602052604090205483516001600160a01b039091169250829084908390811061248c5761248c615430565b6001600160a01b0390921660209283029190910190910152600101612451565b505090565b6000610d346124bf83613172565b6001600160a01b0316600090815260746020526040902054151590565b6000610d348261475b565b6000805b60aa54811015611d0757600081815260ab6020526040902054612516906001600160a01b03166136d5565b15612522576001909101905b6001016124eb565b6060610d45611610612404565b6060610d45611610612810565b61254c61338e565b6001600160a01b038216600090815260e8602052604081206001015490036125ab576040517fe8e6d2dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602401610e08565b60e7548060005b8281101561260157846001600160a01b031660e782815481106125d7576125d7615430565b6000918252602090912001546001600160a01b0316036125f957809150612601565b6001016125b2565b50818103612646576040517fb69ea4250000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610e08565b6001600160a01b038416600090815260e860205260409020548015612809576001600160a01b038516600090815260e8602052604081208181556001908101919091558311156127085760e761269d6001856153f1565b815481106126ad576126ad615430565b60009182526020909120015460e780546001600160a01b0390921691849081106126d9576126d9615430565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480612719576127196155bf565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038716825260e9905260409020805460ff1916600117905561276b8482611838614776565b156127c457836001600160a01b0316856001600160a01b03167f7229136a18186c71a86246c012af3bb1df6460ef163934bbdccd6368abdd41e4836040516127b591815260200190565b60405180910390a35050505050565b604080518281524760208201526001600160a01b0380871692908816917f3747d14eb72ad3e35cba9c3e00dab3b8d15b40cac6bdbd08402356e4f69f30a191016127b5565b5050505050565b6060607380548060200260200160405190810160405280929190818152602001828054801561286857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161284a575b5050505050905090565b600961287d81613203565b6001600160a01b038316600090815260e8602052604090206001810154156128d1576040517f2bd5598800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006128dd8442615404565b6001600160a01b038616600090815260756020526040902090915061290290826147eb565b6001600160a01b0385166000818152603b602052604080822084905560e554905163138ac02f60e11b815260048101939093526024830152903390632715805e906044016020604051808303816000875af1158015612965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129899190615417565b90508015612ac857600060e654426129a19190615404565b60e78054600180820183556000929092527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a10180546001600160a01b0319166001600160a01b038b1617905583865585018190559050612a287fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b6001600160a01b03888116600081815260756020526040908190206002015490517fa2fae5700000000000000000000000000000000000000000000000000000000081526004810192909252821660248201524260448201526064810184905291169063a2fae57090608401600060405180830381600087803b158015612aae57600080fd5b505af1158015612ac2573d6000803e3d6000fd5b50505050505b856001600160a01b03167f77a1a819870c0f4d04c3ca4cc2881a0393136abc28bd651af50aedade94a27c482604051612b0391815260200190565b60405180910390a2505050505050565b6000612b1f6010612c44565b6001600160a01b031663035d006260016040518263ffffffff1660e01b8152600401612b4b91906155d5565b602060405180830381865afa158015612b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d459190615417565b6009612b9781613203565b612ba083614887565b15612bd7576040517f030081e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166000908152607560205260409020600581015415612c2b576040517ffab9167300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c3e81612c398542615404565b6147eb565b50505050565b60007fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb6000836010811115612c7b57612c7b6154b4565b60ff1681526020810191909152604001600020546001600160a01b031690508061112457816040517f812281be000000000000000000000000000000000000000000000000000000008152600401610e089190615603565b6009612cde81613203565b6001600160a01b03841660009081526077602052604090205415612d2e576040517f5e65b9ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710821115612d5157604051631b8454a360e21b815260040160405180910390fd5b607654831015612d8d576040517ffa0ae69300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152607760205260408120906201518085612db5824261551b565b612dbf9190615404565b612dc991906154ee565b8083556001830185905560408051828152602081018790529192506001600160a01b038816917f6ebafd1bb6316b2f63198a81b05cff2149c6eaae1784466a6d062b4391900f219101612b03565b6000610d34826136d5565b604080518082019091526000808252602082015260776000612e4384613172565b6001600160a01b031681526020808201929092526040908101600020815180830190925280548252600101549181019190915292915050565b6000612e886010612c44565b6001600160a01b031663035d006260026040518263ffffffff1660e01b8152600401612b4b91906155d5565b600f612ebf81613203565b506001600160a01b03918216600090815260756020526040902080546001600160a01b03191691909216179055565b6009612ef981613203565b6073546072548110612f37576040517f8616841b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03851660009081526074602052604090205415612f87576040517f8ad9cdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612710831115612faa57604051631b8454a360e21b815260040160405180910390fd5b60005b818110156130a15760006075600060738481548110612fce57612fce615430565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250811690891603613043576040517ffc3d8c750000000000000000000000000000000000000000000000000000000081526001600160a01b0389166004820152602401610e08565b60028101546001600160a01b0390811690871603613098576040517f5a674fce0000000000000000000000000000000000000000000000000000000081526001600160a01b0387166004820152602401610e08565b50600101612fad565b506001600160a01b038581166000818152607460209081526040808320861990556073805460018082019092557ff79bde9ddd17963ebce6f7d021d60de7c2bd0db944d23c900c0c0e775f5300520180546001600160a01b031990811687179091556075909352818420805484168d881690811782559181018054851687179055600281018054909416968b1696871790935560048301899055905191949093909290917f1ca451a9920472b99355a9cf74185bf017604a7849c113f020888ecec9db93669190a450505050505050565b600061317e600f612c44565b6040517f50a9fc290000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906350a9fc2990602401602060405180830381865afa1580156131df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190615611565b61320c81612c44565b6001600160a01b0316336001600160a01b031614610eab576000356001600160e01b03191681336040517f8383e634000000000000000000000000000000000000000000000000000000008152600401610e089392919061562e565b807fdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb600084601081111561329e5761329e6154b4565b60ff168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392831617905581168260108111156132df576132df6154b4565b6040517f865d1c228a8ea13709cfe61f346f7ff67f1bbd4a18ff31ad3e7147350d317c5990600090a35050565b6001600160a01b0382166000908152603a6020526040812054819081908481101561334257600080600093509350935050610e93565b6001935061335085826153f1565b61335b906001615404565b9250613366856124dc565b61336f826124dc565b61337991906153f1565b613384906001615404565b9150509250925092565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610c1e576000356001600160e01b03191660016040517f3e523c00000000000000000000000000000000000000000000000000000000008152600401610e08929190615663565b600181101561343d576040517f17b8970f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60768190556040518181527f266d432ffe659e3565750d26ec685b822a58041eee724b67a5afec3168a2526790602001611e92565b6000610d34620151808361551b565b6000818310156134915781610d31565b5090919050565b60728190556040518181527f82d5dc32d1b741512ad09c32404d7e7921e8934c6222343d95f55f7a2b9b2ab490602001611e92565b60e58190556040518181527f17a6c3eb965cdd7439982da25abf85be88f0f772ca33198f548e2f99fee0289a90602001611e92565b60e68190556040518181527f0a50c66137118f386332efb949231ddd3946100dbf880003daca37ddd9e0662b90602001611e92565b6060613543600f612c44565b6001600160a01b031663b261596f836040518263ffffffff1660e01b815260040161356e919061526a565b600060405180830381865afa15801561358b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3491908101906156d9565b60606135bf600f612c44565b6001600160a01b031663f9226b1a836040518263ffffffff1660e01b81526004016135ea9190615110565b600060405180830381865afa158015613607573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d349190810190615778565b6060815167ffffffffffffffff81111561364b5761364b615446565b604051908082528060200260200182016040528015613674578160200160208202803683370190505b50905060005b82518110156136cf576136a583828151811061369857613698615430565b6020026020010151613748565b8282815181106136b7576136b7615430565b9115156020928302919091019091015260010161367a565b50919050565b6001600160a01b038116600090815260ac6020526040812054610d349060019060ff166003811115613709576137096154b4565b90614920565b334114610c1e576040517f09f358fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381166000908152603a6020526040812054431115610d34565b60008183106134915781610d31565b6000613784600e612c44565b6001600160a01b0316633a205da084846040518363ffffffff1660e01b81526004016137b1929190615807565b600060405180830381865afa1580156137ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137f69190810190615820565b9050600061380382614953565b9050806000036138135750505050565b60e2548351600091908290815b818110156138c2578587828151811061383b5761383b615430565b60200260200101518561384e91906154ee565b613858919061551b565b94508460e360008a848151811061387157613871615430565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546138a89190615404565b909155506138b890508584615404565b9250600101613820565b506138cd82846153f1565b60e460008282546138de9190615404565b9091555050600060e2555050505050505050565b60006060600080845167ffffffffffffffff81111561391357613913615446565b60405190808252806020026020018201604052801561393c578160200160208202803683370190505b50925060005b8551811015613ad45785818151811061395d5761395d615430565b6020908102919091018101516001600160a01b038082166000908152607590935260409092206002015490945016915061399683613748565b1580156139c757506001600160a01b03831660009081526037602090815260408083208a845290915290205460ff16155b15613a45576001600160a01b038316600090815260e160205260409020546139ef9086615404565b6001600160a01b038416600090815260e16020526040902054855191965090859083908110613a2057613a20615430565b602002602001018181525050613a368383614983565b613a408383614a4b565b613a9c565b6001600160a01b038316600090815260e3602090815260408083205460e183528184205460e0909352922054613a7b9190615404565b613a859190615404565b60e46000828254613a969190615404565b90915550505b6001600160a01b038316600090815260e16020908152604080832083905560e0825280832083905560e3909152812055600101613942565b5050509250929050565b6000613aea6009612c44565b9050821561280957613afc8184614b06565b15613bbd576040517facd79c460000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063acd79c4690613b4a90879086908a906004016158d7565b600060405180830381600087803b158015613b6457600080fd5b505af1158015613b78573d6000803e3d6000fd5b505050507f9e242ca1ef9dde96eb71ef8d19a3f0f6a619b63e4c0d3998771387103656d087838584604051613baf9392919061590d565b60405180910390a150612c3e565b7fe5668ec1bb2b6bb144a50f810e388da4b1d7d3fc05fcb9d588a1aac59d248f8983858447604051613bf29493929190615942565b60405180910390a15050505050565b60e754600080805b83831015612c3e5760e78381548110613c2457613c24615430565b60009182526020808320909101546001600160a01b031680835260e89091526040909120600181015491935091504210613d4a57805460e48054600090613c6c908490615404565b90915550506001600160a01b038216600090815260e860205260408120818155600101819055613c9b8561597f565b9450841115613d125760e78481548110613cb757613cb7615430565b60009182526020909120015460e780546001600160a01b039092169185908110613ce357613ce3615430565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60e7805480613d2357613d236155bf565b600082815260209020810160001990810180546001600160a01b0319169055019055613c09565b600190920191613c09565b60e4548015610eab576000613d6a6007612c44565b600060e481905560408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f59f778df00000000000000000000000000000000000000000000000000000000179052905192935090916001600160a01b038416918591613de59190615996565b60006040518083038185875af1925050503d8060008114613e22576040519150601f19603f3d011682016040523d82523d6000602084013e613e27565b606091505b505090508015613e6c57816001600160a01b03167fc447c884574da5878be39c403db2245c22530c99b579ea7bcbb3720e1d110dc884604051610fbb91815260200190565b604080518481524760208201526001600160a01b038416917fa0561a59abed308fcd0556834574739d778cc6229018039a24ddda0f86aa0b739101610fbb565b505050565b60606000613ebf6009612c44565b90506000816001600160a01b031663af2454296040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f259190615417565b90506000826001600160a01b031663909791dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f8b9190615417565b90506000836001600160a01b031663446850a160736040518263ffffffff1660e01b8152600401613fbc91906159c5565b600060405180830381865afa158015613fd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140019190810190615820565b60735490915060008167ffffffffffffffff81111561402257614022615446565b60405190808252806020026020018201604052801561404b578160200160208202803683370190505b50965060008060005b84831015614311576073838154811061406f5761406f615430565b60009182526020808320909101546001600160a01b0316808352607590915260409091206006810154885192945090925015159088908890869081106140b7576140b7615430565b6020026020010151101561412557806141205760006140d68a42615404565b600684018190556040518181529091506001600160a01b038516907f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a342759060200160405180910390a2505b614178565b8015614178578160060160009055826001600160a01b03167f88f854e137380c14d63f6ed99781bf13402167cf55bac49bcd44d4f2d6a34275600060405161416f91815260200190565b60405180910390a25b60008260050154600014158015614193575042836005015411155b806141b657506001600160a01b038416600090815260e9602052604090205460ff165b9050600083600601546000141580156141d3575042846006015411155b905081806141de5750805b1561427057886141ed8961597f565b9850888151811061420057614200615430565b602002602001015189878151811061421a5761421a615430565b602002602001018181525050848d888060010199508151811061423f5761423f615430565b60200260200101906001600160a01b031690816001600160a01b03168152505061426885614b62565b505050614054565b6001600160a01b03851660009081526077602052604090205480158015906142985750428111155b15614301576001600160a01b0386166000818152607760209081526040808320600181018054918590559390935560048901839055518281529192917f86d576c20e383fc2413ef692209cc48ddad5e52f25db5b32f8f7ec5076461ae9910160405180910390a2505b5050600190940193506140549050565b50505080875280156143ce577f4eaf233b9dc25a5552c1927feee1412eea69add17c2485c831c2e60e234f3c918760405161434c919061526a565b60405180910390a16040517fe22d1c9d0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063e22d1c9d9061439b908a908c90600401615589565b600060405180830381600087803b1580156143b557600080fd5b505af11580156143c9573d6000803e3d6000fd5b505050505b505050505050919050565b6040517fe6c933a4000000000000000000000000000000000000000000000000000000008152600481018290526060906001600160a01b0385169063e6c933a490602401600060405180830381865afa15801561443a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144629190810190615778565b905061105e81825185614b8b565b600061447c6005612c44565b6001600160a01b031663ac57bd7683614496436001615404565b6040518363ffffffff1660e01b81526004016144b3929190615589565b600060405180830381865afa1580156144d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526144f89190810190615a09565b905060005b82518110156146c557600083828151811061451a5761451a615430565b6020908102919091018101516001600160a01b0381166000908152603b90925260408220549092504211159061454f836136d5565b9050600061458284614562436001615404565b6001600160a01b03919091166000908152603a6020526040902054101590565b806145a3575085858151811061459a5761459a615430565b60200260200101515b806145ab5750825b159050811580156145b95750805b15614634576001600160a01b038416600090815260ac60205260409020546145f89060019060ff1660038111156145f2576145f26154b4565b90614ccb565b6001600160a01b038516600090815260ac60205260409020805460ff1916600183600381111561462a5761462a6154b4565b02179055506146b6565b81801561463f575080155b156146b6576001600160a01b038416600090815260ac602052604090205461467e9060019060ff166003811115614678576146786154b4565b90614d06565b6001600160a01b038516600090815260ac60205260409020805460ff191660018360038111156146b0576146b06154b4565b02179055505b846001019450505050506144fd565b5082847f283b50d76057d5f828df85bc87724c6af604e9b55c363a07c9faa2a2cd688b826146f161166c565b6040516146fe919061526a565b60405180910390a350505050565b806001600160a01b03163b600003610eab576040517f2ff1928c0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610e08565b60006001548261476b919061551b565b610d34906001615404565b60008260000361478f5761478c6108fc83615404565b91505b6040516001600160a01b03851690839085906000818181858888f193505050503d80600081146147db576040519150601f19603f3d011682016040523d82523d6000602084013e6147e0565b606091505b509095945050505050565b6001820154600090614805906001600160a01b0316613172565b9050614828816001600160a01b0316600090815260746020526040902054151590565b6148455760405163a64b34ad60e01b815260040160405180910390fd5b600583018290556040518281526001600160a01b038216907fb9a1e33376bfbda9092f2d1e37662c1b435aab0d3fa8da3acc8f37ee222f99e790602001610fbb565b600080614894600a612c44565b6040517fb8cc3a500000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919091169063b8cc3a5090602401602060405180830381865afa1580156148f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149199190615417565b1192915050565b6000816003811115614934576149346154b4565b836003811115614946576149466154b4565b1660ff1615159392505050565b60008151602083016020820281015b8082101561497b57815184019350602082019150614962565b505050919050565b6001600160a01b038216600090815260e060205260409020548015613eac576149af8282611838614776565b15614a0657816001600160a01b0316836001600160a01b03167f1ce7a1c4702402cd393500acb1de5bd927727a54e144a587d328f1b679abe4ec836040516149f991815260200190565b60405180910390a3505050565b604080518281524760208201526001600160a01b0380851692908616917f6c69e09ee5c5ac33c0cd57787261c5bade070a392ab34a4b5487c6868f723f6e91016149f9565b6001600160a01b038216600090815260e360205260409020548015613eac57614a778282611838614776565b15614ac157816001600160a01b0316836001600160a01b03167f0c4d6a43fc8470dee97db74874b5685e412cc517d9bdecfde1623c5e835b18e4836040516149f991815260200190565b604080518281524760208201526001600160a01b0380851692908616917f98697ee35f04a599a814432016fff3968c483d2d88dacb484926b9358f8e7cf991016149f9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614b53576040519150601f19603f3d011682016040523d82523d6000602084013e614b58565b606091505b5090949350505050565b6001600160a01b038116600090815260e960205260409020805460ff19169055610eab81614d42565b815b60aa54811015614bdf57600081815260ab6020818152604080842080546001600160a01b0316855260ac8352908420805460ff19169055928490525280546001600160a01b0319169055600101614b8d565b5060005b82811015614c1f57600081815260ab60209081526040808320546001600160a01b0316835260ac9091529020805460ff19169055600101614be3565b5060005b82811015614c93576000848281518110614c3f57614c3f615430565b6020908102919091018101516001600160a01b0316600081815260ac83526040808220805460ff1916600317905585825260ab9093529190912080546001600160a01b031916909117905550600101614c23565b508160aa81905550807f3d0eea40644a206ec25781dd5bb3b60eb4fa1264b993c3bddf3c73b14f29ef5e84604051610fbb919061526a565b6000816003811115614cdf57614cdf6154b4565b836003811115614cf157614cf16154b4565b1760ff166003811115610d3157610d316154b4565b6000816003811115614d1a57614d1a6154b4565b19836003811115614d2d57614d2d6154b4565b1660ff166003811115610d3157610d316154b4565b6001600160a01b03811660009081526074602052604081205490819003614d67575050565b6001600160a01b038216600090815260756020908152604080832080546001600160a01b031990811682556001808301805483169055600283018054831690556003830180549092169091556004820185905560058201859055600690910184905560748352818420849055607790925282208281558101829055607380549091614df1916153f1565b81548110614e0157614e01615430565b6000918252602090912001546001600160a01b03908116915083168114614e84576001600160a01b0381166000908152607460205260409020829055607380548291908419908110614e5557614e55615430565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6073805480614e9557614e956155bf565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6001600160a01b0381168114610eab57600080fd5b600060208284031215614ee357600080fd5b813561105e81614ebc565b60e08101610d3482846001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b60008060408385031215614f5f57600080fd5b8235614f6a81614ebc565b91506020830135614f7a81614ebc565b809150509250929050565b60008060408385031215614f9857600080fd5b8235614fa381614ebc565b946020939093013593505050565b600060208284031215614fc357600080fd5b5035919050565b815181526020808301519082015260408101610d34565b8015158114610eab57600080fd5b6000806000806080858703121561500557600080fd5b843561501081614ebc565b93506020850135925060408501359150606085013561502e81614fe1565b939692955090935050565b8060408101831015610d3457600080fd5b6000806000806000806000806000806000806101a08d8f03121561506d57600080fd5b8c3561507881614ebc565b9b5060208d013561508881614ebc565b9a5060408d013561509881614ebc565b995060608d01356150a881614ebc565b985060808d01356150b881614ebc565b975060a08d01356150c881614ebc565b965060c08d0135955060e08d013594506101008d013593506101208d013592506101408d013591506150fe8e6101608f01615039565b90509295989b509295989b509295989b565b6020808252825182820181905260009190848201906040850190845b818110156151515783516001600160a01b03168352928401929184019160010161512c565b50909695505050505050565b60008083601f84011261516f57600080fd5b50813567ffffffffffffffff81111561518757600080fd5b6020830191508360208260051b85010111156151a257600080fd5b9250929050565b600080602083850312156151bc57600080fd5b823567ffffffffffffffff8111156151d357600080fd5b6151df8582860161515d565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015615151578351151583529284019291840191600101615207565b60008151808452602080850194506020840160005b8381101561525f5781516001600160a01b03168752958201959082019060010161523a565b509495945050505050565b602081526000610d316020830184615225565b6020808252825182820181905260009190848201906040850190845b81811015615151576152fc8385516001600160a01b03808251168352806020830151166020840152806040830151166040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b9284019260e09290920191600101615299565b80356011811061112457600080fd5b6000806040838503121561533157600080fd5b614f6a8361530f565b60006020828403121561534c57600080fd5b610d318261530f565b60008060006060848603121561536a57600080fd5b833561537581614ebc565b95602085013595506040909401359392505050565b600080600080608085870312156153a057600080fd5b84356153ab81614ebc565b935060208501356153bb81614ebc565b925060408501356153cb81614ebc565b9396929550929360600135925050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610d3457610d346153db565b80820180821115610d3457610d346153db565b60006020828403121561542957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006001820161546e5761546e6153db565b5060010190565b6000806000806080858703121561548b57600080fd5b845161549681614fe1565b60208601516040870151606090970151919890975090945092505050565b634e487b7160e01b600052602160045260246000fd5b82815260408101600383106154e1576154e16154b4565b8260208301529392505050565b8082028115828204841417610d3457610d346153db565b634e487b7160e01b600052601260045260246000fd5b60008261552a5761552a615505565b500490565b6000806000806080858703121561554557600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000806040838503121561557857600080fd5b505080516020909101519092909150565b60408152600061559c6040830185615225565b90508260208301529392505050565b6000826155ba576155ba615505565b500690565b634e487b7160e01b600052603160045260246000fd5b60208101600583106155e9576155e96154b4565b91905290565b601181106155ff576155ff6154b4565b9052565b60208101610d3482846155ef565b60006020828403121561562357600080fd5b815161105e81614ebc565b6001600160e01b0319841681526060810161564c60208301856155ef565b6001600160a01b0383166040830152949350505050565b6001600160e01b03198316815260408101600b83106154e1576154e16154b4565b604051601f8201601f1916810167ffffffffffffffff811182821017156156ad576156ad615446565b604052919050565b600067ffffffffffffffff8211156156cf576156cf615446565b5060051b60200190565b600060208083850312156156ec57600080fd5b825167ffffffffffffffff81111561570357600080fd5b8301601f8101851361571457600080fd5b8051615727615722826156b5565b615684565b81815260059190911b8201830190838101908783111561574657600080fd5b928401925b8284101561576d57835161575e81614ebc565b8252928401929084019061574b565b979650505050505050565b6000602080838503121561578b57600080fd5b825167ffffffffffffffff8111156157a257600080fd5b8301601f810185136157b357600080fd5b80516157c1615722826156b5565b81815260059190911b820183019083810190878311156157e057600080fd5b928401925b8284101561576d5783516157f881614ebc565b825292840192908401906157e5565b8281526040602082015260006110096040830184615225565b6000602080838503121561583357600080fd5b825167ffffffffffffffff81111561584a57600080fd5b8301601f8101851361585b57600080fd5b8051615869615722826156b5565b81815260059190911b8201830190838101908783111561588857600080fd5b928401925b8284101561576d5783518252928401929084019061588d565b60008151808452602080850194506020840160005b8381101561525f578151875295820195908201906001016158bb565b6060815260006158ea6060830186615225565b82810360208401526158fc81866158a6565b915050826040830152949350505050565b8381526060602082015260006159266060830185615225565b828103604084015261593881856158a6565b9695505050505050565b84815260806020820152600061595b6080830186615225565b828103604084015261596d81866158a6565b91505082606083015295945050505050565b60008161598e5761598e6153db565b506000190190565b6000825160005b818110156159b7576020818601810151858301520161599d565b506000920191825250919050565b6020808252825482820181905260008481528281209092916040850190845b818110156151515783546001600160a01b0316835260019384019392850192016159e4565b60006020808385031215615a1c57600080fd5b825167ffffffffffffffff811115615a3357600080fd5b8301601f81018513615a4457600080fd5b8051615a52615722826156b5565b81815260059190911b82018301908381019087831115615a7157600080fd5b928401925b8284101561576d578351615a8981614fe1565b82529284019290840190615a7656fea26469706673582212200a72ebeba6351ed1e1d60479ed9818ca581dfc119f5f662efa11bf690fb1811c64736f6c63430008190033",
  "deployer": "0x968D0Cd7343f711216817E617d3f92a23dC91c07",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "checkJailed(address)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) during the current period."
      },
      "checkJailedAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail (cannot join the set of validators) at a specific block."
      },
      "checkManyJailed(address[])": {
        "details": "Returns whether the validators are put in jail (cannot join the set of validators) during the current period."
      },
      "checkMiningRewardDeprecated(address)": {
        "details": "Returns whether the incoming reward of the block producer is deprecated during the current period."
      },
      "checkMiningRewardDeprecatedAtPeriod(address,uint256)": {
        "details": "Returns whether the incoming reward of the block producer is deprecated during a specific period."
      },
      "currentPeriod()": {
        "details": "Returns the period index from the current block."
      },
      "currentPeriodStartAtBlock()": {
        "details": "Returns the block number that the current period starts at."
      },
      "emergencyExitLockedAmount()": {
        "details": "Returns the amount of RON to lock from a consensus address."
      },
      "emergencyExpiryDuration()": {
        "details": "Returns the duration that an emergency request is expired and the fund will be recycled."
      },
      "epochEndingAt(uint256)": {
        "details": "Returns whether the epoch ending is at the block number `_block`."
      },
      "epochOf(uint256)": {
        "details": "Returns the epoch index from the block number."
      },
      "execApplyValidatorCandidate(address,address,address,uint256)": {
        "details": "Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`."
      },
      "execBailOut(address,uint256)": {
        "details": "Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`."
      },
      "execChangeAdminAddr(address,address)": {
        "details": "Fallback function of `Profile-changeAdminAddr`. This updates the shadow storage slot of \"shadowedAdmin\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract."
      },
      "execChangeConsensusAddr(address,address)": {
        "details": "Fallback function of `Profile-changeConsensusAddr`. This updates the shadow storage slot of \"shadowedConsensus\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract."
      },
      "execChangeTreasuryAddr(address,address)": {
        "details": "Fallback function of `Profile-changeTreasuryAddr`. This updates the shadow storage slot of \"shadowedTreasury\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract."
      },
      "execReleaseLockedFundForEmergencyExitRequest(address,address)": {
        "details": "Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock."
      },
      "execRequestEmergencyExit(address,uint256)": {
        "details": "Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract."
      },
      "execRequestRenounceCandidate(address,uint256)": {
        "details": "Requests to revoke a validator candidate in next `secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`."
      },
      "execRequestUpdateCommissionRate(address,uint256,uint256)": {
        "details": "Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`."
      },
      "execSlash(address,uint256,uint256,bool)": {
        "details": "Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`."
      },
      "getBlockProducerIds()": {
        "details": "Returns the ids current block producer list."
      },
      "getBlockProducers()": {
        "details": "Returns the current block producer list."
      },
      "getCandidateInfo(address)": {
        "details": "Returns the info of a candidate."
      },
      "getCandidateInfoById(address)": {
        "details": "Returns the info of a candidate."
      },
      "getCandidateInfos()": {
        "details": "Returns all candidate info."
      },
      "getCommissionChangeSchedule(address)": {
        "details": "Returns the schedule of changing commission rate of a candidate address."
      },
      "getContract(uint8)": {
        "details": "Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.",
        "params": {
          "contractType": "The role of the contract to retrieve."
        },
        "returns": {
          "contract_": "The address of the contract with the specified role."
        }
      },
      "getEmergencyExitInfo(address)": {
        "details": "Returns the emergency exit request."
      },
      "getJailedTimeLeft(address)": {
        "details": "Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail."
      },
      "getJailedTimeLeftAtBlock(address,uint256)": {
        "details": "Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail."
      },
      "getLastUpdatedBlock()": {
        "details": "Returns the block that validator set was updated."
      },
      "getValidatorCandidateIds()": {
        "details": "Returns the list of validator candidate ids."
      },
      "getValidatorCandidates()": {
        "details": "Returns the list validator candidates."
      },
      "getValidatorIds()": {
        "details": "Returns the ids of current validator list."
      },
      "getValidators()": {
        "details": "Returns the current validator list."
      },
      "initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])": {
        "details": "Initializes the contract storage."
      },
      "isBlockProducer(address)": {
        "details": "Returns whether the consensus address is block producer or not."
      },
      "isBlockProducerById(address)": {
        "details": "Returns whether the id is block producer or not."
      },
      "isCandidateAdmin(address,address)": {
        "details": "Returns whether the address is the candidate admin."
      },
      "isPeriodEnding()": {
        "details": "Returns whether the period ending at the current block number."
      },
      "isValidatorCandidate(address)": {
        "details": "Returns whether the address is a validator (candidate)."
      },
      "maxPrioritizedValidatorNumber()": {
        "details": "Returns the number of reserved slots for prioritized validators."
      },
      "maxValidatorCandidate()": {
        "details": "Returns the maximum number of validator candidate."
      },
      "maxValidatorNumber()": {
        "details": "Returns the maximum number of validators in the epoch."
      },
      "minEffectiveDaysOnward()": {
        "details": "Returns the minimum number of days to the effective date of commission rate change."
      },
      "numberOfBlocksInEpoch()": {
        "details": "Returns the number of blocks in a epoch."
      },
      "setContract(uint8,address)": {
        "details": "Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.",
        "params": {
          "addr": "The address of the contract to set.",
          "contractType": "The role of the contract to set."
        }
      },
      "setEmergencyExitLockedAmount(uint256)": {
        "details": "Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`."
      },
      "setEmergencyExpiryDuration(uint256)": {
        "details": "Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`."
      },
      "setMaxValidatorCandidate(uint256)": {
        "details": "Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event."
      },
      "setMinEffectiveDaysOnwards(uint256)": {
        "details": "Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event."
      },
      "submitBlockReward()": {
        "details": "Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call."
      },
      "totalBlockProducer()": {
        "details": "Returns total numbers of the block producers."
      },
      "totalDeprecatedReward()": {
        "details": "Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators"
      },
      "tryGetPeriodOfEpoch(uint256)": {
        "details": "Tries to get the period index from the epoch number."
      },
      "wrapUpEpoch()": {
        "details": "Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`."
      }
    },
    "events": {
      "BlockProducerSetUpdated(uint256,uint256,address[])": {
        "details": "Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator."
      },
      "BlockRewardDeprecated(address,uint256,uint8)": {
        "details": "Emitted when the reward of the block producer is deprecated."
      },
      "BlockRewardSubmitted(address,uint256,uint256)": {
        "details": "Emitted when the block reward is submitted."
      },
      "BridgeOperatorRewardDistributed(address,address,address,uint256)": {
        "details": "Emitted when the bridge operator reward is distributed."
      },
      "BridgeOperatorRewardDistributionFailed(address,address,address,uint256,uint256)": {
        "details": "Emitted when the contract fails when distributing the bridge operator reward."
      },
      "BridgeOperatorSetUpdated(uint256,uint256,address[])": {
        "details": "Emitted when the bridge operator set is updated."
      },
      "CandidateGranted(address,address,address)": {
        "details": "Emitted when the validator candidate is granted."
      },
      "CandidateRevokingTimestampUpdated(address,uint256)": {
        "details": "Emitted when the revoking timestamp of a candidate is updated."
      },
      "CandidateTopupDeadlineUpdated(address,uint256)": {
        "details": "Emitted when the topup deadline of a candidate is updated."
      },
      "CandidatesRevoked(address[])": {
        "details": "Emitted when the validator candidate is revoked."
      },
      "CommissionRateUpdateScheduled(address,uint256,uint256)": {
        "details": "Emitted when a schedule for updating commission rate is set."
      },
      "CommissionRateUpdated(address,uint256)": {
        "details": "Emitted when the commission rate of a validator is updated."
      },
      "ContractUpdated(uint8,address)": {
        "details": "Emitted when a contract is updated."
      },
      "DeprecatedRewardRecycleFailed(address,uint256,uint256)": {
        "details": "Emitted when the deprecated reward withdrawal is failed"
      },
      "DeprecatedRewardRecycled(address,uint256)": {
        "details": "Emitted when the deprecated reward is withdrawn."
      },
      "EmergencyExitLockedAmountUpdated(uint256)": {
        "details": "Emitted when the emergency exit locked amount is updated."
      },
      "EmergencyExitLockedFundReleased(address,address,uint256)": {
        "details": "Emitted when the fund that locked from an emergency exit request is transferred to the recipient."
      },
      "EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the fund that locked from an emergency exit request is failed to transferred back."
      },
      "EmergencyExitRequested(address,uint256)": {
        "details": "Emitted when the fund is locked from an emergency exit request"
      },
      "EmergencyExpiryDurationUpdated(uint256)": {
        "details": "Emitted when the emergency expiry duration is updated."
      },
      "FastFinalityRewardDistributed(address,address,uint256)": {
        "details": "Emitted when the fast finality reward is distributed."
      },
      "FastFinalityRewardDistributionFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the contract fails when distributing the fast finality reward."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MaxValidatorCandidateUpdated(uint256)": {
        "details": "Emitted when the maximum number of validator candidates is updated."
      },
      "MinEffectiveDaysOnwardsUpdated(uint256)": {
        "details": "Emitted when the min offset to the effective date of commission rate change is updated."
      },
      "MiningRewardDistributed(address,address,uint256)": {
        "details": "Emitted when the block producer reward is distributed."
      },
      "MiningRewardDistributionFailed(address,address,uint256,uint256)": {
        "details": "Emitted when the contract fails when distributing the block producer reward."
      },
      "StakingRewardDistributed(uint256,address[],uint256[])": {
        "details": "Emitted when the amount of RON reward is distributed to staking contract."
      },
      "StakingRewardDistributionFailed(uint256,address[],uint256[],uint256)": {
        "details": "Emitted when the contracts fails when distributing the amount of RON to the staking contract."
      },
      "ValidatorPunished(address,uint256,uint256,uint256,bool,bool)": {
        "details": "Emitted when the validator is punished."
      },
      "ValidatorSetUpdated(uint256,address[])": {
        "details": "Emitted when the validator set is updated"
      },
      "ValidatorUnjailed(address,uint256)": {
        "details": "Emitted when the validator get out of jail by bailout."
      },
      "WrappedUpEpoch(uint256,uint256,bool)": {
        "details": "Emitted when the epoch is wrapped up."
      }
    },
    "errors": {
      "ErrAlreadyRequestedEmergencyExit()": [
        {
          "details": "Error of already requested emergency exit before."
        }
      ],
      "ErrAlreadyRequestedRevokingCandidate()": [
        {
          "details": "Error of already requested revoking candidate before."
        }
      ],
      "ErrAlreadyRequestedUpdatingCommissionRate()": [
        {
          "details": "Error of commission change schedule exists."
        }
      ],
      "ErrAlreadyWrappedEpoch()": [
        {
          "details": "Error of query for already wrapped up epoch"
        }
      ],
      "ErrAtEndOfEpochOnly()": [
        {
          "details": "Error of only allowed at the end of epoch"
        }
      ],
      "ErrCallerMustBeCoinbase()": [
        {
          "details": "Error of method caller must be coinbase"
        }
      ],
      "ErrCannotBailout(address)": [
        {
          "details": "Error of cannot bailout due to high tier slash."
        }
      ],
      "ErrContractTypeNotFound(uint8)": [
        {
          "details": "Error of invalid role."
        }
      ],
      "ErrExceedsMaxNumberOfCandidate()": [
        {
          "details": "Error of exceeding maximum number of candidates."
        }
      ],
      "ErrExistentCandidate()": [
        {
          "details": "Error of querying for already existent candidate."
        }
      ],
      "ErrExistentCandidateAdmin(address)": [
        {
          "details": "Error of candidate admin already exists."
        }
      ],
      "ErrExistentTreasury(address)": [
        {
          "details": "Error of treasury already exists."
        }
      ],
      "ErrInsufficientBalance(bytes4,uint256,uint256)": [
        {
          "details": "Error of sender has insufficient balance."
        }
      ],
      "ErrInvalidCommissionRate()": [
        {
          "details": "Error of invalid commission rate."
        }
      ],
      "ErrInvalidEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid effective days onwards."
        }
      ],
      "ErrInvalidMaxPrioritizedValidatorNumber()": [
        {
          "details": "Error thrown when an invalid maximum prioritized validator number is provided."
        }
      ],
      "ErrInvalidMinEffectiveDaysOnwards()": [
        {
          "details": "Error of invalid min effective days onwards."
        }
      ],
      "ErrLockedFundMightBeRecycled(address)": [
        {
          "details": "Error thrown when the the locked fund of emergency exit might be recycled."
        }
      ],
      "ErrLockedFundReleaseInfoNotFound(address)": [
        {
          "details": "Error thrown when the info of releasing locked fund not exist."
        }
      ],
      "ErrNonExistentCandidate()": [
        {
          "details": "Error of querying for non-existent candidate."
        }
      ],
      "ErrRecipientRevert(bytes4)": [
        {
          "details": "Error of recipient not accepting RON when transfer RON."
        }
      ],
      "ErrTrustedOrgCannotRenounce()": [
        {
          "details": "Error of trusted org cannot renounce."
        }
      ],
      "ErrUnauthorized(bytes4,uint8)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "expectedRole": "The role required to perform the function.",
            "msgSig": "The function signature (bytes4) that the caller is unauthorized to perform."
          }
        }
      ],
      "ErrUnauthorizedReceiveRON()": [
        {
          "details": "Error thrown when receives RON from neither staking vesting contract nor staking contract"
        }
      ],
      "ErrUnexpectedInternalCall(bytes4,uint8,address)": [
        {
          "details": "Error indicating that the caller is unauthorized to perform a specific function.",
          "params": {
            "actual": "The actual address that called to the function.",
            "expectedContractType": "The contract type required to perform the function.",
            "msgSig": "The function signature (bytes4)."
          }
        }
      ],
      "ErrZeroCodeContract(address)": [
        {
          "details": "Error of set to non-contract."
        }
      ],
      "NonExistentRecyclingInfo()": [
        {
          "details": "Error thrown when queries for a non existent info."
        }
      ]
    }
  },
  "isFoundry": true,
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedEmergencyExit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedRevokingCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyRequestedUpdatingCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAlreadyWrappedEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrAtEndOfEpochOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerMustBeCoinbase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ErrCannotBailout\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"ErrContractTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExceedsMaxNumberOfCandidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrExistentCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAdminAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentCandidateAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"}],\"name\":\"ErrExistentTreasury\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"ErrInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidCommissionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMaxPrioritizedValidatorNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidMinEffectiveDaysOnwards\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"ErrLockedFundMightBeRecycled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"ErrLockedFundReleaseInfoNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNonExistentCandidate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"}],\"name\":\"ErrRecipientRevert\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrTrustedOrgCannotRenounce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum RoleAccess\",\"name\":\"expectedRole\",\"type\":\"uint8\"}],\"name\":\"ErrUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrUnauthorizedReceiveRON\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"msgSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum ContractType\",\"name\":\"expectedContractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"ErrUnexpectedInternalCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ErrZeroCodeContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentRecyclingInfo\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"name\":\"BlockProducerSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICoinbaseExecution.BlockRewardDeprecatedType\",\"name\":\"deprecatedType\",\"type\":\"uint8\"}],\"name\":\"BlockRewardDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submittedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"BlockRewardSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"BridgeOperatorRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgeOperators\",\"type\":\"address[]\"}],\"name\":\"BridgeOperatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CandidateGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"}],\"name\":\"CandidateRevokingTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"name\":\"CandidateTopupDeadlineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"name\":\"CandidatesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdateScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycleFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeprecatedRewardRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitLockedFundReleasingFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExpiryDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FastFinalityRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"FastFinalityRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"MaxValidatorCandidateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfDays\",\"type\":\"uint256\"}],\"name\":\"MinEffectiveDaysOnwardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"MiningRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StakingRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"StakingRewardDistributionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jailedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deductedStakingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blockProducerRewardDeprecated\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bridgeOperatorRewardDeprecated\",\"type\":\"bool\"}],\"name\":\"ValidatorPunished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"name\":\"ValidatorSetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ValidatorUnjailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"periodEnding\",\"type\":\"bool\"}],\"name\":\"WrappedUpEpoch\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADDITION_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"checkJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"checkJailedAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"name\":\"checkManyJailed\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"candidateIds\",\"type\":\"address[]\"}],\"name\":\"checkManyJailedById\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"checkMiningRewardDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"checkMiningRewardDeprecatedAtPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriodStartAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExitLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExpiryDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochEndingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"epochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"execApplyValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"execBailOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"execChangeAdminAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"newConsensusAddr\",\"type\":\"address\"}],\"name\":\"execChangeConsensusAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"execChangeTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"execReleaseLockedFundForEmergencyExitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secLeftToRevoke\",\"type\":\"uint256\"}],\"name\":\"execRequestEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secsLeft\",\"type\":\"uint256\"}],\"name\":\"execRequestRenounceCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"execRequestUpdateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newJailedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cannotBailout\",\"type\":\"bool\"}],\"name\":\"execSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducerIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockProducers\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__shadowedAdmin\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"__shadowedConsensus\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"__shadowedTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"____deprecatedBridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cid\",\"type\":\"address\"}],\"name\":\"getCandidateInfoById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__shadowedAdmin\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"__shadowedConsensus\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"__shadowedTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"____deprecatedBridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidateInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"__shadowedAdmin\",\"type\":\"address\"},{\"internalType\":\"TConsensus\",\"name\":\"__shadowedConsensus\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"__shadowedTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"____deprecatedBridgeOperatorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revokingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.ValidatorCandidate[]\",\"name\":\"list\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getCommissionChangeSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"effectiveTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct ICandidateManager.CommissionSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"contract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getEmergencyExitInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recyclingAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommonInfo.EmergencyExitInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"getJailedTimeLeft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"getJailedTimeLeftAtBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJailed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockLeft_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLeft_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidateIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCandidates\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"cids\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidators\",\"outputs\":[{\"internalType\":\"TConsensus[]\",\"name\":\"consensusList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__slashIndicatorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__stakingVestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__maintenanceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__roninTrustedOrganizationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__maxValidatorCandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__minEffectiveDaysOnwards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__numberOfBlocksInEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"__emergencyExitConfigs\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fastFinalityTrackingContract\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileContract\",\"type\":\"address\"}],\"name\":\"initializeV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"}],\"name\":\"isBlockProducer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"isBlockProducerById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensusAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isCandidateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidateId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isCandidateAdminById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPeriodEnding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"TConsensus\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"isValidatorCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPrioritizedValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumPrioritizedValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorCandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidatorNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumValidatorNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEffectiveDaysOnward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExitLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setEmergencyExpiryDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setMaxValidatorCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfDays\",\"type\":\"uint256\"}],\"name\":\"setMinEffectiveDaysOnwards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitBlockReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockProducer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeprecatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"tryGetPeriodOfEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_filled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_periodNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpEpoch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyRequestedEmergencyExit()\":[{\"details\":\"Error of already requested emergency exit before.\"}],\"ErrAlreadyRequestedRevokingCandidate()\":[{\"details\":\"Error of already requested revoking candidate before.\"}],\"ErrAlreadyRequestedUpdatingCommissionRate()\":[{\"details\":\"Error of commission change schedule exists.\"}],\"ErrAlreadyWrappedEpoch()\":[{\"details\":\"Error of query for already wrapped up epoch\"}],\"ErrAtEndOfEpochOnly()\":[{\"details\":\"Error of only allowed at the end of epoch\"}],\"ErrCallerMustBeCoinbase()\":[{\"details\":\"Error of method caller must be coinbase\"}],\"ErrCannotBailout(address)\":[{\"details\":\"Error of cannot bailout due to high tier slash.\"}],\"ErrContractTypeNotFound(uint8)\":[{\"details\":\"Error of invalid role.\"}],\"ErrExceedsMaxNumberOfCandidate()\":[{\"details\":\"Error of exceeding maximum number of candidates.\"}],\"ErrExistentCandidate()\":[{\"details\":\"Error of querying for already existent candidate.\"}],\"ErrExistentCandidateAdmin(address)\":[{\"details\":\"Error of candidate admin already exists.\"}],\"ErrExistentTreasury(address)\":[{\"details\":\"Error of treasury already exists.\"}],\"ErrInsufficientBalance(bytes4,uint256,uint256)\":[{\"details\":\"Error of sender has insufficient balance.\"}],\"ErrInvalidCommissionRate()\":[{\"details\":\"Error of invalid commission rate.\"}],\"ErrInvalidEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid effective days onwards.\"}],\"ErrInvalidMaxPrioritizedValidatorNumber()\":[{\"details\":\"Error thrown when an invalid maximum prioritized validator number is provided.\"}],\"ErrInvalidMinEffectiveDaysOnwards()\":[{\"details\":\"Error of invalid min effective days onwards.\"}],\"ErrLockedFundMightBeRecycled(address)\":[{\"details\":\"Error thrown when the the locked fund of emergency exit might be recycled.\"}],\"ErrLockedFundReleaseInfoNotFound(address)\":[{\"details\":\"Error thrown when the info of releasing locked fund not exist.\"}],\"ErrNonExistentCandidate()\":[{\"details\":\"Error of querying for non-existent candidate.\"}],\"ErrRecipientRevert(bytes4)\":[{\"details\":\"Error of recipient not accepting RON when transfer RON.\"}],\"ErrTrustedOrgCannotRenounce()\":[{\"details\":\"Error of trusted org cannot renounce.\"}],\"ErrUnauthorized(bytes4,uint8)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"expectedRole\":\"The role required to perform the function.\",\"msgSig\":\"The function signature (bytes4) that the caller is unauthorized to perform.\"}}],\"ErrUnauthorizedReceiveRON()\":[{\"details\":\"Error thrown when receives RON from neither staking vesting contract nor staking contract\"}],\"ErrUnexpectedInternalCall(bytes4,uint8,address)\":[{\"details\":\"Error indicating that the caller is unauthorized to perform a specific function.\",\"params\":{\"actual\":\"The actual address that called to the function.\",\"expectedContractType\":\"The contract type required to perform the function.\",\"msgSig\":\"The function signature (bytes4).\"}}],\"ErrZeroCodeContract(address)\":[{\"details\":\"Error of set to non-contract.\"}],\"NonExistentRecyclingInfo()\":[{\"details\":\"Error thrown when queries for a non existent info.\"}]},\"events\":{\"BlockProducerSetUpdated(uint256,uint256,address[])\":{\"details\":\"Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\"},\"BlockRewardDeprecated(address,uint256,uint8)\":{\"details\":\"Emitted when the reward of the block producer is deprecated.\"},\"BlockRewardSubmitted(address,uint256,uint256)\":{\"details\":\"Emitted when the block reward is submitted.\"},\"BridgeOperatorRewardDistributed(address,address,address,uint256)\":{\"details\":\"Emitted when the bridge operator reward is distributed.\"},\"BridgeOperatorRewardDistributionFailed(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when the contract fails when distributing the bridge operator reward.\"},\"BridgeOperatorSetUpdated(uint256,uint256,address[])\":{\"details\":\"Emitted when the bridge operator set is updated.\"},\"CandidateGranted(address,address,address)\":{\"details\":\"Emitted when the validator candidate is granted.\"},\"CandidateRevokingTimestampUpdated(address,uint256)\":{\"details\":\"Emitted when the revoking timestamp of a candidate is updated.\"},\"CandidateTopupDeadlineUpdated(address,uint256)\":{\"details\":\"Emitted when the topup deadline of a candidate is updated.\"},\"CandidatesRevoked(address[])\":{\"details\":\"Emitted when the validator candidate is revoked.\"},\"CommissionRateUpdateScheduled(address,uint256,uint256)\":{\"details\":\"Emitted when a schedule for updating commission rate is set.\"},\"CommissionRateUpdated(address,uint256)\":{\"details\":\"Emitted when the commission rate of a validator is updated.\"},\"ContractUpdated(uint8,address)\":{\"details\":\"Emitted when a contract is updated.\"},\"DeprecatedRewardRecycleFailed(address,uint256,uint256)\":{\"details\":\"Emitted when the deprecated reward withdrawal is failed\"},\"DeprecatedRewardRecycled(address,uint256)\":{\"details\":\"Emitted when the deprecated reward is withdrawn.\"},\"EmergencyExitLockedAmountUpdated(uint256)\":{\"details\":\"Emitted when the emergency exit locked amount is updated.\"},\"EmergencyExitLockedFundReleased(address,address,uint256)\":{\"details\":\"Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\"},\"EmergencyExitLockedFundReleasingFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the fund that locked from an emergency exit request is failed to transferred back.\"},\"EmergencyExitRequested(address,uint256)\":{\"details\":\"Emitted when the fund is locked from an emergency exit request\"},\"EmergencyExpiryDurationUpdated(uint256)\":{\"details\":\"Emitted when the emergency expiry duration is updated.\"},\"FastFinalityRewardDistributed(address,address,uint256)\":{\"details\":\"Emitted when the fast finality reward is distributed.\"},\"FastFinalityRewardDistributionFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the contract fails when distributing the fast finality reward.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MaxValidatorCandidateUpdated(uint256)\":{\"details\":\"Emitted when the maximum number of validator candidates is updated.\"},\"MinEffectiveDaysOnwardsUpdated(uint256)\":{\"details\":\"Emitted when the min offset to the effective date of commission rate change is updated.\"},\"MiningRewardDistributed(address,address,uint256)\":{\"details\":\"Emitted when the block producer reward is distributed.\"},\"MiningRewardDistributionFailed(address,address,uint256,uint256)\":{\"details\":\"Emitted when the contract fails when distributing the block producer reward.\"},\"StakingRewardDistributed(uint256,address[],uint256[])\":{\"details\":\"Emitted when the amount of RON reward is distributed to staking contract.\"},\"StakingRewardDistributionFailed(uint256,address[],uint256[],uint256)\":{\"details\":\"Emitted when the contracts fails when distributing the amount of RON to the staking contract.\"},\"ValidatorPunished(address,uint256,uint256,uint256,bool,bool)\":{\"details\":\"Emitted when the validator is punished.\"},\"ValidatorSetUpdated(uint256,address[])\":{\"details\":\"Emitted when the validator set is updated\"},\"ValidatorUnjailed(address,uint256)\":{\"details\":\"Emitted when the validator get out of jail by bailout.\"},\"WrappedUpEpoch(uint256,uint256,bool)\":{\"details\":\"Emitted when the epoch is wrapped up.\"}},\"kind\":\"dev\",\"methods\":{\"checkJailed(address)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\"},\"checkJailedAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\"},\"checkManyJailed(address[])\":{\"details\":\"Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\"},\"checkMiningRewardDeprecated(address)\":{\"details\":\"Returns whether the incoming reward of the block producer is deprecated during the current period.\"},\"checkMiningRewardDeprecatedAtPeriod(address,uint256)\":{\"details\":\"Returns whether the incoming reward of the block producer is deprecated during a specific period.\"},\"currentPeriod()\":{\"details\":\"Returns the period index from the current block.\"},\"currentPeriodStartAtBlock()\":{\"details\":\"Returns the block number that the current period starts at.\"},\"emergencyExitLockedAmount()\":{\"details\":\"Returns the amount of RON to lock from a consensus address.\"},\"emergencyExpiryDuration()\":{\"details\":\"Returns the duration that an emergency request is expired and the fund will be recycled.\"},\"epochEndingAt(uint256)\":{\"details\":\"Returns whether the epoch ending is at the block number `_block`.\"},\"epochOf(uint256)\":{\"details\":\"Returns the epoch index from the block number.\"},\"execApplyValidatorCandidate(address,address,address,uint256)\":{\"details\":\"Grants a validator candidate. Requirements: - The method caller is staking contract. Emits the event `CandidateGranted`.\"},\"execBailOut(address,uint256)\":{\"details\":\"Finalize the bailout request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorUnjailed`.\"},\"execChangeAdminAddr(address,address)\":{\"details\":\"Fallback function of `Profile-changeAdminAddr`. This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract.\"},\"execChangeConsensusAddr(address,address)\":{\"details\":\"Fallback function of `Profile-changeConsensusAddr`. This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract.\"},\"execChangeTreasuryAddr(address,address)\":{\"details\":\"Fallback function of `Profile-changeTreasuryAddr`. This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`. Requirements: - The caller must be the Profile contract.\"},\"execReleaseLockedFundForEmergencyExitRequest(address,address)\":{\"details\":\"Unlocks fund for emergency exit request. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked. Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\"},\"execRequestEmergencyExit(address,uint256)\":{\"details\":\"Fallback function of `IStaking-requestEmergencyExit`. Requirements: - The method caller is staking contract.\"},\"execRequestRenounceCandidate(address,uint256)\":{\"details\":\"Requests to revoke a validator candidate in next `secsLeft` seconds. Requirements: - The method caller is staking contract. Emits the event `CandidateRevokingTimestampUpdated`.\"},\"execRequestUpdateCommissionRate(address,uint256,uint256)\":{\"details\":\"Fallback function of `CandidateStaking-requestUpdateCommissionRate`. Requirements: - The method caller is the staking contract. - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards - The `rate` must be in range of [0_00; 100_00]. Emits the event `CommissionRateUpdateScheduled`.\"},\"execSlash(address,uint256,uint256,bool)\":{\"details\":\"Finalize the slash request from slash indicator contract. Requirements: - The method caller is slash indicator contract. Emits the event `ValidatorPunished`.\"},\"getBlockProducerIds()\":{\"details\":\"Returns the ids current block producer list.\"},\"getBlockProducers()\":{\"details\":\"Returns the current block producer list.\"},\"getCandidateInfo(address)\":{\"details\":\"Returns the info of a candidate.\"},\"getCandidateInfoById(address)\":{\"details\":\"Returns the info of a candidate.\"},\"getCandidateInfos()\":{\"details\":\"Returns all candidate info.\"},\"getCommissionChangeSchedule(address)\":{\"details\":\"Returns the schedule of changing commission rate of a candidate address.\"},\"getContract(uint8)\":{\"details\":\"Returns the address of a contract with a specific role. Throws an error if no contract is set for the specified role.\",\"params\":{\"contractType\":\"The role of the contract to retrieve.\"},\"returns\":{\"contract_\":\"The address of the contract with the specified role.\"}},\"getEmergencyExitInfo(address)\":{\"details\":\"Returns the emergency exit request.\"},\"getJailedTimeLeft(address)\":{\"details\":\"Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\"},\"getJailedTimeLeftAtBlock(address,uint256)\":{\"details\":\"Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\"},\"getLastUpdatedBlock()\":{\"details\":\"Returns the block that validator set was updated.\"},\"getValidatorCandidateIds()\":{\"details\":\"Returns the list of validator candidate ids.\"},\"getValidatorCandidates()\":{\"details\":\"Returns the list validator candidates.\"},\"getValidatorIds()\":{\"details\":\"Returns the ids of current validator list.\"},\"getValidators()\":{\"details\":\"Returns the current validator list.\"},\"initialize(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256[2])\":{\"details\":\"Initializes the contract storage.\"},\"isBlockProducer(address)\":{\"details\":\"Returns whether the consensus address is block producer or not.\"},\"isBlockProducerById(address)\":{\"details\":\"Returns whether the id is block producer or not.\"},\"isCandidateAdmin(address,address)\":{\"details\":\"Returns whether the address is the candidate admin.\"},\"isPeriodEnding()\":{\"details\":\"Returns whether the period ending at the current block number.\"},\"isValidatorCandidate(address)\":{\"details\":\"Returns whether the address is a validator (candidate).\"},\"maxPrioritizedValidatorNumber()\":{\"details\":\"Returns the number of reserved slots for prioritized validators.\"},\"maxValidatorCandidate()\":{\"details\":\"Returns the maximum number of validator candidate.\"},\"maxValidatorNumber()\":{\"details\":\"Returns the maximum number of validators in the epoch.\"},\"minEffectiveDaysOnward()\":{\"details\":\"Returns the minimum number of days to the effective date of commission rate change.\"},\"numberOfBlocksInEpoch()\":{\"details\":\"Returns the number of blocks in a epoch.\"},\"setContract(uint8,address)\":{\"details\":\"Sets the address of a contract with a specific role. Emits the event {ContractUpdated}.\",\"params\":{\"addr\":\"The address of the contract to set.\",\"contractType\":\"The role of the contract to set.\"}},\"setEmergencyExitLockedAmount(uint256)\":{\"details\":\"Sets the amount of RON to lock from a consensus address. Requirements: - The method caller is admin. Emits the event `EmergencyExitLockedAmountUpdated`.\"},\"setEmergencyExpiryDuration(uint256)\":{\"details\":\"Sets the duration that an emergency request is expired and the fund will be recycled. Requirements: - The method caller is admin. Emits the event `EmergencyExpiryDurationUpdated`.\"},\"setMaxValidatorCandidate(uint256)\":{\"details\":\"Sets the maximum number of validator candidate. Requirements: - The method caller is admin. Emits the `MaxValidatorCandidateUpdated` event.\"},\"setMinEffectiveDaysOnwards(uint256)\":{\"details\":\"Sets the minimum number of days to the effective date of commision rate change. Requirements: - The method caller is admin. Emits the `MinEffectiveDaysOnwardsUpdated` event.\"},\"submitBlockReward()\":{\"details\":\"Submits reward of the current block. Requirements: - The method caller is coinbase. Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer. Emits the event `BlockRewardSubmitted` for the valid call.\"},\"totalBlockProducer()\":{\"details\":\"Returns total numbers of the block producers.\"},\"totalDeprecatedReward()\":{\"details\":\"Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\"},\"tryGetPeriodOfEpoch(uint256)\":{\"details\":\"Tries to get the period index from the epoch number.\"},\"wrapUpEpoch()\":{\"details\":\"Wraps up the current epoch. Requirements: - The method must be called when the current epoch is ending. - The epoch is not wrapped yet. - The method caller is coinbase. Emits the event `MiningRewardDistributed` when some validator has reward distributed. Emits the event `StakingRewardDistributed` when some staking pool has reward distributed. Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up. Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending. Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated. Emits the event `WrappedUpEpoch`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ronin/validator/RoninValidatorSet.sol\":\"RoninValidatorSet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@chainlink/contracts/=lib/chainlink/contracts/\",\":@contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":@fdk/=lib/foundry-deployment-kit/script/\",\":@openzeppelin-v5/contracts/=lib/oz-v5/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/prb-math/\",\":@prb/test/=lib/prb-test/src/\",\":@ronin/contracts/=contracts/\",\":@ronin/test/=test/foundry/\",\":@solady/=lib/foundry-deployment-kit/lib/solady/src/\",\":chainlink/=lib/chainlink/\",\":contract-libs/=lib/contract-libs/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/oz-v5/lib/erc4626-tests/\",\":forge-std/=lib/foundry-deployment-kit/lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":oz-v5/=lib/oz-v5/contracts/\",\":prb-math/=lib/prb-math/src/\",\":prb-test/=lib/prb-test/src/\",\":safe-smart-account/contracts/=lib/safe-smart-account/contracts/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=lib/foundry-deployment-kit/lib/solady/src/\"]},\"sources\":{\"contracts/extensions/RONTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract RONTransferHelper {\\n  /// @dev Error of sender has insufficient balance.\\n  error ErrInsufficientBalance(bytes4 msgSig, uint256 currentBalance, uint256 sendAmount);\\n  /// @dev Error of recipient not accepting RON when transfer RON.\\n  error ErrRecipientRevert(bytes4 msgSig);\\n\\n  /**\\n   * @dev See `_sendRON`.\\n   * Reverts if the recipient does not receive RON.\\n   */\\n  function _transferRON(address payable recipient, uint256 amount) internal {\\n    if (!_sendRON(recipient, amount)) revert ErrRecipientRevert(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Send `amount` RON to the address `recipient`.\\n   * Returns whether the recipient receives RON or not.\\n   * Reverts once the contract balance is insufficient.\\n   *\\n   * Note: consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _sendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    if (address(this).balance < amount) revert ErrInsufficientBalance(msg.sig, address(this).balance, amount);\\n    return _unsafeSendRON(recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Unsafe send `amount` RON to the address `recipient`. If the sender's balance is insufficient,\\n   * the call does not revert.\\n   *\\n   * Note:\\n   * - Does not assert whether the balance of sender is sufficient.\\n   * - Does not assert whether the recipient accepts RON.\\n   * - Consider using `ReentrancyGuard` before calling this function.\\n   *\\n   */\\n  function _unsafeSendRON(address payable recipient, uint256 amount) internal returns (bool success) {\\n    (success,) = recipient.call{ value: amount }(\\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same purpose with {_unsafeSendRONLimitGas(address,uin256)} but containing gas limit stipend forwarded in the call.\\n   */\\n  function _unsafeSendRONLimitGas(\\n    address payable recipient,\\n    uint256 amount,\\n    uint256 gas\\n  ) internal returns (bool success) {\\n    // When msg.value = 0, the forwarding gas will not be auto-added 2300.\\n    // We add an extra 2300 to make sure all calls will have the same amount of gas.\\n    if (amount == 0) {\\n      gas += 2300;\\n    }\\n\\n    (success,) = recipient.call{ value: amount, gas: gas }(\\\"\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x6c22ff06a40c3aee46c15c29f429d4a7e785824209264ff379c4901604a08dfd\",\"license\":\"MIT\"},\"contracts/extensions/TransparentUpgradeableProxyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract TransparentUpgradeableProxyV2 is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable TransparentUpgradeableProxy(_logic, admin_, _data) { }\\n\\n  /**\\n   * @dev Calls a function from the current implementation as specified by `_data`, which should be an encoded function call.\\n   *\\n   * Requirements:\\n   * - Only the admin can call this function.\\n   *\\n   * Note: The proxy admin is not allowed to interact with the proxy logic through the fallback function to avoid\\n   * triggering some unexpected logic. This is to allow the administrator to explicitly call the proxy, please consider\\n   * reviewing the encoded data `_data` and the method which is called before using this.\\n   *\\n   */\\n  function functionDelegateCall(bytes memory _data) public payable ifAdmin {\\n    address _addr = _implementation();\\n    assembly {\\n      let _result := delegatecall(gas(), _addr, add(_data, 32), mload(_data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch _result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xeac1fc1818ca3720fff47e43270accaee506dbedabc25a4f67476d49bd6ef7f3\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { HasProxyAdmin } from \\\"./HasProxyAdmin.sol\\\";\\nimport \\\"../../interfaces/collections/IHasContracts.sol\\\";\\nimport { IdentityGuard } from \\\"../../utils/IdentityGuard.sol\\\";\\nimport { ErrUnexpectedInternalCall } from \\\"../../utils/CommonErrors.sol\\\";\\n\\n/**\\n * @title HasContracts\\n * @dev A contract that provides functionality to manage multiple contracts with different roles.\\n */\\nabstract contract HasContracts is HasProxyAdmin, IHasContracts, IdentityGuard {\\n  /// @dev value is equal to keccak256(\\\"@ronin.dpos.collections.HasContracts.slot\\\") - 1\\n  bytes32 private constant _STORAGE_SLOT = 0xdea3103d22025c269050bea94c0c84688877f12fa22b7e6d2d5d78a9a49aa1cb;\\n\\n  /**\\n   * @dev Modifier to restrict access to functions only to contracts with a specific role.\\n   * @param contractType The contract type that allowed to call\\n   */\\n  modifier onlyContract(ContractType contractType) virtual {\\n    _requireContract(contractType);\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function setContract(ContractType contractType, address addr) external virtual onlyAdmin {\\n    _requireHasCode(addr);\\n    _setContract(contractType, addr);\\n  }\\n\\n  /**\\n   * @inheritdoc IHasContracts\\n   */\\n  function getContract(ContractType contractType) public view returns (address payable contract_) {\\n    contract_ = payable(_getContractMap()[uint8(contractType)]);\\n    if (contract_ == address(0)) revert ErrContractTypeNotFound(contractType);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the address of a contract with a specific role.\\n   * @param contractType The contract type of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function _setContract(ContractType contractType, address addr) internal virtual {\\n    _getContractMap()[uint8(contractType)] = addr;\\n    emit ContractUpdated(contractType, addr);\\n  }\\n\\n  /**\\n   * @dev Internal function to access the mapping of contract addresses with roles.\\n   * @return contracts_ The mapping of contract addresses with roles.\\n   */\\n  function _getContractMap() private pure returns (mapping(uint8 => address) storage contracts_) {\\n    assembly {\\n      contracts_.slot := _STORAGE_SLOT\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to check if the calling contract has a specific role.\\n   * @param contractType The contract type that the calling contract must have.\\n   * @dev Throws an error if the calling contract does not have the specified role.\\n   */\\n  function _requireContract(ContractType contractType) private view {\\n    if (msg.sender != getContract(contractType)) {\\n      revert ErrUnexpectedInternalCall(msg.sig, contractType, msg.sender);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x53b9c2c44f39fa16fd4582b4667e808b8ab7c43437c263b59b5cbf5d2df47e78\",\"license\":\"MIT\"},\"contracts/extensions/collections/HasProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract HasProxyAdmin {\\n  // bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  modifier onlyAdmin() {\\n    _requireAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns proxy admin.\\n   */\\n  function _getAdmin() internal view virtual returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _requireAdmin() internal view {\\n    if (msg.sender != _getAdmin()) revert ErrUnauthorized(msg.sig, RoleAccess.ADMIN);\\n  }\\n}\\n\",\"keccak256\":\"0x0916021d04ea0c93c54978dc2fd46575fd2bd867369fbf9ce49f316939ddaf25\",\"license\":\"MIT\"},\"contracts/extensions/consumers/GlobalConfigConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GlobalConfigConsumer {\\n  /// @dev The addition amount of gas sending along in external calls. Total gas stipend is added with default 2300 gas.\\n  uint256 public constant DEFAULT_ADDITION_GAS = 6200;\\n  /// @dev The length of a period in second.\\n  uint256 public constant PERIOD_DURATION = 1 days;\\n}\\n\",\"keccak256\":\"0x314c0ba791b9a48e41fe5b10ff37b1dd49dc37db524fa0db4d0389f8fdd0230c\",\"license\":\"MIT\"},\"contracts/extensions/consumers/PercentageConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract PercentageConsumer {\\n  uint256 internal constant _MAX_PERCENTAGE = 100_00;\\n}\\n\",\"keccak256\":\"0x5dc54a24348c5d614de1b4805dddeab4dda72f9f0636b27bf0ed295fee017dcf\",\"license\":\"MIT\"},\"contracts/interfaces/IFastFinalityTracking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../udvts/Types.sol\\\";\\n\\ninterface IFastFinalityTracking {\\n  struct Record {\\n    // The number of votes for fast finality.\\n    uint256 qcVoteCount;\\n    // The fast finality score.\\n    uint256 score;\\n  }\\n\\n  // See {findNormalizedSumAndPivot}\\n  struct NormalizedData {\\n    uint256 normalizedSum;\\n    mapping(address cid => uint256 normalizedStake) normalizedStake;\\n  }\\n\\n  /**\\n   * @dev Submit list of `voters` who vote for fast finality in the current block.\\n   *\\n   * Requirements:\\n   * - Only called once per block\\n   * - Only coinbase can call this method\\n   */\\n  function recordFinality(TConsensus[] calldata voters) external;\\n\\n  /**\\n   * @dev Returns vote count of `addrs` in the `epoch`.\\n   */\\n  function getManyFinalityVoteCounts(\\n    uint256 epoch,\\n    TConsensus[] calldata addrs\\n  ) external view returns (uint256[] memory voteCounts);\\n\\n  /**\\n   * @dev Returns normalized data for given period.\\n   */\\n  function getNormalizedSum(uint256 period) external view returns (uint256 normalizedSum);\\n\\n  /**\\n   * @dev Returns normalized stake of `cid` in the `period`.\\n   */\\n  function getNormalizedStake(uint256 period, address cid) external view returns (uint256 normalizedStake);\\n\\n  /**\\n   * @dev Returns vote count of `consensuses` in the `epoch`.\\n   */\\n  function getManyFinalityScores(\\n    uint256 epoch,\\n    TConsensus[] calldata consensuses\\n  ) external view returns (uint256[] memory voteCounts);\\n\\n  /**\\n   * @dev Returns vote count of `addrs` in the `epoch`.\\n   */\\n  function getManyFinalityScoresById(\\n    uint256 epoch,\\n    address[] calldata cids\\n  ) external view returns (uint256[] memory voteCounts);\\n\\n  /**\\n   * @dev Returns vote count of `cids` in the `epoch`.\\n   */\\n  function getManyFinalityVoteCountsById(\\n    uint256 epoch,\\n    address[] calldata cids\\n  ) external view returns (uint256[] memory voteCounts);\\n}\\n\",\"keccak256\":\"0xc393fb7a57e1a090ff422e772c1d2ed3e5aa850ae7ad0c865ee2be3ee7340645\",\"license\":\"MIT\"},\"contracts/interfaces/IMaintenance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../udvts/Types.sol\\\";\\n\\ninterface IMaintenance {\\n  /**\\n   * @dev Error thrown when attempting to exit maintenance status while not in maintenance duration.\\n   */\\n  error ErrNotOnMaintenance();\\n  /**\\n   * @dev Error thrown when attempting to schedule an already scheduled event.\\n   */\\n  error ErrAlreadyScheduled();\\n\\n  /**\\n   * @dev Error thrown when referring to a non-existent schedule.\\n   */\\n  error ErrUnexistedSchedule();\\n\\n  /**\\n   * @dev Error thrown when the end block of a schedule is out of range.\\n   */\\n  error ErrEndBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when the start block of a schedule is out of range.\\n   */\\n  error ErrStartBlockOutOfRange();\\n\\n  /**\\n   * @dev Error thrown when attempting to initiate maintenance while already in maintenance mode.\\n   */\\n  error ErrAlreadyOnMaintenance();\\n\\n  /**\\n   * @dev Error thrown when attempting an action before the cooldown period has ended.\\n   */\\n  error ErrCooldownTimeNotYetEnded();\\n\\n  /**\\n   * @dev Error thrown when the total number of schedules exceeds the limit.\\n   */\\n  error ErrTotalOfSchedulesExceeded();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration is specified.\\n   */\\n  error ErrInvalidMaintenanceDuration();\\n\\n  /**\\n   * @dev Error thrown when an invalid maintenance duration configuration is provided.\\n   */\\n  error ErrInvalidMaintenanceDurationConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid offset is specified to start the schedule configurations.\\n   */\\n  error ErrInvalidOffsetToStartScheduleConfigs();\\n\\n  struct Schedule {\\n    uint256 from;\\n    uint256 to;\\n    uint256 lastUpdatedBlock;\\n    uint256 requestTimestamp;\\n  }\\n\\n  /// @dev Emitted when a maintenance is early exit in maintenance duration.\\n  event MaintenanceExited(address indexed cid);\\n  /// @dev Emitted when a maintenance is scheduled.\\n  event MaintenanceScheduled(address indexed cid, Schedule);\\n  /// @dev Emitted when a schedule of maintenance is cancelled.\\n  event MaintenanceScheduleCancelled(address indexed cid);\\n  /// @dev Emitted when the maintenance config is updated.\\n  event MaintenanceConfigUpdated(\\n    uint256 minMaintenanceDurationInBlock,\\n    uint256 maxMaintenanceDurationInBlock,\\n    uint256 minOffsetToStartSchedule,\\n    uint256 maxOffsetToStartSchedule,\\n    uint256 maxSchedules,\\n    uint256 cooldownSecsToMaintain\\n  );\\n\\n  /**\\n   * @dev Exits the maintenance status.\\n   * @param consensusAddr The address of the consensus to exit maintenance status for.\\n   */\\n  function exitMaintenance(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained at the block number `_block`.\\n   */\\n  function checkMaintained(TConsensus consensusAddr, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator whose id `validatorId` maintained at the block number `_block`.\\n   */\\n  function checkMaintainedById(address validatorId, uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks.\\n   */\\n  function checkMaintainedInBlockRange(\\n    TConsensus consensusAddr,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the bool array indicating the validators maintained at block number `k` or not.\\n   */\\n  function checkManyMaintained(\\n    TConsensus[] calldata consensusAddrList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedById(\\n    address[] calldata candidateIdList,\\n    uint256 atBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns a bool array indicating the validators maintained in the inclusive range [`_fromBlock`, `_toBlock`] of blocks or not.\\n   */\\n  function checkManyMaintainedInBlockRange(\\n    TConsensus[] calldata _consensusAddrList,\\n    uint256 _fromBlock,\\n    uint256 _toBlock\\n  ) external view returns (bool[] memory);\\n\\n  function checkManyMaintainedInBlockRangeById(\\n    address[] calldata idList,\\n    uint256 fromBlock,\\n    uint256 toBlock\\n  ) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has finished cooldown.\\n   */\\n  function checkCooldownEnded(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator `consensusAddr` has schedule.\\n   */\\n  function checkScheduled(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the detailed schedule of the validator `consensusAddr`.\\n   */\\n  function getSchedule(TConsensus consensusAddr) external view returns (Schedule memory);\\n\\n  /**\\n   * @dev Returns the total of current schedules.\\n   */\\n  function totalSchedule() external view returns (uint256 count);\\n\\n  /**\\n   * @dev Returns the cooldown to maintain in seconds.\\n   */\\n  function cooldownSecsToMaintain() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the duration restriction, start time restriction, and max allowed for maintenance.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   * - The max duration is larger than the min duration.\\n   * - The max offset is larger than the min offset.\\n   *\\n   * Emits the event `MaintenanceConfigUpdated`.\\n   *\\n   */\\n  function setMaintenanceConfig(\\n    uint256 minMaintenanceDurationInBlock_,\\n    uint256 maxMaintenanceDurationInBlock_,\\n    uint256 minOffsetToStartSchedule_,\\n    uint256 maxOffsetToStartSchedule_,\\n    uint256 maxSchedules_,\\n    uint256 cooldownSecsToMaintain_\\n  ) external;\\n\\n  /**\\n   * @dev Returns the min duration for maintenance in block.\\n   */\\n  function minMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max duration for maintenance in block.\\n   */\\n  function maxMaintenanceDurationInBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the min block number that the schedule can start\\n   */\\n  function minOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev The offset to the max block number that the schedule can start\\n   */\\n  function maxOffsetToStartSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the max number of scheduled maintenances.\\n   */\\n  function maxSchedule() external view returns (uint256);\\n\\n  /**\\n   * @dev Schedules for maintenance from `startedAtBlock` to `endedAtBlock`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - The candidate `consensusAddr` has no schedule yet or the previous is done.\\n   * - The total number of schedules is not larger than `maxSchedules()`.\\n   * - The start block must be at least `minOffsetToStartSchedule()` and at most `maxOffsetToStartSchedule()` blocks from the current block.\\n   * - The end block is larger than the start block.\\n   * - The scheduled duration is larger than the `minMaintenanceDurationInBlock()` and less than the `maxMaintenanceDurationInBlock()`.\\n   * - The start block is at the start of an epoch.\\n   * - The end block is at the end of an epoch.\\n   *\\n   * Emits the event `MaintenanceScheduled`.\\n   *\\n   */\\n  function schedule(TConsensus consensusAddr, uint256 startedAtBlock, uint256 endedAtBlock) external;\\n\\n  /**\\n   * @dev Cancel the schedule of maintenance for the `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The candidate `consensusAddr` is the block producer.\\n   * - The method caller is candidate admin of the candidate `consensusAddr`.\\n   * - A schedule for the `consensusAddr` must be existent and not executed yet.\\n   *\\n   * Emits the event `MaintenanceScheduleCancelled`.\\n   */\\n  function cancelSchedule(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x5dd7249bb4cb2b9d991d0eb89d7f9eb481b4f004bf5a4f00960f5aa8d6286573\",\"license\":\"MIT\"},\"contracts/interfaces/IProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../udvts/Types.sol\\\";\\nimport \\\"../utils/RoleAccess.sol\\\";\\n\\ninterface IProfile {\\n  struct CandidateProfile {\\n    /**\\n     * @dev Primary key of the profile, use for backward querying.\\n     *\\n     * {Staking} Contract: index of pool\\n     * {RoninValidatorSet} Contract: index of almost all data related to a validator\\n     *\\n     */\\n    address id;\\n    /// @dev Consensus address.\\n    TConsensus consensus;\\n    /// @dev Validator\\u2019s admin address.\\n    address admin;\\n    /// @dev Treasury address.\\n    address payable treasury;\\n    /// @dev Address to voting proposal.\\n    address __reservedGovernor;\\n    /// @dev Public key for fast finality.\\n    bytes pubkey;\\n    /// @dev Timestamp of last change of any profile info.\\n    uint256 profileLastChange;\\n    /// @dev Old public key for fast finality.\\n    bytes oldPubkey;\\n    /// @dev Old consensus\\n    TConsensus oldConsensus;\\n    /// @dev Timestamp where the profile is registered.\\n    uint256 registeredAt;\\n    /// @dev VRF key hash for the profile.\\n    bytes32 vrfKeyHash;\\n    /// @dev Timestamp of last change of VRF key hash. Only used in the logic of Beacon. Not used for checking for cooldown of updating the profile.\\n    uint256 vrfKeyHashLastChange;\\n  }\\n\\n  /// @dev Event emitted when a profile with `id` is added.\\n  event ProfileAdded(address indexed id);\\n  /// @dev Event emitted when the profile is migrated (mostly when REP-4 update).\\n  event ProfileMigrated(address indexed id, address indexed admin, address indexed treasury);\\n  /// @dev Event emitted when a address in a profile is changed.\\n  event ProfileAddressChanged(address indexed id, RoleAccess indexed addressType, address indexed addr);\\n  /// @dev Event emitted when the consensus of a non-governor profile is changed.\\n  event ConsensusAddressOfNonGovernorChanged(address indexed id);\\n  /// @dev Event emitted when the pubkey of the `id` is changed.\\n  event PubkeyChanged(address indexed id, bytes pubkey);\\n  /// @dev Event emitted when the VRF key hash of the `id` is changed.\\n  event VRFKeyHashChanged(address indexed id, bytes32 vrfKeyHash);\\n  /// @dev Event emitted when the pubkey is verified successfully.\\n  event PubkeyVerified(bytes pubkey, bytes proofOfPossession);\\n\\n  /// @dev Error of already existed profile.\\n  error ErrExistentProfile();\\n  /// @dev Error of non existed profile.\\n  error ErrNonExistentProfile();\\n  /// @dev Error when create a new profile whose id and consensus are not identical.\\n  error ErrIdAndConsensusDiffer();\\n  /// @dev Error when failed to change any address or pubkey in the profile because cooldown is not ended.\\n  error ErrProfileChangeCooldownNotEnded();\\n  /**\\n   * @dev Error when there is a duplicated info of `value`, which is uin256-padding value of any address or hash of public key,\\n   * and with value type of `infoType`.\\n   */\\n  error ErrDuplicatedInfo(RoleAccess infoType, uint256 value);\\n  error ErrDuplicatedPubkey(bytes pubkey);\\n  error ErrZeroAddress(RoleAccess infoType);\\n  error ErrDuplicatedVRFKeyHash(bytes32 vrfKeyHash);\\n  error ErrZeroPubkey();\\n  error ErrInvalidProofOfPossession(bytes pubkey, bytes proofOfPossession);\\n  error ErrLookUpIdFailed(TConsensus consensus);\\n  error ErrLookUpIdFromVRFKeyFailed(bytes32 vrfKeyHash);\\n  error ErrValidatorOnRenunciation(address cid);\\n\\n  /// @dev Getter to query full `profile` from `id` address.\\n  function getId2Profile(address id) external view returns (CandidateProfile memory profile);\\n\\n  /// @dev Getter to query required random beacon info from `vrfKeyHash`.\\n  function getVRFKeyHash2BeaconInfo(bytes32 vrfKeyHash)\\n    external\\n    view\\n    returns (address id, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query required random beacon info from `id` address.\\n  function getId2BeaconInfo(address id)\\n    external\\n    view\\n    returns (bytes32 vrfKeyHash, uint256 vrfKeyHashLastChange, uint256 registeredAt);\\n\\n  /// @dev Getter to query `admin` from `id` address.\\n  function getId2Admin(address id) external view returns (address);\\n\\n  /// @dev Getter to query `treasury` from `id` address.\\n  function getId2Treasury(address id) external view returns (address payable);\\n\\n  /// @dev Getter to query `pubkey` from `id` address.\\n  function getId2Pubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `profileLastChange` from `id` address.\\n  function getId2ProfileLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `oldPubkey` from `id` address.\\n  function getId2OldPubkey(address id) external view returns (bytes memory);\\n\\n  /// @dev Getter to query `oldConsensus` from `id` address.\\n  function getId2OldConsensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `registeredAt` from `id` address.\\n  function getId2RegisteredAt(address id) external view returns (uint256);\\n\\n  /// @dev Getter to query `consensus` from `id` address.\\n  function getId2Consensus(address id) external view returns (TConsensus);\\n\\n  /// @dev Getter to query `vrfKeyHash` from `id` address.\\n  function getId2VRFKeyHash(address id) external view returns (bytes32);\\n\\n  /// @dev Getter to query `vrfKeyHashLastChange` from `id` address.\\n  function getId2VRFKeyHashLastChange(address id) external view returns (uint256);\\n\\n  /// @dev Getter to batch query from `id` to `registeredAt`.\\n  function getManyId2RegisteredAt(address[] calldata idList) external view returns (uint256[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `admin`, return address(0) if the profile not exist.\\n  function getManyId2Admin(address[] calldata idList) external view returns (address[] memory);\\n\\n  /// @dev Getter to batch query from `id` to `consensus`, return address(0) if the profile not exist.\\n  function getManyId2Consensus(address[] calldata idList) external view returns (TConsensus[] memory consensusList);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address, revert if not found.\\n  function getConsensus2Id(TConsensus consensus) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address, revert if not found.\\n  function getVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (address id);\\n\\n  /// @dev Getter to backward query from `consensus` address to `id` address.\\n  function tryGetConsensus2Id(TConsensus consensus) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward query from `vrfKeyHash` to `id` address.\\n  function tryGetVRFKeyHash2Id(bytes32 vrfKeyHash) external view returns (bool found, address id);\\n\\n  /// @dev Getter to backward batch query from `consensus` address to `id` address.\\n  function getManyConsensus2Id(TConsensus[] memory consensus) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Cross-contract function to add/update new profile of a validator candidate when they\\n   * applying for candidate role.\\n   *\\n   * Requirements:\\n   * - Only `stakingContract` can call this method.\\n   */\\n  function execApplyValidatorCandidate(\\n    address admin,\\n    address id,\\n    address treasury,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeAdminAddr(address id, address newAdminAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeConsensusAddr(address id, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Updated the treasury address of candidate id `id` immediately without waiting time.\\n   *\\n   * Emit an {ProfileAddressChanged}.\\n   */\\n  function changeTreasuryAddr(address id, address payable newTreasury) external;\\n\\n  /**\\n   * @notice The candidate admin changes the public key.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New public key must not be duplicated.\\n   * - The proof of public key possession must be verified successfully.\\n   * - The public key change cooldown must be ended.\\n   */\\n  function changePubkey(address id, bytes memory pubkey, bytes memory proofOfPossession) external;\\n\\n  /**\\n   * @notice The candidate admin changes the VRF key hash.\\n   *\\n   * @dev Requirements:\\n   * - The profile must be existed.\\n   * - Only user with candidate admin role can call this method.\\n   * - New VRF key hash must not be duplicated.\\n   * - The VRF key hash change cooldown must be ended.\\n   */\\n  function changeVRFKeyHash(address id, bytes32 vrfKeyHash) external;\\n\\n  /**\\n   * @dev Cross-contract function to for slash indicator to check the list of public\\n   * keys in finality slash proof\\n   *\\n   * Returns whether all public keys are registered.\\n   */\\n  function arePublicKeysRegistered(bytes[][2] calldata listOfPublicKey) external view returns (bool);\\n\\n  /**\\n   * @dev Change the cooldown between 2 public key change\\n   *\\n   * Requirement:\\n   *  - Only admin can call this method\\n   */\\n  function setCooldownConfig(uint256 cooldown) external;\\n\\n  /**\\n   * @dev Returns the config of cool down on change profile info.\\n   */\\n  function getCooldownConfig() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x13528cbc90483bb8db8ba1b1195b6fedfac874432df2814ecc4e32decf596891\",\"license\":\"MIT\"},\"contracts/interfaces/IQuorum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IQuorum {\\n  /// @dev Emitted when the threshold is updated\\n  event ThresholdUpdated(\\n    uint256 indexed nonce,\\n    uint256 indexed numerator,\\n    uint256 indexed denominator,\\n    uint256 previousNumerator,\\n    uint256 previousDenominator\\n  );\\n\\n  /**\\n   * @dev Returns the threshold.\\n   */\\n  function getThreshold() external view returns (uint256 _num, uint256 _denom);\\n\\n  /**\\n   * @dev Checks whether the `_voteWeight` passes the threshold.\\n   */\\n  function checkThreshold(uint256 _voteWeight) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the minimum vote weight to pass the threshold.\\n   */\\n  function minimumVoteWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `ThresholdUpdated` event.\\n   *\\n   */\\n  function setThreshold(\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) external returns (uint256 _previousNum, uint256 _previousDenom);\\n}\\n\",\"keccak256\":\"0x6b7920b04a73a0e1ff7404aa1a3b5fc738fc0b6154839480f666fd69b55123f0\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninGovernanceAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/CommonErrors.sol\\\";\\n\\ninterface IRoninGovernanceAdmin {\\n  /// @dev Emitted when an emergency exit poll is created.\\n  event EmergencyExitPollCreated(\\n    bytes32 voteHash, address validatorId, address recipientAfterUnlockedFund, uint256 requestedAt, uint256 expiredAt\\n  );\\n  /// @dev Emitted when an emergency exit poll is approved.\\n  event EmergencyExitPollApproved(bytes32 voteHash);\\n  /// @dev Emitted when an emergency exit poll is expired.\\n  event EmergencyExitPollExpired(bytes32 voteHash);\\n  /// @dev Emitted when an emergency exit poll is voted.\\n  event EmergencyExitPollVoted(bytes32 indexed voteHash, address indexed voter);\\n\\n  /**\\n   * @dev Create a vote to agree that an emergency exit is valid and should return the locked funds back.a\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   */\\n  function createEmergencyExitPoll(\\n    address validatorId,\\n    address recipientAfterUnlockedFund,\\n    uint256 requestedAt,\\n    uint256 expiredAt\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb1f35c582b5979d2898496403c095c47a546efe0481ed31ba6e727acf35b110e\",\"license\":\"MIT\"},\"contracts/interfaces/IRoninTrustedOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IQuorum.sol\\\";\\nimport \\\"../udvts/Types.sol\\\";\\n\\ninterface IRoninTrustedOrganization is IQuorum {\\n  /**\\n   * @dev Error indicating that a query for a duplicate entry was made.\\n   */\\n  error ErrQueryForDupplicated();\\n\\n  /**\\n   * @dev Error indicating that a query was made for a non-existent consensus address.\\n   */\\n  error ErrQueryForNonExistentConsensusAddress();\\n\\n  /**\\n   * @dev Error indicating that a governor address has already been added.\\n   * @param addr The address of the governor that is already added.\\n   */\\n  error ErrGovernorAddressIsAlreadyAdded(address addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is not added.\\n   * @param addr The address of the consensus contract that is not added.\\n   */\\n  error ErrConsensusAddressIsNotAdded(TConsensus addr);\\n\\n  /**\\n   * @dev Error indicating that a consensus address is already added.\\n   * @param addr The address of the consensus contract that is already added.\\n   */\\n  error ErrConsensusAddressIsAlreadyAdded(TConsensus addr);\\n\\n  struct TrustedOrganization {\\n    // Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n    TConsensus consensusAddr;\\n    // Address to voting proposal\\n    address governor;\\n    // Address to voting bridge operators\\n    address __deprecatedBridgeVoter;\\n    // Its Weight\\n    uint256 weight;\\n    // The block that the organization was added\\n    uint256 addedBlock;\\n  }\\n\\n  /// @dev Emitted when the trusted organization is added.\\n  event TrustedOrganizationsAdded(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is updated.\\n  event TrustedOrganizationsUpdated(TrustedOrganization[] orgs);\\n  /// @dev Emitted when the trusted organization is removed.\\n  event TrustedOrganizationsRemoved(TConsensus[] orgs);\\n  /// @dev Emitted when the consensus address of a trusted organization is changed.\\n  event ConsensusAddressOfTrustedOrgChanged(TrustedOrganization orgAfterChanged, TConsensus oldConsensus);\\n\\n  /**\\n   * @dev Adds a list of addresses into the trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   * - The field `addedBlock` should be blank.\\n   *\\n   * Emits the event `TrustedOrganizationAdded` once an organization is added.\\n   *\\n   */\\n  function addTrustedOrganizations(TrustedOrganization[] calldata) external;\\n\\n  /**\\n   * @dev Updates weights for a list of existent trusted organization.\\n   *\\n   * Requirements:\\n   * - The weights should larger than 0.\\n   * - The method caller is admin.\\n   *\\n   * Emits the `TrustedOrganizationUpdated` event.\\n   *\\n   */\\n  function updateTrustedOrganizations(TrustedOrganization[] calldata list) external;\\n\\n  /**\\n   * @dev Removes a list of addresses from the trusted organization.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `TrustedOrganizationRemoved` once an organization is removed.\\n   *\\n   * @param consensusAddrs The list of consensus addresses linked to corresponding trusted organization that to be removed.\\n   */\\n  function removeTrustedOrganizations(TConsensus[] calldata consensusAddrs) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   *\\n   * Emits the event `ConsensusAddressOfTrustedOrgChanged` once an organization is removed.\\n   */\\n  function execChangeConsensusAddressForTrustedOrg(TConsensus oldConsensusAddr, TConsensus newConsensusAddr) external;\\n\\n  /**\\n   * @dev Returns total weights.\\n   */\\n  function totalWeight() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeight(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a consensus.\\n   */\\n  function getConsensusWeightById(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weight of a governor.\\n   */\\n  function getGovernorWeight(address governor) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeights(TConsensus[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of consensus addresses.\\n   */\\n  function getConsensusWeightsById(address[] calldata cids) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the weights of a list of governor addresses.\\n   */\\n  function getGovernorWeights(address[] calldata list) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns total weights of the consensus list.\\n   */\\n  function sumConsensusWeight(TConsensus[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns total weights of the governor list.\\n   */\\n  function sumGovernorWeight(address[] calldata list) external view returns (uint256 _res);\\n\\n  /**\\n   * @dev Returns the trusted organization at `_index`.\\n   */\\n  function getTrustedOrganizationAt(uint256 index) external view returns (TrustedOrganization memory);\\n\\n  /**\\n   * @dev Returns the number of trusted organizations.\\n   */\\n  function countTrustedOrganization() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns all of the trusted organizations.\\n   */\\n  function getAllTrustedOrganizations() external view returns (TrustedOrganization[] memory);\\n\\n  /**\\n   * @dev Returns the trusted organization by consensus address.\\n   *\\n   * Reverts once the consensus address is non-existent.\\n   */\\n  function getTrustedOrganization(TConsensus consensusAddr) external view returns (TrustedOrganization memory);\\n}\\n\",\"keccak256\":\"0xd9dc4bcb05f8208ba64cc249e99c650aa0507342c3596c4b5f5522545c01e689\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStakingVesting {\\n  /**\\n   * @dev Error thrown when attempting to send a bonus that has already been sent.\\n   */\\n  error ErrBonusAlreadySent();\\n\\n  /// @dev Emitted when the block bonus for block producer is transferred.\\n  event BonusTransferred(\\n    uint256 indexed blockNumber, address indexed recipient, uint256 blockProducerAmount, uint256 bridgeOperatorAmount\\n  );\\n  /// @dev Emitted when the transfer of block bonus for block producer is failed.\\n  event BonusTransferFailed(\\n    uint256 indexed blockNumber,\\n    address indexed recipient,\\n    uint256 blockProducerAmount,\\n    uint256 bridgeOperatorAmount,\\n    uint256 contractBalance\\n  );\\n  /// @dev Emitted when the block bonus for block producer is updated\\n  event BlockProducerBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the block bonus for bridge operator is updated\\n  event BridgeOperatorBonusPerBlockUpdated(uint256);\\n  /// @dev Emitted when the percent of fast finality reward is updated\\n  event FastFinalityRewardPercentageUpdated(uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the block producer at `blockNum`.\\n   */\\n  function blockProducerBlockBonus(uint256 blockNum) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the bonus amount for the bridge validator at `blockNum`.\\n   */\\n  function bridgeOperatorBlockBonus(uint256 blockNum) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the percentage of fast finality reward.\\n   */\\n  function fastFinalityRewardPercentage() external view returns (uint256);\\n\\n  /**\\n   * @dev Receives RON from any address.\\n   */\\n  function receiveRON() external payable;\\n\\n  /**\\n   * @dev Returns the last block number that the staking vesting is sent.\\n   */\\n  function lastBlockSendingBonus() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfers the staking vesting for the block producer and the bridge operator whenever a new block is mined.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   * - The method must be called only once per block.\\n   *\\n   * Emits the event `BonusTransferred` or `BonusTransferFailed`.\\n   *\\n   * Notes:\\n   * - The method does not revert when the contract balance is insufficient to send bonus. This assure the submit reward method\\n   * will not be reverted, and the underlying nodes does not hang.\\n   *\\n   * @param forBlockProducer Indicates whether requesting the bonus for the block procucer, in case of being in jail or relevance.\\n   * @param forBridgeOperator Indicates whether requesting the bonus for the bridge operator.\\n   *\\n   * @return success Whether the transfer is successfully. This returns false mostly because this contract is out of balance.\\n   * @return blockProducerBonus The amount of bonus actually sent for the block producer, returns 0 when the transfer is failed.\\n   * @return bridgeOperatorBonus The amount of bonus actually sent for the bridge operator, returns 0 when the transfer is failed.\\n   * @return fastFinalityRewardPercentage The percent of fast finality reward, returns 0 when the transfer is failed.\\n   *\\n   */\\n  function requestBonus(\\n    bool forBlockProducer,\\n    bool forBridgeOperator\\n  )\\n    external\\n    returns (\\n      bool success,\\n      uint256 blockProducerBonus,\\n      uint256 bridgeOperatorBonus,\\n      uint256 fastFinalityRewardPercentage\\n    );\\n\\n  /**\\n   * @dev Sets the bonus amount per block for block producer.\\n   *\\n   * Emits the event `BlockProducerBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBlockProducerBonusPerBlock(uint256 amount) external;\\n\\n  /**\\n   * @dev Sets the bonus amount per block for bridge operator.\\n   *\\n   * Emits the event `BridgeOperatorBonusPerBlockUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setBridgeOperatorBonusPerBlock(uint256 _amount) external;\\n\\n  /**\\n   * @dev Sets the percent of fast finality reward.\\n   *\\n   * Emits the event `FastFinalityRewardPercentageUpdated`.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   */\\n  function setFastFinalityRewardPercentage(uint256 _percent) external;\\n}\\n\",\"keccak256\":\"0xaa10f1a77d697529d548fac81d89ae553c535e59c6258dfa22390c28ca702cdd\",\"license\":\"MIT\"},\"contracts/interfaces/collections/IHasContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\ninterface IHasContracts {\\n  /// @dev Error of invalid role.\\n  error ErrContractTypeNotFound(ContractType contractType);\\n\\n  /// @dev Emitted when a contract is updated.\\n  event ContractUpdated(ContractType indexed contractType, address indexed addr);\\n\\n  /**\\n   * @dev Returns the address of a contract with a specific role.\\n   * Throws an error if no contract is set for the specified role.\\n   *\\n   * @param contractType The role of the contract to retrieve.\\n   * @return contract_ The address of the contract with the specified role.\\n   */\\n  function getContract(ContractType contractType) external view returns (address payable contract_);\\n\\n  /**\\n   * @dev Sets the address of a contract with a specific role.\\n   * Emits the event {ContractUpdated}.\\n   * @param contractType The role of the contract to set.\\n   * @param addr The address of the contract to set.\\n   */\\n  function setContract(ContractType contractType, address addr) external;\\n}\\n\",\"keccak256\":\"0x3cb6bc67853229163685bbba63469fb2ef103bf1cbfec0fed3e9e4686049f45b\",\"license\":\"MIT\"},\"contracts/interfaces/consumers/PeriodWrapperConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PeriodWrapperConsumer {\\n  struct PeriodWrapper {\\n    // Inner value.\\n    uint256 inner;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0xb6777e3c364306eb8d5355583c1aca44de9d351cb40ddf1cea832206d4aad272\",\"license\":\"MIT\"},\"contracts/interfaces/random-beacon/IRandomBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { RandomRequest } from \\\"../../libraries/LibSLA.sol\\\";\\nimport { VRF } from \\\"@chainlink/contracts/src/v0.8/VRF.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRandomBeacon {\\n  /// @dev Throws if current period is less than the target activation period\\n  error ErrNotActivated(uint256 untilPeriod);\\n  /// @dev Throws if the cool down for key hash change is not ended\\n  error ErrKeyHashChangeCooldownNotEnded();\\n  /// @dev Throws if the cool down for registration is not ended\\n  error ErrRegisterCoolDownNotEnded();\\n  /// @dev Throws if the proof is invalid\\n  error ErrInvalidProof();\\n  /// @dev Throws if the request is not finalized\\n  error ErrBeaconNotFinalized(uint256 period);\\n  /// @dev Throws if the period is invalid (too early or too late)\\n  error ErrInvalidPeriod();\\n  /// @dev Throws if the request is already submitted\\n  error ErrAlreadySubmitted();\\n  /// @dev Throws if the request is already finalized\\n  error ErrBeaconAlreadyFinalized(uint256 period);\\n  /// @dev Throws if the random request is inexistent\\n  error ErrInvalidRandomRequest(bytes32 expected, bytes32 got);\\n  /// @dev Throws if the key hash is not match with the one in the profile\\n  error ErrInvalidKeyHash(bytes32 expected, bytes32 actual);\\n  /// @dev Throws if sum of all validator types threshold is not equal to max validator number\\n  error ErrInvalidThresholdConfig();\\n\\n  /**\\n   * @dev The validator type.\\n   */\\n  enum ValidatorType {\\n    Unknown,\\n    // Max Validator Number\\n    All,\\n    // Max Governing Validator Number\\n    Governing,\\n    // Max Standard Validator Number\\n    Standard,\\n    // Max Rotating Validator Number\\n    Rotating\\n  }\\n\\n  /**\\n   * @dev The beacon struct.\\n   */\\n  struct Beacon {\\n    // The request hash.\\n    bytes32 reqHash;\\n    // The random beacon value.\\n    uint256 value;\\n    // Whether the beacon is finalized.\\n    bool finalized;\\n    // The submission count.\\n    uint32 submissionCount;\\n    // Mapping of submitted requests.\\n    mapping(address cid => bool) submitted;\\n  }\\n\\n  /**\\n   * @dev Emitted when the validator threshold is updated.\\n   * @param validatorType The validator type.\\n   * @param threshold The new value.\\n   */\\n  event ValidatorThresholdUpdated(ValidatorType indexed validatorType, uint256 threshold);\\n\\n  /**\\n   * @dev Emitted when the unavailability slash threshold is updated.\\n   * @param value The new value.\\n   */\\n  event SlashUnavailabilityThresholdUpdated(uint256 value);\\n\\n  /**\\n   * @dev Emitted when the beacon is finalized.\\n   * @param period The period.\\n   * @param value The beacon value.\\n   */\\n  event BeaconFinalized(uint256 indexed period, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the random seed is fulfilled.\\n   * @param by The address that fulfill the random seed.\\n   * @param period The period.\\n   * @param reqHash The request hash.\\n   */\\n  event RandomSeedFulfilled(address indexed by, uint256 indexed period, bytes32 indexed reqHash);\\n\\n  /**\\n   * @dev Emitted when the random seed is requested.\\n   * @param period The period.\\n   * @param reqHash The request hash.\\n   * @param req The random request.\\n   */\\n  event RandomSeedRequested(uint256 indexed period, bytes32 indexed reqHash, RandomRequest req);\\n\\n  /**\\n   * @dev Request the random seed for the next period, at the first epoch of each period.\\n   *\\n   * Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\\n   */\\n  function execRequestRandomSeedForNextPeriod(uint256 lastPeriod, uint256 newPeriod) external;\\n\\n  /**\\n   * @dev Finalize the beacon and record the unavailability.\\n   *\\n   * Callback function of {RoninValidatorSet-wrapUpEpoch}, only called at the end of an period.\\n   */\\n  function execWrapUpBeaconPeriod(uint256 lastPeriod, uint256 newPeriod) external;\\n\\n  /**\\n   * @dev Bulk set the pick thresholds for a given validator types.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `PickThresholdUpdated`.\\n   *\\n   * @param validatorTypes An array of validator types.\\n   * @param thresholds An array of threshold values.\\n   */\\n  function bulkSetValidatorThresholds(ValidatorType[] calldata validatorTypes, uint256[] calldata thresholds) external;\\n\\n  /**\\n   * @dev Sets the unavailability slash threshold.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `SlashUnavailabilityThresholdUpdated`.\\n   *\\n   * @param slashThreshold The new value.\\n   */\\n  function setUnavailabilitySlashThreshold(uint256 slashThreshold) external;\\n\\n  /**\\n   * @dev Fulfills the random seed.\\n   *\\n   * Requirements:\\n   * - The request is not finalized.\\n   * - The period is greater than current period.\\n   * - The proof is valid.\\n   * - The request is not submitted by method caller before.\\n   * - The key hash is match with the one in the profile.\\n   * - The key hash changed cool down is ended.\\n   * - The method caller is governance validator.\\n   * - The method caller is not newly joined.\\n   *\\n   * Emits the event `RandomSeedFulfilled`.\\n   *\\n   * @param req The random request.\\n   * @param proof The VRF proof.\\n   */\\n  function fulfillRandomSeed(RandomRequest calldata req, VRF.Proof calldata proof) external;\\n\\n  /**\\n   * @dev Checks if a submission has been made by a specific oracle for a given period.\\n   * @param period The period to check for the submission.\\n   * @param consensus The consensus address of validator.\\n   * @return A boolean indicating whether the submission has been made or not.\\n   */\\n  function isSubmittedAt(uint256 period, TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Checks if a submission has been made by a specific oracle for a given period.\\n   * @param period The period to check for the submission.\\n   * @param cid The candidate id of validator.\\n   * @return A boolean indicating whether the submission has been made or not.\\n   */\\n  function isSubmittedAtById(uint256 period, address cid) external view returns (bool);\\n\\n  /**\\n   * @dev Get request hash for a given period.\\n   */\\n  function getRequestHash(uint256 period) external view returns (bytes32 reqHash);\\n\\n  /**\\n   * @dev Get last finalized period.\\n   */\\n  function getLastFinalizedPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability slash threshold.\\n   */\\n  function getUnavailabilitySlashThreshold() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the pick threshold for a given validator type.\\n   * @param validatorType The validator type.\\n   * @return The pick threshold.\\n   */\\n  function getValidatorThreshold(ValidatorType validatorType) external view returns (uint256);\\n\\n  /**\\n   * @dev Retrieves the beacon value for a given period.\\n   * @param period The period for which to retrieve the beacon value.\\n   * @return value The beacon value for the given period.\\n   * @return finalized A boolean indicating whether the beacon value has been finalized.\\n   */\\n  function getBeacon(uint256 period) external view returns (uint256 value, bool finalized);\\n\\n  /**\\n   * @dev Retrieves the unavailability count for a given candidate id.\\n   */\\n  function getUnavailabilityCount(address cid) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the period at which the random beacon sorting was activated.\\n   */\\n  function getActivatedAtPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Picks validator IDs for given epoch number.\\n   */\\n  function pickValidatorSet(uint256 epoch) external view returns (address[] memory pickedCids);\\n}\\n\",\"keccak256\":\"0x8abfe50b7454dde45dc98daeba3a14e06ac4f900c923be546e222af371da7b9a\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/IBaseSlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBaseSlash {\\n  enum SlashType {\\n    UNKNOWN,\\n    UNAVAILABILITY_TIER_1,\\n    UNAVAILABILITY_TIER_2,\\n    DOUBLE_SIGNING,\\n    BRIDGE_VOTING,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_1,\\n    BRIDGE_OPERATOR_MISSING_VOTE_TIER_2,\\n    UNAVAILABILITY_TIER_3,\\n    FAST_FINALITY,\\n    RANDOM_BEACON\\n  }\\n\\n  /// @dev Error thrown when evidence has already been submitted.\\n  error ErrEvidenceAlreadySubmitted();\\n\\n  /// @dev Error thrown when public key in evidence is not registered.\\n  error ErrUnregisteredPublicKey();\\n\\n  /// @dev Emitted when the validator is slashed.\\n  event Slashed(address indexed cid, SlashType slashType, uint256 period);\\n}\\n\",\"keccak256\":\"0x9ed2a219d6282772992662d28e4f9043f5e7b08dbdd8ae004be129e23c1189fe\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ICreditScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICreditScore {\\n  /**\\n   * @dev Error thrown when an invalid credit score configuration is provided.\\n   */\\n  error ErrInvalidCreditScoreConfig();\\n\\n  /**\\n   * @dev Error thrown when an invalid cut-off percentage configuration is provided.\\n   */\\n  error ErrInvalidCutOffPercentageConfig();\\n\\n  /**\\n   * @dev Error thrown when the caller's credit score is insufficient to bail out a situation.\\n   */\\n  error ErrInsufficientCreditScoreToBailOut();\\n\\n  /**\\n   * @dev Error thrown when a validator has previously bailed out.\\n   */\\n  error ErrValidatorHasBailedOutPreviously();\\n\\n  /**\\n   * @dev Error thrown when the caller must be jailed in the current period.\\n   */\\n  error ErrCallerMustBeJailedInTheCurrentPeriod();\\n\\n  /// @dev Emitted when the configs to credit score is updated. See the method `setCreditScoreConfigs` for param details.\\n  event CreditScoreConfigsUpdated(\\n    uint256 gainCreditScore, uint256 maxCreditScore, uint256 bailOutCostMultiplier, uint256 cutOffPercentageAfterBailout\\n  );\\n  /// @dev Emitted the credit score of validators is updated.\\n  event CreditScoresUpdated(address[] cids, uint256[] creditScores);\\n  /// @dev Emitted when a validator bailed out of jail.\\n  event BailedOut(address indexed cid, uint256 period, uint256 usedCreditScore);\\n\\n  /**\\n   * @dev Updates the credit score for the validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execUpdateCreditScores(address[] calldata validatorIds, uint256 period) external;\\n\\n  /**\\n   * @dev Resets the credit score for the revoked validators.\\n   *\\n   * Requirements:\\n   * - Only validator contract can call this method.\\n   * - This method is only called at the end of each period.\\n   *\\n   * Emits the event `CreditScoresUpdated`.\\n   *\\n   */\\n  function execResetCreditScores(address[] calldata validatorIds) external;\\n\\n  /**\\n   * @dev A slashed validator use this method to get out of jail.\\n   *\\n   * Requirements:\\n   * - The `_consensusAddr` must be a validator.\\n   * - Only validator's admin can call this method.\\n   *\\n   * Emits the event `BailedOut`.\\n   *\\n   */\\n  function bailOut(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Sets the configs to credit score.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CreditScoreConfigsUpdated`.\\n   *\\n   * @param _gainScore The score to gain per period.\\n   * @param _maxScore The max number of credit score that a validator can hold.\\n   * @param _bailOutMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @param _cutOffPercentage The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function setCreditScoreConfigs(\\n    uint256 _gainScore,\\n    uint256 _maxScore,\\n    uint256 _bailOutMultiplier,\\n    uint256 _cutOffPercentage\\n  ) external;\\n\\n  /**\\n   * @dev Returns the configs related to credit score.\\n   *\\n   * @return _gainCreditScore The score to gain per period.\\n   * @return _maxCreditScore The max number of credit score that a validator can hold.\\n   * @return _bailOutCostMultiplier The number that will be multiplied with the remaining jailed time to get the cost of bailing out.\\n   * @return _cutOffPercentageAfterBailout The percentage of reward that the block producer will be cut off from until the end of the period after bailing out.\\n   *\\n   */\\n  function getCreditScoreConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _gainCreditScore,\\n      uint256 _maxCreditScore,\\n      uint256 _bailOutCostMultiplier,\\n      uint256 _cutOffPercentageAfterBailout\\n    );\\n\\n  /**\\n   * @dev Returns the current credit score of the validator.\\n   */\\n  function getCreditScore(TConsensus consensus) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current credit score of a list of validators.\\n   */\\n  function getManyCreditScores(TConsensus[] calldata consensusAddrs)\\n    external\\n    view\\n    returns (uint256[] memory _resultList);\\n\\n  /**\\n   * @dev Returns the whether the `consensus` has been bailed out at the `period`.\\n   */\\n  function checkBailedOutAtPeriod(TConsensus consensus, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x169144782436806217f74b40dc72abdadc9d55f7bf5ce3331e303c4b59dbde1b\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashDoubleSign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashDoubleSign is IBaseSlash {\\n  /**\\n   * @dev Emitted when the configs to slash double sign is updated. See the method `getDoubleSignSlashingConfigs`\\n   * for param details.\\n   */\\n  event DoubleSignSlashingConfigsUpdated(\\n    uint256 slashDoubleSignAmount, uint256 doubleSigningJailUntilBlock, uint256 doubleSigningOffsetLimitBlock\\n  );\\n\\n  /**\\n   * @dev Slashes for double signing.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` if the double signing evidence of the two headers valid.\\n   */\\n  function slashDoubleSign(TConsensus _validatorAddr, bytes calldata _header1, bytes calldata _header2) external;\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return _slashDoubleSignAmount The amount of RON to slash double sign.\\n   * @return _doubleSigningJailUntilBlock The block number that the punished validator will be jailed until, due to\\n   * double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function getDoubleSignSlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 _slashDoubleSignAmount,\\n      uint256 _doubleSigningJailUntilBlock,\\n      uint256 _doubleSigningOffsetLimitBlock\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `DoubleSignSlashingConfigsUpdated`.\\n   *\\n   * @param _slashAmount The amount of RON to slash double sign.\\n   * @param _jailUntilBlock The block number that the punished validator will be jailed until, due to double signing.\\n   * @param _doubleSigningOffsetLimitBlock The number of block that the current block is at most far from the double\\n   * signing block.\\n   *\\n   */\\n  function setDoubleSignSlashingConfigs(\\n    uint256 _slashAmount,\\n    uint256 _jailUntilBlock,\\n    uint256 _doubleSigningOffsetLimitBlock\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1c083f88ecfaa5e476bbc3501fea7b6ea8d8687d1103651c54e4e04de5cfd1e1\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashIndicator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashDoubleSign.sol\\\";\\nimport \\\"./ISlashUnavailability.sol\\\";\\nimport \\\"./ICreditScore.sol\\\";\\n\\ninterface ISlashIndicator is ISlashDoubleSign, ISlashUnavailability, ICreditScore { }\\n\",\"keccak256\":\"0x5fb033140845400bd071a7d306436a1861058d431f4c4a65e25b5638d34ea103\",\"license\":\"MIT\"},\"contracts/interfaces/slash-indicator/ISlashUnavailability.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseSlash.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ISlashUnavailability is IBaseSlash {\\n  /**\\n   * @dev Error thrown when attempting to slash a validator twice or slash more than one validator in one block.\\n   */\\n  error ErrCannotSlashAValidatorTwiceOrSlashMoreThanOneValidatorInOneBlock();\\n\\n  /**\\n   * @dev Emitted when the configs to slash bridge operator is updated. See the method `getUnavailabilitySlashingConfigs`\\n   * for param details.\\n   */\\n  event UnavailabilitySlashingConfigsUpdated(\\n    uint256 unavailabilityTier1Threshold,\\n    uint256 unavailabilityTier2Threshold,\\n    uint256 slashAmountForUnavailabilityTier2Threshold,\\n    uint256 jailDurationForUnavailabilityTier2Threshold\\n  );\\n\\n  /**\\n   * @dev Returns the last block that a block producer is slashed for unavailability.\\n   */\\n  function lastUnavailabilitySlashedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Slashes for unavailability by increasing the counter of block producer `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `Slashed` when the threshold is reached.\\n   *\\n   */\\n  function slashUnavailability(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Returns the current unavailability indicator of a block producer.\\n   */\\n  function currentUnavailabilityIndicator(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the unavailability indicator in the period `period` of a block producer.\\n   */\\n  function getUnavailabilityIndicator(TConsensus consensusAddr, uint256 period) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configs related to block producer slashing.\\n   *\\n   * @return unavailabilityTier1Threshold The mining reward will be deprecated, if (s)he missed more than this\\n   * threshold. This threshold is applied for tier-1 and tier-3 slash.\\n   * @return unavailabilityTier2Threshold  The mining reward will be deprecated, (s)he will be put in jailed, and will\\n   * be deducted self-staking if (s)he misses more than this threshold. This threshold is applied for tier-2 slash.\\n   * @return slashAmountForUnavailabilityTier2Threshold The amount of RON to deduct from self-staking of a block\\n   * producer when (s)he is slashed with tier-2 or tier-3.\\n   * @return jailDurationForUnavailabilityTier2Threshold The number of blocks to jail a block producer when (s)he is\\n   * slashed with tier-2 or tier-3.\\n   *\\n   */\\n  function getUnavailabilitySlashingConfigs()\\n    external\\n    view\\n    returns (\\n      uint256 unavailabilityTier1Threshold,\\n      uint256 unavailabilityTier2Threshold,\\n      uint256 slashAmountForUnavailabilityTier2Threshold,\\n      uint256 jailDurationForUnavailabilityTier2Threshold\\n    );\\n\\n  /**\\n   * @dev Sets the configs to slash block producers.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `BridgeOperatorSlashingConfigsUpdated`.\\n   *\\n   * @param tier1Threshold The mining reward will be deprecated, if (s)he missed more than this threshold.\\n   * @param tier2Threshold The mining reward will be deprecated, (s)he will be put in jailed, and will be deducted\\n   * self-staking if (s)he misses more than this threshold.\\n   * @param slashAmountForTier2Threshold The amount of RON to deduct from self-staking of a block producer when (s)he\\n   * is slashed tier-2.\\n   * @param jailDurationForTier2Threshold The number of blocks to jail a block producer when (s)he is slashed tier-2.\\n   *\\n   */\\n  function setUnavailabilitySlashingConfigs(\\n    uint256 tier1Threshold,\\n    uint256 tier2Threshold,\\n    uint256 slashAmountForTier2Threshold,\\n    uint256 jailDurationForTier2Threshold\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1a30a9edd2eb5593e1da65210dcd712173b9702d6814f4fb31f800efb5f2098b\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IBaseStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IBaseStaking {\\n  struct PoolDetail {\\n    /**\\n     * @dev Address of the pool.\\n     * @custom non-volatile-storage Permanently set to the first consensus address of the candidate.\\n     */\\n    address pid;\\n    /**\\n     * @dev The address of the pool admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with the admin in `Profile-CandidateProfile`.\\n     */\\n    address __shadowedPoolAdmin;\\n    /// @dev Self-staking amount\\n    uint256 stakingAmount;\\n    /// @dev Total number of RON staking for the pool\\n    uint256 stakingTotal;\\n    /// @dev Mapping from delegator => delegating amount\\n    mapping(address => uint256) delegatingAmount;\\n    /// @dev Mapping from delegator => the last timestamp that delegator staked\\n    mapping(address => uint256) lastDelegatingTimestamp;\\n    /// @dev Mapping that indicate an admin was either current or previous admin of this pool\\n    mapping(address => bool) wasAdmin;\\n  }\\n\\n  /// @dev Emitted when the minium number of seconds to undelegate is updated.\\n  event CooldownSecsToUndelegateUpdated(uint256 minSecs);\\n  /// @dev Emitted when the number of seconds that a candidate must wait to be revoked.\\n  event WaitingSecsToRevokeUpdated(uint256 secs);\\n\\n  /// @dev Error of cannot transfer RON.\\n  error ErrCannotTransferRON();\\n  /// @dev Error of receiving zero message value.\\n  error ErrZeroValue();\\n  /// @dev Error of pool admin is not allowed to call.\\n  error ErrPoolAdminForbidden();\\n  /// @dev Error of no one is allowed to call but the pool's admin.\\n  error ErrOnlyPoolAdminAllowed();\\n  /// @dev Error of admin of any active pool cannot delegate.\\n  error ErrAdminOfAnyActivePoolForbidden(address admin);\\n  /// @dev Error of querying inactive pool.\\n  error ErrInactivePool(TConsensus consensusAddr, address poolId);\\n  /// @dev Error of length of input arrays are not of the same.\\n  error ErrInvalidArrays();\\n\\n  /**\\n   * @dev Returns whether the `admin` is currently active.\\n   */\\n  function isAdminOfActivePool(address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the consensus address corresponding to the pool admin.\\n   */\\n  function getPoolAddressOf(address admin) external view returns (address);\\n\\n  /**\\n   * @dev Returns the staking pool details.\\n   */\\n  function getPoolDetail(TConsensus consensusAddr)\\n    external\\n    view\\n    returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  function getPoolDetailById(address poolId)\\n    external\\n    view\\n    returns (address admin, uint256 stakingAmount, uint256 stakingTotal);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakings(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the self-staking amounts of the pools.\\n   */\\n  function getManySelfStakingsById(address[] calldata poolIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns The cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   */\\n  function cooldownSecsToUndelegate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of seconds that a candidate must wait for the renounce request gets affected.\\n   */\\n  function waitingSecsToRevoke() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the cooldown time in seconds to undelegate from the last timestamp (s)he delegated.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `CooldownSecsToUndelegateUpdated`.\\n   *\\n   */\\n  function setCooldownSecsToUndelegate(uint256 cooldownSecs) external;\\n\\n  /**\\n   * @dev Sets the number of seconds that a candidate must wait to be revoked.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `WaitingSecsToRevokeUpdated`.\\n   *\\n   */\\n  function setWaitingSecsToRevoke(uint256 secs) external;\\n}\\n\",\"keccak256\":\"0xbba4f2ff63a9b87252fe87df9bd9b1accbf53c6a77e5e2d21e5732a3546af31a\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ICandidateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface ICandidateStaking is IRewardPool {\\n  /// @dev Emitted when the minimum staking amount for being a validator is updated.\\n  event MinValidatorStakingAmountUpdated(uint256 threshold);\\n  /// @dev Emitted when the commission rate range is updated.\\n  event CommissionRateRangeUpdated(uint256 minRate, uint256 maxRate);\\n\\n  /// @dev Emitted when the pool admin staked for themself.\\n  event Staked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the pool admin unstaked the amount of RON from themself.\\n  event Unstaked(address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the holder of the staking amount in the `poolId` is changed.\\n  event StakeholderChanged(address indexed poolId, address oldAdmin, address newAdmin, uint256 amount);\\n\\n  /// @dev Emitted when the validator pool is approved.\\n  event PoolApproved(address indexed poolId, address indexed admin);\\n  /// @dev Emitted when the validator pool is deprecated.\\n  event PoolsDeprecated(address[] poolIds);\\n  /// @dev Emitted when the staking amount transfer failed.\\n  event StakingAmountTransferFailed(\\n    address indexed poolId, address indexed admin, uint256 amount, uint256 contractBalance\\n  );\\n  /// @dev Emitted when the staking amount deducted failed, e.g. when the validator gets slashed.\\n  event StakingAmountDeductFailed(\\n    address indexed poolId, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Error of three interaction addresses must be of the same in applying for validator candidate.\\n  error ErrThreeInteractionAddrsNotEqual();\\n  /// @dev Error of unstaking zero amount.\\n  error ErrUnstakeZeroAmount();\\n  /// @dev Error of invalid staking amount left after deducted.\\n  error ErrStakingAmountLeft();\\n  /// @dev Error of insufficient staking amount for unstaking.\\n  error ErrInsufficientStakingAmount();\\n  /// @dev Error of unstaking too early.\\n  error ErrUnstakeTooEarly();\\n  /// @dev Error of setting commission rate exceeds max allowed.\\n  error ErrInvalidCommissionRate();\\n\\n  /**\\n   * @dev Returns the minimum threshold for being a validator candidate.\\n   */\\n  function minValidatorStakingAmount() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the commission rate range that the candidate can set.\\n   */\\n  function getCommissionRateRange() external view returns (uint256 minRange, uint256 maxRange);\\n\\n  /**\\n   * @dev Sets the minimum threshold for being a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinValidatorStakingAmountUpdated` event.\\n   *\\n   */\\n  function setMinValidatorStakingAmount(uint256) external;\\n\\n  /**\\n   * @dev Sets the commission rate range that a candidate can set.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `CommissionRateRangeUpdated` event.\\n   *\\n   */\\n  function setCommissionRateRange(uint256 minRate, uint256 maxRate) external;\\n\\n  /**\\n   * @dev Proposes a candidate to become a validator.\\n   *\\n   * Requirements:\\n   * - The method caller is able to receive RON.\\n   * - The treasury is able to receive RON.\\n   * - The amount is larger than or equal to the minimum validator staking amount `minValidatorStakingAmount()`.\\n   *\\n   * Emits the event `PoolApproved`.\\n   *\\n   * @param candidateAdmin the candidate admin will be stored in the validator contract, used for calling function that affects\\n   * to its candidate, e.g. scheduling maintenance.\\n   *\\n   */\\n  function applyValidatorCandidate(\\n    address candidateAdmin,\\n    TConsensus consensusAddr,\\n    address payable treasuryAddr,\\n    uint256 commissionRate,\\n    bytes calldata pubkey,\\n    bytes calldata proofOfPossession\\n  ) external payable;\\n\\n  /**\\n   * @dev Deprecates the pool.\\n   * - Deduct self-staking amount of the pool admin to zero.\\n   * - Transfer the deducted amount to the pool admin.\\n   * - Deactivate the pool admin address in the mapping of active pool admins\\n   *\\n   * Requirements:\\n   * - The method caller is validator contract.\\n   *\\n   * Emits the event `PoolsDeprecated` and `Unstaked` events.\\n   * Emits the event `StakingAmountTransferFailed` if the contract cannot transfer RON back to the pool admin.\\n   *\\n   */\\n  function execDeprecatePools(address[] calldata pools, uint256 period) external;\\n\\n  /**\\n   * @dev Self-delegates to the validator candidate `consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `msg.value` is larger than 0.\\n   *\\n   * Emits the event `Staked`.\\n   *\\n   */\\n  function stake(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from the validator candidate `consensusAddr` for `amount`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function unstake(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Pool admin requests update validator commission rate. The request will be forwarded to the candidate manager\\n   * contract, and the value is getting updated in {ICandidateManager-execRequestUpdateCommissionRate}.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   * - The `_effectiveDaysOnwards` must be equal to or larger than the {CandidateManager-_minEffectiveDaysOnwards}.\\n   * - The `_rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdated`.\\n   *\\n   */\\n  function requestUpdateCommissionRate(\\n    TConsensus consensusAddr,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestRenounce(TConsensus consensusAddr) external;\\n\\n  /**\\n   * @dev Renounces being a validator candidate and takes back the delegating/staking amount.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is the pool admin.\\n   *\\n   */\\n  function requestEmergencyExit(TConsensus consensusAddr) external;\\n}\\n\",\"keccak256\":\"0x6a433da73540468aec8f28ce1fd0502669c0a75073ee7586e206ca62690682d5\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IDelegatorStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IRewardPool.sol\\\";\\n\\ninterface IDelegatorStaking is IRewardPool {\\n  /// @dev Emitted when the delegator staked for a validator candidate.\\n  event Delegated(address indexed delegator, address indexed poolId, uint256 amount);\\n  /// @dev Emitted when the delegator unstaked from a validator candidate.\\n  event Undelegated(address indexed delegator, address indexed poolId, uint256 amount);\\n\\n  /// @dev Error of undelegating zero amount.\\n  error ErrUndelegateZeroAmount();\\n  /// @dev Error of undelegating insufficient amount.\\n  error ErrInsufficientDelegatingAmount();\\n  /// @dev Error of undelegating too early.\\n  error ErrUndelegateTooEarly();\\n\\n  /**\\n   * @dev Stakes for a validator candidate `_consensusAddr`.\\n   *\\n   * Requirements:\\n   * - The consensus address is a validator candidate.\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Delegated` event.\\n   *\\n   */\\n  function delegate(TConsensus consensusAddr) external payable;\\n\\n  /**\\n   * @dev Unstakes from a validator candidate `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the `Undelegated` event.\\n   *\\n   */\\n  function undelegate(TConsensus consensusAddr, uint256 amount) external;\\n\\n  /**\\n   * @dev Bulk unstakes from a list of candidates.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   *\\n   * Emits the events `Undelegated`.\\n   *\\n   */\\n  function bulkUndelegate(TConsensus[] calldata consensusAddrs, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Unstakes an amount of RON from the `_consensusAddrSrc` and stake for `_consensusAddrDst`.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `Undelegated` event and the `Delegated` event.\\n   *\\n   */\\n  function redelegate(TConsensus consensusAddrSrc, TConsensus consensusAddrDst, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewards(address user, TConsensus[] calldata consensusAddrList)\\n    external\\n    view\\n    returns (uint256[] memory rewards);\\n\\n  /**\\n   * @dev Returns the claimable reward of the user `_user`.\\n   */\\n  function getRewardsById(address user, address[] calldata poolIds) external view returns (uint256[] memory rewards);\\n\\n  /**\\n   * @dev Claims the reward of method caller.\\n   *\\n   * Emits the `RewardClaimed` event.\\n   *\\n   */\\n  function claimRewards(TConsensus[] calldata consensusAddrList) external returns (uint256 amount);\\n\\n  /**\\n   * @dev Claims the rewards and delegates them to the consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is not the pool admin.\\n   * - The consensus address `_consensusAddrDst` is a validator candidate.\\n   *\\n   * Emits the `RewardClaimed` event and the `Delegated` event.\\n   *\\n   */\\n  function delegateRewards(TConsensus[] calldata consensusAddrList, TConsensus consensusAddrDst)\\n    external\\n    returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xfed2056943651d53c92542405cb1298744b8061a836b026f0cd5741163731994\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../interfaces/consumers/PeriodWrapperConsumer.sol\\\";\\n\\nimport { TPoolId, TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IRewardPool is PeriodWrapperConsumer {\\n  struct UserRewardFields {\\n    // Recorded reward amount.\\n    uint256 debited;\\n    // The last accumulated of the amount rewards per share (one unit staking) that the info updated.\\n    uint256 aRps;\\n    // Lowest staking amount in the period.\\n    uint256 lowestAmount;\\n    // Last period number that the info updated.\\n    uint256 lastPeriod;\\n  }\\n\\n  struct PoolFields {\\n    // Accumulated of the amount rewards per share (one unit staking).\\n    uint256 aRps;\\n    // The staking total to share reward of the current period.\\n    PeriodWrapper shares;\\n  }\\n\\n  /// @dev Emitted when the fields to calculate pending reward for the user is updated.\\n  event UserRewardUpdated(address indexed poolId, address indexed user, uint256 debited);\\n  /// @dev Emitted when the user claimed their reward\\n  event RewardClaimed(address indexed poolId, address indexed user, uint256 amount);\\n\\n  /// @dev Emitted when the pool shares are updated\\n  event PoolSharesUpdated(uint256 indexed period, address indexed poolId, uint256 shares);\\n  /// @dev Emitted when the pools are updated\\n  event PoolsUpdated(uint256 indexed period, address[] poolIds, uint256[] aRps, uint256[] shares);\\n  /// @dev Emitted when the contract fails when updating the pools\\n  event PoolsUpdateFailed(uint256 indexed period, address[] poolIds, uint256[] rewards);\\n  /// @dev Emitted when the contract fails when updating the pools that already set\\n  event PoolsUpdateConflicted(uint256 indexed period, address[] poolIds);\\n\\n  /// @dev Error of invalid pool share.\\n  error ErrInvalidPoolShare();\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getReward(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the reward amount that user claimable.\\n   */\\n  function getRewardById(address poolId, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amount of an user.\\n   */\\n  function getStakingAmount(TConsensus consensusAddr, address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the staking amounts of the users.\\n   */\\n  function getManyStakingAmounts(TConsensus[] calldata consensusAddrs, address[] calldata userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  function getManyStakingAmountsById(address[] calldata poolIds, address[] calldata userList)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amount of all users for a pool.\\n   */\\n  function getStakingTotal(TConsensus consensusAddr) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools corresponding to `consensusAddrs`.\\n   */\\n  function getManyStakingTotals(TConsensus[] calldata consensusAddrs) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the total staking amounts of all users for the pools `poolIds`.\\n   */\\n  function getManyStakingTotalsById(address[] calldata poolIds)\\n    external\\n    view\\n    returns (uint256[] memory stakingAmounts_);\\n}\\n\",\"keccak256\":\"0x9e73105ae89a9e8aacd82337a99188f1f642ec93de7a25a487610e40982b63e8\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IBaseStaking.sol\\\";\\nimport \\\"./IStakingCallback.sol\\\";\\nimport \\\"./ICandidateStaking.sol\\\";\\nimport \\\"./IDelegatorStaking.sol\\\";\\n\\ninterface IStaking is IRewardPool, IBaseStaking, ICandidateStaking, IDelegatorStaking, IStakingCallback {\\n  /// @dev Event emitted when the `wasAdmin` is finished to migrate.\\n  event MigrateWasAdminFinished();\\n  /// @dev Event emitted when the `migrateWasAdmin` method is disabled.\\n  event MigrateWasAdminDisabled();\\n\\n  /// @dev Error indicating that the REP-4 migration is already done.\\n  error ErrMigrateWasAdminAlreadyDone();\\n\\n  /**\\n   * @dev Records the amount of rewards `_rewards` for the pools `_consensusAddrs`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `PoolsUpdated` once the contract recorded the rewards successfully.\\n   * Emits the event `PoolsUpdateFailed` once the input array lengths are not equal.\\n   * Emits the event `PoolsUpdateConflicted` when there are some pools which already updated in the period.\\n   *\\n   * Note: This method should be called once at the period ending.\\n   *\\n   */\\n  function execRecordRewards(address[] calldata poolIds, uint256[] calldata rewards, uint256 period) external payable;\\n\\n  /**\\n   * @dev Deducts from staking amount of the validator `_consensusAddr` for `_amount`.\\n   *\\n   * Requirements:\\n   * - The method caller must be validator contract.\\n   *\\n   * Emits the event `Unstaked`.\\n   *\\n   */\\n  function execDeductStakingAmount(address poolId, uint256 amount) external returns (uint256 actualDeductingAmount);\\n}\\n\",\"keccak256\":\"0x8b90ba90f5c913545a6f5007d2b20b2baa4b6e6c11f09bd3a25ec8e6c597fb36\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IStakingCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface IStakingCallback {\\n  /**\\n   * @dev Requirements:\\n   * - Only Profile contract can call this method.\\n   */\\n  function execChangeAdminAddr(address poolId, address currAdminAddr, address newAdminAddr) external;\\n}\\n\",\"keccak256\":\"0xdb7d155f96ebe309848561f86dbdbb3acc4d58b12b9dc89a54a757268104ee03\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManager {\\n  struct ValidatorCandidate {\\n    /**\\n     * @dev The address of the candidate admin.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.admin.\\n     */\\n    address __shadowedAdmin;\\n    /**\\n     * @dev Address of the validator that produces block, e.g. block.coinbase. This is so-called validator address.\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.consensus.\\n     */\\n    TConsensus __shadowedConsensus;\\n    /**\\n     * @dev Address that receives mining reward of the validator\\n     * @custom shadowed-storage This storage slot is always kept in sync with {Profile-CandidateProfile}.treasury.\\n     */\\n    address payable __shadowedTreasury;\\n    /// @dev Address of the bridge operator corresponding to the candidate\\n    address ____deprecatedBridgeOperatorAddr;\\n    /**\\n     * @dev The percentage of reward that validators can be received, the rest goes to the delegators.\\n     * Values in range [0; 100_00] stands for 0-100%\\n     */\\n    uint256 commissionRate;\\n    /// @dev The timestamp that scheduled to revoke the candidate (no schedule=0)\\n    uint256 revokingTimestamp;\\n    /// @dev The deadline that the candidate must top up staking amount to keep it larger than or equal to the threshold (no deadline=0)\\n    uint256 topupDeadline;\\n  }\\n\\n  struct CommissionSchedule {\\n    /// @dev The timestamp that the commission schedule gets affected (no schedule=0).\\n    uint256 effectiveTimestamp;\\n    /// @dev The new commission rate. Value is in range [0; 100_00], stands for 0-100%\\n    uint256 commissionRate;\\n  }\\n\\n  /// @dev Emitted when the maximum number of validator candidates is updated.\\n  event MaxValidatorCandidateUpdated(uint256 threshold);\\n  /// @dev Emitted when the min offset to the effective date of commission rate change is updated.\\n  event MinEffectiveDaysOnwardsUpdated(uint256 numOfDays);\\n  /// @dev Emitted when the validator candidate is granted.\\n  event CandidateGranted(address indexed cid, address indexed treasuryAddr, address indexed admin);\\n  /// @dev Emitted when the revoking timestamp of a candidate is updated.\\n  event CandidateRevokingTimestampUpdated(address indexed cid, uint256 revokingTimestamp);\\n  /// @dev Emitted when the topup deadline of a candidate is updated.\\n  event CandidateTopupDeadlineUpdated(address indexed cid, uint256 topupDeadline);\\n  /// @dev Emitted when the validator candidate is revoked.\\n  event CandidatesRevoked(address[] cids);\\n\\n  /// @dev Emitted when the commission rate of a validator is updated.\\n  event CommissionRateUpdated(address indexed cid, uint256 rate);\\n  /// @dev Error of exceeding maximum number of candidates.\\n\\n  error ErrExceedsMaxNumberOfCandidate();\\n  /// @dev Error of querying for already existent candidate.\\n  error ErrExistentCandidate();\\n  /// @dev Error of querying for non-existent candidate.\\n  error ErrNonExistentCandidate();\\n  /// @dev Error of candidate admin already exists.\\n  error ErrExistentCandidateAdmin(address candidateAdminAddr);\\n  /// @dev Error of treasury already exists.\\n  error ErrExistentTreasury(address treasuryAddr);\\n  /// @dev Error of invalid commission rate.\\n  error ErrInvalidCommissionRate();\\n  /// @dev Error of invalid min effective days onwards.\\n  error ErrInvalidMinEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Returns the maximum number of validator candidate.\\n   */\\n  function maxValidatorCandidate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the minimum number of days to the effective date of commission rate change.\\n   */\\n  function minEffectiveDaysOnward() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function setMaxValidatorCandidate(uint256) external;\\n\\n  /**\\n   * @dev Sets the minimum number of days to the effective date of commision rate change.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external;\\n\\n  /**\\n   * @dev Returns whether the address is a validator (candidate).\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list validator candidates.\\n   */\\n  function getValidatorCandidates() external view returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev Returns the list of validator candidate ids.\\n   */\\n  function getValidatorCandidateIds() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns all candidate info.\\n   */\\n  function getCandidateInfos() external view returns (ValidatorCandidate[] memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns the info of a candidate.\\n   */\\n  function getCandidateInfoById(address cid) external view returns (ValidatorCandidate memory);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdmin(TConsensus consensus, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the address is the candidate admin.\\n   */\\n  function isCandidateAdminById(address id, address admin) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the schedule of changing commission rate of a candidate address.\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view returns (CommissionSchedule memory);\\n}\\n\",\"keccak256\":\"0x995ebd44ad76f770f204e41833c3abe80da9b9a7d2465bb02a78a5d52ad4098d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\n\\ninterface ICandidateManagerCallback {\\n  /// @dev Emitted when a schedule for updating commission rate is set.\\n  event CommissionRateUpdateScheduled(address indexed cid, uint256 effectiveTimestamp, uint256 rate);\\n  /// @dev Error of already requested revoking candidate before.\\n\\n  error ErrAlreadyRequestedRevokingCandidate();\\n  /// @dev Error of commission change schedule exists.\\n  error ErrAlreadyRequestedUpdatingCommissionRate();\\n  /// @dev Error of trusted org cannot renounce.\\n  error ErrTrustedOrgCannotRenounce();\\n  /// @dev Error of invalid effective days onwards.\\n  error ErrInvalidEffectiveDaysOnwards();\\n\\n  /**\\n   * @dev Grants a validator candidate.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateGranted`.\\n   *\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external;\\n\\n  /**\\n   * @dev Requests to revoke a validator candidate in next `secsLeft` seconds.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   * Emits the event `CandidateRevokingTimestampUpdated`.\\n   *\\n   */\\n  function execRequestRenounceCandidate(address cid, uint256 secsLeft) external;\\n\\n  /**\\n   * @dev Fallback function of `CandidateStaking-requestUpdateCommissionRate`.\\n   *\\n   * Requirements:\\n   * - The method caller is the staking contract.\\n   * - The `effectiveTimestamp` must be the beginning of a UTC day, and at least from 7 days onwards\\n   * - The `rate` must be in range of [0_00; 100_00].\\n   *\\n   * Emits the event `CommissionRateUpdateScheduled`.\\n   *\\n   */\\n  function execRequestUpdateCommissionRate(address cid, uint256 effectiveTimestamp, uint256 rate) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeAdminAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedAdmin\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeAdminAddr(address cid, address newAdmin) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeConsensusAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedConsensus\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeConsensusAddr(address cid, TConsensus newConsensus) external;\\n\\n  /**\\n   * @dev Fallback function of `Profile-changeTreasuryAddr`.\\n   * This updates the shadow storage slot of \\\"shadowedTreasury\\\" for candidate id `id` to `newAdmin`.\\n   *\\n   * Requirements:\\n   * - The caller must be the Profile contract.\\n   */\\n  function execChangeTreasuryAddr(address cid, address payable newTreasury) external;\\n}\\n\",\"keccak256\":\"0xeb30738d0fdf8b2fc08241326bffa251128a13cb61d1878f864d062d80c10389\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ICoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ISlashingExecution.sol\\\";\\n\\ninterface ICoinbaseExecution is ISlashingExecution {\\n  enum BlockRewardDeprecatedType {\\n    UNKNOWN,\\n    UNAVAILABILITY,\\n    AFTER_BAILOUT\\n  }\\n\\n  /// @dev Emitted when the validator set is updated\\n  event ValidatorSetUpdated(uint256 indexed period, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated, to mirror the in-jail and maintaining status of the validator.\\n  event BlockProducerSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] cids);\\n  /// @dev Emitted when the bridge operator set is updated.\\n  event BridgeOperatorSetUpdated(uint256 indexed period, uint256 indexed epoch, address[] bridgeOperators);\\n\\n  /// @dev Emitted when the reward of the block producer is deprecated.\\n  event BlockRewardDeprecated(address indexed cid, uint256 rewardAmount, BlockRewardDeprecatedType deprecatedType);\\n  /// @dev Emitted when the block reward is submitted.\\n  event BlockRewardSubmitted(address indexed cid, uint256 submittedAmount, uint256 bonusAmount);\\n\\n  /// @dev Emitted when the block producer reward is distributed.\\n  event MiningRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the block producer reward.\\n  event MiningRewardDistributionFailed(\\n    address indexed cid, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the bridge operator reward is distributed.\\n  event BridgeOperatorRewardDistributed(\\n    address indexed cid, address indexed bridgeOperator, address indexed recipientAddr, uint256 amount\\n  );\\n  /// @dev Emitted when the contract fails when distributing the bridge operator reward.\\n  event BridgeOperatorRewardDistributionFailed(\\n    address indexed cid,\\n    address indexed bridgeOperator,\\n    address indexed recipient,\\n    uint256 amount,\\n    uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the fast finality reward is distributed.\\n  event FastFinalityRewardDistributed(address indexed cid, address indexed recipient, uint256 amount);\\n  /// @dev Emitted when the contract fails when distributing the fast finality reward.\\n  event FastFinalityRewardDistributionFailed(\\n    address indexed cid, address indexed recipient, uint256 amount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the amount of RON reward is distributed to staking contract.\\n  event StakingRewardDistributed(uint256 totalAmount, address[] cids, uint256[] amounts);\\n  /// @dev Emitted when the contracts fails when distributing the amount of RON to the staking contract.\\n  event StakingRewardDistributionFailed(\\n    uint256 totalAmount, address[] cids, uint256[] amounts, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the epoch is wrapped up.\\n  event WrappedUpEpoch(uint256 indexed periodNumber, uint256 indexed epochNumber, bool periodEnding);\\n\\n  /// @dev Error of only allowed at the end of epoch\\n  error ErrAtEndOfEpochOnly();\\n  /// @dev Error of query for already wrapped up epoch\\n  error ErrAlreadyWrappedEpoch();\\n\\n  /**\\n   * @dev Submits reward of the current block.\\n   *\\n   * Requirements:\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDeprecated` if the coinbase is slashed or no longer be a block producer.\\n   * Emits the event `BlockRewardSubmitted` for the valid call.\\n   *\\n   */\\n  function submitBlockReward() external payable;\\n\\n  /**\\n   * @dev Wraps up the current epoch.\\n   *\\n   * Requirements:\\n   * - The method must be called when the current epoch is ending.\\n   * - The epoch is not wrapped yet.\\n   * - The method caller is coinbase.\\n   *\\n   * Emits the event `MiningRewardDistributed` when some validator has reward distributed.\\n   * Emits the event `StakingRewardDistributed` when some staking pool has reward distributed.\\n   * Emits the event `BlockProducerSetUpdated` when the epoch is wrapped up.\\n   * Emits the event `BridgeOperatorSetUpdated` when the epoch is wrapped up at period ending.\\n   * Emits the event `ValidatorSetUpdated` when the epoch is wrapped up at period ending, and the validator set gets updated.\\n   * Emits the event `WrappedUpEpoch`.\\n   *\\n   */\\n  function wrapUpEpoch() external payable;\\n}\\n\",\"keccak256\":\"0x03be261e34fe05476a0ef7475c7676064be005ad4328b53796146a29716dea19\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IEmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IEmergencyExit {\\n  /// @dev Emitted when the fund is locked from an emergency exit request\\n  event EmergencyExitRequested(address indexed cid, uint256 lockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is transferred to the recipient.\\n  event EmergencyExitLockedFundReleased(address indexed cid, address indexed recipient, uint256 unlockedAmount);\\n  /// @dev Emitted when the fund that locked from an emergency exit request is failed to transferred back.\\n  event EmergencyExitLockedFundReleasingFailed(\\n    address indexed cid, address indexed recipient, uint256 unlockedAmount, uint256 contractBalance\\n  );\\n\\n  /// @dev Emitted when the emergency exit locked amount is updated.\\n  event EmergencyExitLockedAmountUpdated(uint256 amount);\\n  /// @dev Emitted when the emergency expiry duration is updated.\\n  event EmergencyExpiryDurationUpdated(uint256 amount);\\n\\n  /// @dev Error of already requested emergency exit before.\\n  error ErrAlreadyRequestedEmergencyExit();\\n  /// @dev Error thrown when the info of releasing locked fund not exist.\\n  error ErrLockedFundReleaseInfoNotFound(address cid);\\n  /// @dev Error thrown when the the locked fund of emergency exit might be recycled.\\n  error ErrLockedFundMightBeRecycled(address cid);\\n\\n  /**\\n   * @dev Returns the amount of RON to lock from a consensus address.\\n   */\\n  function emergencyExitLockedAmount() external returns (uint256);\\n\\n  /**\\n   * @dev Returns the duration that an emergency request is expired and the fund will be recycled.\\n   */\\n  function emergencyExpiryDuration() external returns (uint256);\\n\\n  /**\\n   * @dev Sets the amount of RON to lock from a consensus address.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedAmountUpdated`.\\n   *\\n   */\\n  function setEmergencyExitLockedAmount(uint256 _emergencyExitLockedAmount) external;\\n\\n  /**\\n   * @dev Sets the duration that an emergency request is expired and the fund will be recycled.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExpiryDurationUpdated`.\\n   *\\n   */\\n  function setEmergencyExpiryDuration(uint256 _emergencyExpiryDuration) external;\\n\\n  /**\\n   * @dev Unlocks fund for emergency exit request.\\n   *\\n   * Requirements:\\n   * - The method caller is admin.\\n   *\\n   * Emits the event `EmergencyExitLockedFundReleased` if the fund is successfully unlocked.\\n   * Emits the event `EmergencyExitLockedFundReleasingFailed` if the fund is failed to unlock.\\n   *\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address validatorId, address payable recipient) external;\\n\\n  /**\\n   * @dev Fallback function of `IStaking-requestEmergencyExit`.\\n   *\\n   * Requirements:\\n   * - The method caller is staking contract.\\n   *\\n   */\\n  function execRequestEmergencyExit(address validatorId, uint256 secLeftToRevoke) external;\\n}\\n\",\"keccak256\":\"0x1e702fcc28ecab3925b459cc1b9dd242308d7d9da55d4fd30c8b0f8382bc6c12\",\"license\":\"MIT\"},\"contracts/interfaces/validator/IRoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ICandidateManager.sol\\\";\\nimport \\\"./ICandidateManagerCallback.sol\\\";\\nimport \\\"./info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./ICoinbaseExecution.sol\\\";\\nimport \\\"./ISlashingExecution.sol\\\";\\nimport \\\"./IEmergencyExit.sol\\\";\\n\\ninterface IRoninValidatorSet is\\n  ICandidateManagerCallback,\\n  ICandidateManager,\\n  ICommonInfo,\\n  ISlashingExecution,\\n  ICoinbaseExecution,\\n  IEmergencyExit\\n{ }\\n\",\"keccak256\":\"0xc4c89daac6da524c3ca3c64923d2aa36d092874a0afe20d5c9fa28aa57b8aafe\",\"license\":\"MIT\"},\"contracts/interfaces/validator/ISlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ISlashingExecution {\\n  /// @dev Emitted when the validator is punished.\\n  event ValidatorPunished(\\n    address indexed cid,\\n    uint256 indexed period,\\n    uint256 jailedUntil,\\n    uint256 deductedStakingAmount,\\n    bool blockProducerRewardDeprecated,\\n    bool bridgeOperatorRewardDeprecated\\n  );\\n  /// @dev Emitted when the validator get out of jail by bailout.\\n  event ValidatorUnjailed(address indexed cid, uint256 period);\\n\\n  /// @dev Error of cannot bailout due to high tier slash.\\n  error ErrCannotBailout(address validator);\\n\\n  /**\\n   * @dev Finalize the slash request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorPunished`.\\n   *\\n   */\\n  function execSlash(address cid, uint256 newJailedUntil, uint256 slashAmount, bool cannotBailout) external;\\n\\n  /**\\n   * @dev Finalize the bailout request from slash indicator contract.\\n   *\\n   * Requirements:\\n   * - The method caller is slash indicator contract.\\n   *\\n   * Emits the event `ValidatorUnjailed`.\\n   *\\n   */\\n  function execBailOut(address cid, uint256 period) external;\\n}\\n\",\"keccak256\":\"0xbf540beae3c94d2b42e7bbb74f921086c23613fa4db43a5ca5310cb179b46d5e\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ICommonInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IJailingInfo.sol\\\";\\nimport \\\"./ITimingInfo.sol\\\";\\nimport \\\"./IValidatorInfoV2.sol\\\";\\n\\ninterface ICommonInfo is ITimingInfo, IJailingInfo, IValidatorInfoV2 {\\n  struct EmergencyExitInfo {\\n    uint256 lockedAmount;\\n    // The timestamp that this locked amount will be recycled to staking vesting contract\\n    uint256 recyclingAt;\\n  }\\n\\n  /// @dev Emitted when the deprecated reward is withdrawn.\\n  event DeprecatedRewardRecycled(address indexed recipientAddr, uint256 amount);\\n  /// @dev Emitted when the deprecated reward withdrawal is failed\\n  event DeprecatedRewardRecycleFailed(address indexed recipientAddr, uint256 amount, uint256 balance);\\n\\n  /// @dev Error thrown when receives RON from neither staking vesting contract nor staking contract\\n  error ErrUnauthorizedReceiveRON();\\n  /// @dev Error thrown when queries for a non existent info.\\n  error NonExistentRecyclingInfo();\\n\\n  /**\\n   * @dev Returns the total deprecated reward, which includes reward that is not sent for slashed validators and unsastified bridge operators\\n   */\\n  function totalDeprecatedReward() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the emergency exit request.\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view returns (EmergencyExitInfo memory);\\n}\\n\",\"keccak256\":\"0xb63c6a5edcc82cc04af534e8398eee9a805bb9cb179f3e00750e6ff92354bed9\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IJailingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IJailingInfo {\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkJailed(TConsensus) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeft(TConsensus addr)\\n    external\\n    view\\n    returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator are put in jail at a specific block and the number of block and epoch that he still is in the jail.\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus addr,\\n    uint256 blockNum\\n  ) external view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_);\\n\\n  /**\\n   * @dev Returns whether the validators are put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function checkManyJailed(TConsensus[] calldata) external view returns (bool[] memory);\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view returns (bool[] memory);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during the current period.\\n   */\\n  function checkMiningRewardDeprecated(TConsensus addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the incoming reward of the block producer is deprecated during a specific period.\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(TConsensus addr, uint256 period) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcaf9e1294ce8e49bb5a95201face19e11b659fa40dd1e79971bdb9429b2e917d\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/ITimingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITimingInfo {\\n  /**\\n   * @dev Returns the block that validator set was updated.\\n   */\\n  function getLastUpdatedBlock() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of blocks in a epoch.\\n   */\\n  function numberOfBlocksInEpoch() external view returns (uint256 _numberOfBlocks);\\n\\n  /**\\n   * @dev Returns the epoch index from the block number.\\n   */\\n  function epochOf(uint256 _block) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the epoch ending is at the block number `_block`.\\n   */\\n  function epochEndingAt(uint256 _block) external view returns (bool);\\n\\n  /**\\n   * @dev Tries to get the period index from the epoch number.\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber);\\n\\n  /**\\n   * @dev Returns whether the period ending at the current block number.\\n   */\\n  function isPeriodEnding() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the period index from the current block.\\n   */\\n  function currentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the block number that the current period starts at.\\n   */\\n  function currentPeriodStartAtBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77b86a68149389fed0eb0c5b8d56f278d3bd103ba64f504697d709b24c3212d5\",\"license\":\"MIT\"},\"contracts/interfaces/validator/info-fragments/IValidatorInfoV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\ninterface IValidatorInfoV2 {\\n  /// @dev Error thrown when an invalid maximum prioritized validator number is provided.\\n  error ErrInvalidMaxPrioritizedValidatorNumber();\\n  /// @dev Emitted when the number of max validator is updated.\\n\\n  /**\\n   * @dev Returns the maximum number of validators in the epoch.\\n   */\\n  function maxValidatorNumber() external view returns (uint256 _maximumValidatorNumber);\\n\\n  /**\\n   * @dev Returns the number of reserved slots for prioritized validators.\\n   */\\n  function maxPrioritizedValidatorNumber() external view returns (uint256 _maximumPrioritizedValidatorNumber);\\n\\n  /**\\n   * @dev Returns the current validator list.\\n   */\\n  function getValidators() external view returns (TConsensus[] memory validatorList);\\n\\n  /**\\n   * @dev Returns the ids of current validator list.\\n   */\\n  function getValidatorIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns the current block producer list.\\n   */\\n  function getBlockProducers() external view returns (TConsensus[] memory consensusList);\\n\\n  /**\\n   * @dev Returns the ids current block producer list.\\n   */\\n  function getBlockProducerIds() external view returns (address[] memory cids);\\n\\n  /**\\n   * @dev Returns whether the consensus address is block producer or not.\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether the id is block producer or not.\\n   */\\n  function isBlockProducerById(address id) external view returns (bool);\\n\\n  /**\\n   * @dev Returns total numbers of the block producers.\\n   */\\n  function totalBlockProducer() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa81c50d30de1e9475d868f3c1930aa5ba2a74024eba27e0d33bd62dcc799a764\",\"license\":\"MIT\"},\"contracts/libraries/EnumFlags.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This library implements checking flag of an enumerated value.\\n * The originated idea is inherited from [Enum.HashFlag(Enum)](https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag?view=net-6.0) method of C#.\\n */\\nlibrary EnumFlags {\\n  enum ValidatorFlag {\\n    None, // bit(00)\\n    BlockProducer, // bit(01)\\n    DeprecatedBridgeOperator, // bit(10)\\n    Both // bit(11)\\n\\n  }\\n\\n  function isNone(ValidatorFlag _value) internal pure returns (bool) {\\n    return uint8(_value) == 0;\\n  }\\n\\n  /**\\n   * @dev Checks if `_value` has `_flag`.\\n   */\\n  function hasFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (bool) {\\n    return (uint8(_value) & uint8(_flag)) != 0;\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after adding `_flag`.\\n   */\\n  function addFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) | uint8(_flag));\\n  }\\n\\n  /**\\n   * @dev Calculate new value of `_value` after remove `_flag`.\\n   */\\n  function removeFlag(ValidatorFlag _value, ValidatorFlag _flag) internal pure returns (ValidatorFlag) {\\n    return ValidatorFlag(uint8(_value) & ~uint8(_flag));\\n  }\\n}\\n\",\"keccak256\":\"0xb6ca1ee184facb21437c9703c2041019cbd9b58a27f09efdcbfa5704f2b7716f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LibArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IndexMap } from \\\"./LibIndexMap.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibArray\\n * @dev A library for array-related utility functions in Solidity.\\n */\\nlibrary LibArray {\\n  /**\\n   * @dev Error indicating a length mismatch between two arrays.\\n   */\\n  error ErrLengthMismatch();\\n\\n  /**\\n   * @dev Error thrown when a duplicated element is detected in an array.\\n   * @param msgSig The function signature that invoke the error.\\n   */\\n  error ErrDuplicated(bytes4 msgSig);\\n\\n  /**\\n   * @dev Calculates the sum of an array of uint256 values.\\n   *\\n   * Modified from: https://docs.soliditylang.org/en/v0.8.25/assembly.html#example\\n   *\\n   * @param data The array of uint256 values for which the sum is calculated.\\n   * @return result The sum of the provided array.\\n   */\\n  function sum(uint256[] memory data) internal pure returns (uint256 result) {\\n    assembly (\\\"memory-safe\\\") {\\n      // Load the length (first 32 bytes)\\n      let len := mload(data)\\n      let dataElementLocation := add(data, 0x20)\\n\\n      // Iterate until the bound is not met.\\n      for { let end := add(dataElementLocation, mul(len, 0x20)) } lt(dataElementLocation, end) {\\n        dataElementLocation := add(dataElementLocation, 0x20)\\n      } { result := add(result, mload(dataElementLocation)) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether or not there's a duplicate. Runs in O(n^2).\\n   * @param A Array to search\\n   * @return Returns true if duplicate, false otherwise\\n   */\\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n    uint256 length = A.length;\\n    if (length == 0) return false;\\n\\n    unchecked {\\n      for (uint256 i; i < length - 1; ++i) {\\n        for (uint256 j = i + 1; j < length; ++j) {\\n          if (A[i] == A[j]) {\\n            return true;\\n          }\\n        }\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @notice This method normalized the descending-sorted array `values` so that all elements in the `values`\\n   * are still in correct order, have 'relative' diffs and not greater than `sum(normed(values))/divisor`.\\n   * Returns the `normSum` and the `pivot` after normalizing the array.\\n   *\\n   * @dev Given a tuple of `(a, s, k)` and divisor `d` where:\\n   *    - `a` is the array of values of length `n`,\\n   *    - `s` is the sum of the array,\\n   *    - `k` is the pivot value, `k = s / d` initially.\\n   *\\n   * This method normalizes `a` to `a'` such that:\\n   *    (1) Elements in `a` and `a'` are decreased relatively\\n   *    (2) `k' = (s' / d)` and `\\u2200x \\u2208 a': x \\u2264 k'`\\n   *\\n   * Algorithm:\\n   *    1. Init `s = sum(a)`, `k = s/d`.\\n   *    2. While `k` changes:\\n   *       * Replace all `a[i] > k` by `k`\\n   *       * k := sum(unchanged(a[i])) / (d - count(changed(a[i])))\\n   *\\n   * For example:\\n   *    Input:\\n   *      a = [100, 70, 20, 15, 3]\\n   *      d = 3\\n   *    Calculation:\\n   *      Init:    a = [ 100,  70,  20,  15,  3 ];    s = 208;   k = 69\\n   *      Round 1: a = [  69,  69,  20,  15,  3 ];    s = 177;   k = 38\\n   *      Round 2: a = [  38,  38,  20,  15,  3 ];    s = 114;   k = 38\\n   *\\n   *      The calculation stop since all elements in a is \\u2264 k, in other words, `k` is unchanged.\\n   *    Output:\\n   *      s = 114\\n   *      k = 38\\n   *\\n   * Implementation denotes:\\n   *    `pivot`: k\\n   *    `left`:  to-be-changed elements\\n   *    `right`: unchanged elements\\n   *\\n   *    Input:\\n   *                     pivot\\n   *                       v\\n   *            --*-----*--|--------*---------*--------*------\\n   *              ^     ^           ^         ^        ^\\n   *              a[0]  a[1]        a[2]      a[3]     a[4]\\n   *\\n   *    Output:\\n   *                         pivot = a[0] = a[1]\\n   *                           v\\n   *            ---------------|----*---------*--------*------\\n   *                                ^         ^        ^\\n   *                                a[2]      a[3]     a[4]\\n   *\\n   *\\n   */\\n  function findNormalizedSumAndPivot(\\n    uint256[] memory values,\\n    uint256 divisor\\n  ) internal pure returns (uint256 normSum, uint256 pivot) {\\n    divisor = Math.min(values.length, divisor);\\n    values = inplaceDescSort(values);\\n\\n    uint256 sLeft;\\n    uint256 nLeft;\\n    uint256 sRight;\\n    bool shouldExit;\\n\\n    normSum = sum(values);\\n    pivot = normSum / divisor;\\n\\n    while (!shouldExit) {\\n      shouldExit = true;\\n\\n      while (values[nLeft] > pivot) {\\n        sLeft += values[nLeft++];\\n        shouldExit = false;\\n      }\\n\\n      if (shouldExit) break;\\n\\n      sRight = normSum - sLeft;\\n      pivot = sRight / (divisor - nLeft); // Mathematically proven `divisor` is always larger than `nLeft`\\n      sLeft = pivot * nLeft;\\n      normSum = sRight + sLeft;\\n    }\\n  }\\n\\n  /**\\n   * @dev Clips the values in the given array to be within the specified lower and upper bounds.\\n   *\\n   * - The input array is modified in place.\\n   *\\n   * - Examples:\\n   * `inplaceClip([1, 2, 3, 4, 5], 2, 4)` => `[2, 2, 3, 4, 4]`\\n   */\\n  function inplaceClip(\\n    uint256[] memory values,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256[] memory clippedValues) {\\n    uint256 length = values.length;\\n\\n    for (uint256 i; i < length; ++i) {\\n      if (values[i] < lower) values[i] = lower;\\n      if (values[i] > upper) values[i] = upper;\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      clippedValues := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether two arrays of addresses are equal or not.\\n   */\\n  function isEqual(address[] memory self, address[] memory other) internal pure returns (bool yes) {\\n    return hash(self) == hash(other);\\n  }\\n\\n  /**\\n   * @dev Hash dynamic size array\\n   * @param self The array of uint256\\n   * @return digest The hash result of the array\\n   */\\n  function hash(uint256[] memory self) internal pure returns (bytes32 digest) {\\n    assembly (\\\"memory-safe\\\") {\\n      digest := keccak256(add(self, 0x20), mul(mload(self), 0x20))\\n    }\\n  }\\n\\n  function hash(address[] memory self) internal pure returns (bytes32 digest) {\\n    return hash(toUint256s(self));\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (uint256) from a and b.\\n   */\\n  function concat(uint256[] memory a, uint256[] memory b) internal pure returns (uint256[] memory c) {\\n    unchecked {\\n      uint256 lengthA = a.length;\\n      uint256 lengthB = b.length;\\n\\n      if (lengthA == 0) return b;\\n      if (lengthB == 0) return a;\\n\\n      c = new uint256[](lengthA + lengthB);\\n\\n      uint256 i;\\n\\n      for (; i < lengthA;) {\\n        c[i] = a[i];\\n        ++i;\\n      }\\n      for (uint256 j; j < lengthB;) {\\n        c[i] = b[j];\\n        ++i;\\n        ++j;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the concatenated array (address) from a and b.\\n   */\\n  function concat(address[] memory a, address[] memory b) internal pure returns (address[] memory c) {\\n    return unsafeToAddresses(concat(toUint256s(a), toUint256s(b)));\\n  }\\n\\n  /**\\n   * @dev Converts an array of address to an array of uint256.\\n   */\\n  function toUint256s(address[] memory self) internal pure returns (uint256[] memory uint256s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint256s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of uint96.\\n   */\\n  function unsafeToUint96s(uint256[] memory self) internal pure returns (uint96[] memory uint96s) {\\n    assembly (\\\"memory-safe\\\") {\\n      uint96s := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an array of uint256 to an array of address.\\n   */\\n  function unsafeToAddresses(uint256[] memory self) internal pure returns (address[] memory addresses) {\\n    assembly (\\\"memory-safe\\\") {\\n      addresses := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Create an array of indices (an index array) with provided range.\\n   * @param length The array size\\n   * @return data an array of indices\\n   */\\n  function arange(uint256 length) internal pure returns (uint256[] memory data) {\\n    unchecked {\\n      data = new uint256[](length);\\n      for (uint256 i; i < length; ++i) {\\n        data[i] = i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (uint256) given an array of indices.\\n   *\\n   * Inspiration from: https://numpy.org/doc/stable/reference/generated/numpy.take.html\\n   */\\n  function take(uint256[] memory self, uint256[] memory ids) internal pure returns (uint256[] memory result) {\\n    uint256 length = ids.length;\\n    result = new uint256[](length);\\n    for (uint256 i; i < length; ++i) {\\n      result[i] = self[ids[i]];\\n    }\\n  }\\n\\n  /**\\n   * @dev Take elements from an array (address) given an array of indices.\\n   */\\n  function take(address[] memory self, uint256[] memory indices) internal pure returns (address[] memory result) {\\n    return unsafeToAddresses(take(toUint256s(self), indices));\\n  }\\n\\n  /**\\n   * @dev Pick the top `k` `keys` of type address[] based on their corresponding `values`.\\n   */\\n  function pickTopKByValues(\\n    address[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (address[] memory pickeds) {\\n    return unsafeToAddresses(pickTopKByValues(toUint256s(keys), values, k));\\n  }\\n\\n  /**\\n   * @dev Picks the top `k` `keys` based on their corresponding `values`.\\n   *\\n   * WARNING: The input array size will be changed. Besides, this fn does not guarantee all elements are sorted\\n   */\\n  function pickTopKByValues(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    uint256 k\\n  ) internal pure returns (uint256[] memory pickeds) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      if (k >= length) return keys;\\n\\n      inplaceDescSortByValue(keys, values);\\n      unsafeResize(keys, k);\\n\\n      return keys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding `indexMap` with the filter function `filterFn`.\\n   */\\n  function filterByIndexMap(\\n    uint256[] memory keys,\\n    IndexMap memory indexMap,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    return filterBy(keys, indexMap._inner, filterFn);\\n  }\\n\\n  /**\\n   * @dev Filter the array `keys` by the corresponding value array `values` with the filter function `filterFn`.\\n   */\\n  function filterBy(\\n    uint256[] memory keys,\\n    uint256[] memory values,\\n    function(uint256, uint256[] memory) pure returns (bool) filterFn\\n  ) internal pure returns (uint256[] memory filteredKeys) {\\n    unchecked {\\n      uint256 length = keys.length;\\n      filteredKeys = new uint256[](length);\\n      uint256 nFiltered;\\n\\n      for (uint256 i; i < length; ++i) {\\n        if (filterFn(i, values)) {\\n          filteredKeys[nFiltered++] = keys[i];\\n        }\\n      }\\n\\n      unsafeResize(filteredKeys, nFiltered);\\n\\n      return filteredKeys;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of uint256 `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `values`.\\n   */\\n  function inplaceDescSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSort(values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function inplaceDescQuickSort(uint256[] memory values) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = values.length;\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSort(values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := values\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `values`\\n   */\\n  function _inplaceDescQuickSort(uint256[] memory values, int256 left, int256 right) private pure {\\n    unchecked {\\n      if (left < right) {\\n        if (left == right) return;\\n        int256 i = left;\\n        int256 j = right;\\n        uint256 pivot = values[uint256(left + right) >> 1];\\n\\n        while (i <= j) {\\n          while (pivot < values[uint256(i)]) ++i;\\n          while (pivot > values[uint256(j)]) --j;\\n\\n          if (i <= j) {\\n            (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n            ++i;\\n            --j;\\n          }\\n        }\\n\\n        if (left < j) _inplaceDescQuickSort(values, left, j);\\n        if (i < right) _inplaceDescQuickSort(values, i, right);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Sorts array of addresses `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    address[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (address[] memory sorted) {\\n    return unsafeToAddresses(inplaceDescQuickSortByValue(toUint256s(self), values));\\n  }\\n\\n  /**\\n   * @dev Resize a memory array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(uint256[] memory self, uint256 length) internal pure returns (uint256[] memory resized) {\\n    assembly (\\\"memory-safe\\\") {\\n      resized := self\\n      mstore(resized, length)\\n    }\\n  }\\n\\n  /**\\n   * @dev Resize a memory address array.\\n   *\\n   * WARNING: The new length of the array should not be greater than the current length to avoid collision with other already allocated memory.\\n   */\\n  function unsafeResize(address[] memory self, uint256 length) internal pure returns (address[] memory resized) {\\n    return unsafeToAddresses(unsafeResize(toUint256s(self), length));\\n  }\\n\\n  /**\\n   * @dev Sorts `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function DOES modifies the original `self` and `values`.\\n   */\\n  function inplaceDescSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    return inplaceDescQuickSortByValue(self, values);\\n  }\\n\\n  /**\\n   * @dev Quick sort `self` based on `values`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `self` and `values`\\n   */\\n  function inplaceDescQuickSortByValue(\\n    uint256[] memory self,\\n    uint256[] memory values\\n  ) internal pure returns (uint256[] memory sorted) {\\n    uint256 length = self.length;\\n    if (length != values.length) revert ErrLengthMismatch();\\n    unchecked {\\n      if (length > 1) _inplaceDescQuickSortByValue(self, values, 0, int256(length - 1));\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      sorted := self\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to perform quicksort on an `values` based on a corresponding `arr`.\\n   *\\n   * - Values are sorted in descending order.\\n   *\\n   * WARNING This function modify `arr` and `values`\\n   */\\n  function _inplaceDescQuickSortByValue(\\n    uint256[] memory arr,\\n    uint256[] memory values,\\n    int256 left,\\n    int256 right\\n  ) private pure {\\n    unchecked {\\n      if (left == right) return;\\n      int256 i = left;\\n      int256 j = right;\\n      uint256 pivot = values[uint256(left + right) >> 1];\\n\\n      while (i <= j) {\\n        while (pivot < values[uint256(i)]) ++i;\\n        while (values[uint256(j)] < pivot) --j;\\n\\n        if (i <= j) {\\n          (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n          (values[uint256(i)], values[uint256(j)]) = (values[uint256(j)], values[uint256(i)]);\\n          ++i;\\n          --j;\\n        }\\n      }\\n\\n      if (left < j) _inplaceDescQuickSortByValue(arr, values, left, j);\\n      if (i < right) _inplaceDescQuickSortByValue(arr, values, i, right);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe602052be2234f57b7040de8f34aaa934ca1c00d5edec95d607843a16718142a\",\"license\":\"MIT\"},\"contracts/libraries/LibIndexMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nstruct IndexMap {\\n  uint256[] _inner;\\n}\\n\\nusing LibIndexMap for IndexMap global;\\n\\n/**\\n * @title LibIndexMap\\n * @author TuDo1403\\n * @dev The `IndexMap` is a bitmap that represents the presence or absence of elements at specific indices.\\n * It is implemented as an array of uint256 values, where each element in an array is a bitmap which can represent the presence or absence of an element at a particular index.\\n * Each element in an array of bitmap can represent the presence or absence of 256 elements.\\n * The Presence of a particular index is represented by setting the corresponding bit in the bitmap to 1.\\n * Example:\\n * - Given an array of values: [11, 24, 33, 52]. Returns the indexes of odd numbers.\\n * - The values of odd numbers are: [11, 33]. Therefore, the indices of odd numbers are: [0, 2].\\n * - However, we can save more gas by using a bitmap to represent the indices of odd numbers.\\n * - Index 0 is an odd number, so we set the first bit of the bitmap to 1, (bitmap = 0001)\\n * - Index 2 is an odd number, so we set the third bit of the bitmap to 1, (bitmap = 0100)\\n * - The bitmap for the indices of odd number is: b'0001' | b'0100' = b'0101' = 5 in decimal\\n */\\nlibrary LibIndexMap {\\n  /// @dev Throws if the index is out of bitmap length.\\n  error ErrOutOfRange(uint256 index);\\n\\n  /// @dev Maximum number of bits in an indexmap slot.\\n  uint256 internal constant MAX_BIT = 256;\\n\\n  /**\\n   * @dev Wraps an array of uint256 values into an IndexMap struct.\\n   * @param inner The array of uint256 values to wrap.\\n   * @return The wrapped IndexMap struct.\\n   */\\n  function wrap(uint256[] memory inner) internal pure returns (IndexMap memory) {\\n    return IndexMap(inner);\\n  }\\n\\n  /**\\n   * @dev Creates a indexmap array based on the given number of elements.\\n   * @param numElement The number of elements to create the indexmap for.\\n   * @return indexmap The created indexmap array.\\n   */\\n  function create(uint16 numElement) internal pure returns (IndexMap memory indexmap) {\\n    unchecked {\\n      indexmap._inner = new uint256[](1 + uint256(numElement) / MAX_BIT);\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if an index is present in the map.\\n   * @param indexmap The map to check.\\n   * @param index The index to check.\\n   * @return A boolean indicating whether the index is present in the map.\\n   */\\n  function contains(IndexMap memory indexmap, uint256 index) internal pure returns (bool) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      // if index is out of range, return false\\n      if (index >= indexmap._inner.length * size) return false;\\n      return (indexmap._inner[index / size] & (1 << (index % size))) != 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of an element in a indexmap based on its value.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of the element.\\n   * @param index The value to record.\\n   * @return The updated indexmap with recorded existence of the element.\\n   */\\n  function set(IndexMap memory indexmap, uint256 index) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 size = MAX_BIT;\\n      uint256 pos = index / size;\\n\\n      if (pos >= indexmap._inner.length) revert ErrOutOfRange(index);\\n\\n      indexmap._inner[index / size] |= 1 << (index % size);\\n\\n      return indexmap;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set of elements in a indexmap based on their values.\\n   *\\n   * - The indexmap is updated in place.\\n   * - Will not check for index out of range of the original array.\\n   *\\n   * @param indexmap The indexmap to record the existence of elements.\\n   * @param indices The array of indices to record.\\n   * @return The updated indexmap with recorded existence of elements.\\n   */\\n  function setBatch(IndexMap memory indexmap, uint256[] memory indices) internal pure returns (IndexMap memory) {\\n    unchecked {\\n      uint256 pos;\\n      uint256 size = MAX_BIT;\\n      uint256 length = indices.length;\\n      uint256 bitmapLength = indexmap._inner.length;\\n\\n      for (uint256 i; i < length; ++i) {\\n        pos = indices[i] / size;\\n\\n        if (pos >= bitmapLength) revert ErrOutOfRange(indices[i]);\\n\\n        indexmap._inner[pos] |= 1 << (indices[i] % size);\\n      }\\n\\n      return indexmap;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xce4278abfd4fbdc0de4a7605e8003c248984ed07e8ff3f2eb20183f5f302a6d4\",\"license\":\"MIT\"},\"contracts/libraries/LibSLA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title RandomRequest\\n * @dev A struct representing a random request.\\n */\\nstruct RandomRequest {\\n  // The period of the request.\\n  uint256 period;\\n  // The previous beacon value.\\n  uint256 prevBeacon;\\n}\\n\\nusing LibSLA for RandomRequest global;\\n\\nlibrary LibSLA {\\n  /**\\n   * @dev Hashes the random request.\\n   */\\n  function hash(RandomRequest memory req) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(req.period, req.prevBeacon));\\n  }\\n\\n  /**\\n   * @dev Calculates the proof seed\\n   */\\n  function calcProofSeed(RandomRequest memory req, bytes32 keyHash) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(req.period, req.prevBeacon, keyHash)));\\n  }\\n\\n  /**\\n   * @dev Calculates the key hash from public keys.\\n   */\\n  function calcKeyHash(uint256[2] memory publicKeys) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(publicKeys));\\n  }\\n}\\n\",\"keccak256\":\"0x2d13cb46c2bf0689dc598bae89969faa21b8a1fb043aa25af18b1cada84ac58c\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns whether the number `c` is in range of [a; b].\\n   */\\n  function inRange(uint256 c, uint256 a, uint256 b) internal pure returns (bool) {\\n    return a <= c && c <= b;\\n  }\\n\\n  /**\\n   * @dev Returns whether two inclusive ranges [x1;x2] and [y1;y2] overlap.\\n   */\\n  function twoRangeOverlap(uint256 x1, uint256 x2, uint256 y1, uint256 y2) internal pure returns (bool) {\\n    return x1 <= y2 && y1 <= x2;\\n  }\\n\\n  /**\\n   * @dev Returns value of a + b; in case result is larger than upperbound, upperbound is returned.\\n   */\\n  function addWithUpperbound(uint256 a, uint256 b, uint256 upperbound) internal pure returns (uint256) {\\n    return min(a + b, upperbound);\\n  }\\n\\n  /**\\n   * @dev Returns value of a - b; in case of negative result, 0 is returned.\\n   */\\n  function subNonNegative(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a - b : 0;\\n  }\\n\\n  /**\\n   * @dev Returns value of `a + zeroable` if zerobale is not 0; otherwise, return 0.\\n   */\\n  function addIfNonZero(uint256 a, uint256 zeroable) internal pure returns (uint256) {\\n    return zeroable != 0 ? a + zeroable : 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd73170f448c644a47024c7dbcf4afc3cc7ad27f61737c6ea4c3b543ec5cdb7e9\",\"license\":\"UNLICENSED\"},\"contracts/ronin/validator/CandidateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../extensions/consumers/PercentageConsumer.sol\\\";\\nimport \\\"../../interfaces/validator/ICandidateManager.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport { HasStakingDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\n\\nabstract contract CandidateManager is\\n  ICandidateManager,\\n  PercentageConsumer,\\n  GlobalConfigConsumer,\\n  HasContracts,\\n  HasStakingDeprecated\\n{\\n  /// @dev Maximum number of validator candidate\\n  uint256 private _maxValidatorCandidate;\\n\\n  /// @dev The array of candidate ids\\n  address[] internal _candidateIds;\\n  /// @dev Mapping from candidate id => bitwise negation of validator index in `_candidates`\\n  mapping(address => uint256) internal _candidateIndex;\\n  /// @dev Mapping from candidate id => their info\\n  mapping(address => ValidatorCandidate) internal _candidateInfo;\\n\\n  /**\\n   * @dev The minimum offset in day from current date to the effective date of a new commission schedule.\\n   * Value of 1 means the change gets affected at the beginning of the following day.\\n   *\\n   */\\n  uint256 internal _minEffectiveDaysOnwards;\\n  /// @dev Mapping from candidate consensus id => schedule commission change.\\n  mapping(address => CommissionSchedule) internal _candidateCommissionChangeSchedule;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function maxValidatorCandidate() public view override returns (uint256) {\\n    return _maxValidatorCandidate;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function minEffectiveDaysOnward() external view override returns (uint256) {\\n    return _minEffectiveDaysOnwards;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMaxValidatorCandidate(uint256 _number) external override onlyAdmin {\\n    _setMaxValidatorCandidate(_number);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function setMinEffectiveDaysOnwards(uint256 _numOfDays) external override onlyAdmin {\\n    _setMinEffectiveDaysOnwards(_numOfDays);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isValidatorCandidate(TConsensus consensus) external view override returns (bool) {\\n    return _isValidatorCandidateById(__css2cid(consensus));\\n  }\\n\\n  function _isValidatorCandidateById(address cid) internal view returns (bool) {\\n    return _candidateIndex[cid] != 0;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfos() external view override returns (ValidatorCandidate[] memory list) {\\n    list = new ValidatorCandidate[](_candidateIds.length);\\n    for (uint i; i < list.length;) {\\n      list[i] = _candidateInfo[_candidateIds[i]];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfo(TConsensus consensus) external view override returns (ValidatorCandidate memory) {\\n    address validatorId = __css2cid(consensus);\\n    return getCandidateInfoById(validatorId);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCandidateInfoById(address cid) public view override returns (ValidatorCandidate memory) {\\n    if (!_isValidatorCandidateById(cid)) revert ErrNonExistentCandidate();\\n    return _candidateInfo[cid];\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidates() external view override returns (TConsensus[] memory) {\\n    return __cid2cssBatch(getValidatorCandidateIds());\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getValidatorCandidateIds() public view override returns (address[] memory) {\\n    return _candidateIds;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function getCommissionChangeSchedule(TConsensus consensus) external view override returns (CommissionSchedule memory) {\\n    return _candidateCommissionChangeSchedule[__css2cid(consensus)];\\n  }\\n\\n  /**\\n   * @dev Removes unsastisfied candidates, the ones who have insufficient minimum candidate staking amount,\\n   * or the ones who requested to renounce their candidate role.\\n   *\\n   * Emits the event `CandidatesRevoked` when a candidate is revoked.\\n   *\\n   */\\n  function _syncCandidateSet(uint256 _nextPeriod) internal returns (address[] memory _unsatisfiedCandidates) {\\n    IStaking _staking = IStaking(getContract(ContractType.STAKING));\\n    uint256 _waitingSecsToRevoke = _staking.waitingSecsToRevoke();\\n    uint256 _minStakingAmount = _staking.minValidatorStakingAmount();\\n    uint256[] memory _selfStakings = _staking.getManySelfStakingsById(_candidateIds);\\n\\n    uint256 _length = _candidateIds.length;\\n    uint256 _unsatisfiedCount;\\n    _unsatisfiedCandidates = new address[](_length);\\n\\n    {\\n      uint256 _i;\\n      address cid;\\n      ValidatorCandidate storage _info;\\n      while (_i < _length) {\\n        cid = _candidateIds[_i];\\n        _info = _candidateInfo[cid];\\n\\n        // Checks for under-balance status of candidates\\n        bool _hasTopupDeadline = _info.topupDeadline != 0;\\n        if (_selfStakings[_i] < _minStakingAmount) {\\n          // Updates deadline on the first time unsatisfied the staking amount condition\\n          if (!_hasTopupDeadline) {\\n            uint256 _topupDeadline = block.timestamp + _waitingSecsToRevoke;\\n            _info.topupDeadline = _topupDeadline;\\n            emit CandidateTopupDeadlineUpdated(cid, _topupDeadline);\\n          }\\n        } else if (_hasTopupDeadline) {\\n          // Removes the deadline if the staking amount condition is satisfied\\n          delete _info.topupDeadline;\\n          emit CandidateTopupDeadlineUpdated(cid, 0);\\n        }\\n\\n        // Removes unsatisfied candidates\\n        bool _revokingActivated = (_info.revokingTimestamp != 0 && _info.revokingTimestamp <= block.timestamp)\\n          || _emergencyExitLockedFundReleased(cid);\\n        bool _topupDeadlineMissed = _info.topupDeadline != 0 && _info.topupDeadline <= block.timestamp;\\n        if (_revokingActivated || _topupDeadlineMissed) {\\n          _selfStakings[_i] = _selfStakings[--_length];\\n          unchecked {\\n            _unsatisfiedCandidates[_unsatisfiedCount++] = cid;\\n          }\\n          _removeCandidate(cid);\\n          continue;\\n        }\\n\\n        // Checks for schedule of commission change and updates commission rate\\n        uint256 _scheduleTimestamp = _candidateCommissionChangeSchedule[cid].effectiveTimestamp;\\n        if (_scheduleTimestamp != 0 && _scheduleTimestamp <= block.timestamp) {\\n          uint256 _commisionRate = _candidateCommissionChangeSchedule[cid].commissionRate;\\n          delete _candidateCommissionChangeSchedule[cid];\\n          _info.commissionRate = _commisionRate;\\n          emit CommissionRateUpdated(cid, _commisionRate);\\n        }\\n\\n        unchecked {\\n          _i++;\\n        }\\n      }\\n    }\\n\\n    assembly {\\n      mstore(_unsatisfiedCandidates, _unsatisfiedCount)\\n    }\\n\\n    if (_unsatisfiedCount > 0) {\\n      emit CandidatesRevoked(_unsatisfiedCandidates);\\n      _staking.execDeprecatePools(_unsatisfiedCandidates, _nextPeriod);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManager\\n   */\\n  function isCandidateAdmin(TConsensus consensusAddr, address admin) external view override returns (bool) {\\n    return _isCandidateAdminById(__css2cid(consensusAddr), admin);\\n  }\\n\\n  function isCandidateAdminById(address candidateId, address admin) external view returns (bool) {\\n    return _isCandidateAdminById(candidateId, admin);\\n  }\\n\\n  function _isCandidateAdminById(address candidateId, address admin) internal view returns (bool) {\\n    return _candidateInfo[candidateId].__shadowedAdmin == admin;\\n  }\\n\\n  /**\\n   * @dev Sets the maximum number of validator candidate.\\n   *\\n   * Emits the `MaxValidatorCandidateUpdated` event.\\n   *\\n   */\\n  function _setMaxValidatorCandidate(uint256 _threshold) internal {\\n    _maxValidatorCandidate = _threshold;\\n    emit MaxValidatorCandidateUpdated(_threshold);\\n  }\\n\\n  /**\\n   * @dev Sets the minimum number of days onwards to the effective date of commission rate change.\\n   *\\n   * Emits the `MinEffectiveDaysOnwardsUpdated` event.\\n   *\\n   */\\n  function _setMinEffectiveDaysOnwards(uint256 _numOfDays) internal {\\n    if (_numOfDays < 1) revert ErrInvalidMinEffectiveDaysOnwards();\\n    _minEffectiveDaysOnwards = _numOfDays;\\n    emit MinEffectiveDaysOnwardsUpdated(_numOfDays);\\n  }\\n\\n  /**\\n   * @dev Removes the candidate.\\n   */\\n  function _removeCandidate(address _addr) internal virtual {\\n    uint256 idx = _candidateIndex[_addr];\\n    if (idx == 0) {\\n      return;\\n    }\\n\\n    delete _candidateInfo[_addr];\\n    delete _candidateIndex[_addr];\\n    delete _candidateCommissionChangeSchedule[_addr];\\n\\n    address lastCid = _candidateIds[_candidateIds.length - 1];\\n    if (lastCid != _addr) {\\n      _candidateIndex[lastCid] = idx;\\n      _candidateIds[~idx] = lastCid;\\n    }\\n\\n    _candidateIds.pop();\\n  }\\n\\n  /**\\n   * @dev Sets timestamp to revoke a candidate.\\n   */\\n  function _setRevokingTimestamp(ValidatorCandidate storage _candidate, uint256 timestamp) internal {\\n    address cid = __css2cid(_candidate.__shadowedConsensus);\\n    if (!_isValidatorCandidateById(cid)) revert ErrNonExistentCandidate();\\n    _candidate.revokingTimestamp = timestamp;\\n    emit CandidateRevokingTimestampUpdated(cid, timestamp);\\n  }\\n\\n  /**\\n   * @dev Returns a flag indicating whether the fund is unlocked.\\n   */\\n  function _emergencyExitLockedFundReleased(address _consensusAddr) internal virtual returns (bool);\\n\\n  /**\\n   * @dev Returns whether the validator id is a trusted org or not.\\n   */\\n  function _isTrustedOrg(address validatorId) internal virtual returns (bool);\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n\\n  /// @dev See {RoninValidatorSet-__cid2cssBatch}\\n  function __cid2cssBatch(address[] memory cids) internal view virtual returns (TConsensus[] memory);\\n}\\n\",\"keccak256\":\"0x955c8ab86e1343127ed6ea54cf9ef48b72e9192b322032bddffd492e40fb93e7\",\"license\":\"MIT\"},\"contracts/ronin/validator/CandidateManagerCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { CandidateManager } from \\\"./CandidateManager.sol\\\";\\nimport { IProfile } from \\\"../../interfaces/IProfile.sol\\\";\\nimport { IStaking } from \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport { ICandidateManagerCallback } from \\\"../../interfaces/validator/ICandidateManagerCallback.sol\\\";\\nimport { TConsensus } from \\\"../../udvts/Types.sol\\\";\\nimport { ContractType } from \\\"../../utils/ContractType.sol\\\";\\n\\nabstract contract CandidateManagerCallback is ICandidateManagerCallback, CandidateManager {\\n  //                                             //\\n  // ----------- Staking's Callbacks ----------- //\\n  //                                             //\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execApplyValidatorCandidate(\\n    address candidateAdmin,\\n    address cid,\\n    address payable treasuryAddr,\\n    uint256 commissionRate\\n  ) external override onlyContract(ContractType.STAKING) {\\n    uint256 length = _candidateIds.length;\\n    if (length >= maxValidatorCandidate()) revert ErrExceedsMaxNumberOfCandidate();\\n    if (_isValidatorCandidateById(cid)) revert ErrExistentCandidate();\\n    if (commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n\\n    for (uint i; i < length;) {\\n      ValidatorCandidate storage existentInfo = _candidateInfo[_candidateIds[i]];\\n      if (candidateAdmin == existentInfo.__shadowedAdmin) revert ErrExistentCandidateAdmin(candidateAdmin);\\n      if (treasuryAddr == existentInfo.__shadowedTreasury) revert ErrExistentTreasury(treasuryAddr);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    _candidateIndex[cid] = ~length;\\n    _candidateIds.push(cid);\\n\\n    ValidatorCandidate storage _info = _candidateInfo[cid];\\n    _info.__shadowedAdmin = candidateAdmin;\\n    _info.__shadowedConsensus = TConsensus.wrap(cid);\\n    _info.__shadowedTreasury = treasuryAddr;\\n    _info.commissionRate = commissionRate;\\n    emit CandidateGranted(cid, treasuryAddr, candidateAdmin);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execRequestRenounceCandidate(\\n    address cid,\\n    uint256 secsLeft\\n  ) external override onlyContract(ContractType.STAKING) {\\n    if (_isTrustedOrg(cid)) revert ErrTrustedOrgCannotRenounce();\\n\\n    ValidatorCandidate storage _info = _candidateInfo[cid];\\n    if (_info.revokingTimestamp != 0) revert ErrAlreadyRequestedRevokingCandidate();\\n    _setRevokingTimestamp(_info, block.timestamp + secsLeft);\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execRequestUpdateCommissionRate(\\n    address cid,\\n    uint256 effectiveDaysOnwards,\\n    uint256 commissionRate\\n  ) external override onlyContract(ContractType.STAKING) {\\n    if (_candidateCommissionChangeSchedule[cid].effectiveTimestamp != 0) {\\n      revert ErrAlreadyRequestedUpdatingCommissionRate();\\n    }\\n    if (commissionRate > _MAX_PERCENTAGE) revert ErrInvalidCommissionRate();\\n    if (effectiveDaysOnwards < _minEffectiveDaysOnwards) revert ErrInvalidEffectiveDaysOnwards();\\n\\n    CommissionSchedule storage _schedule = _candidateCommissionChangeSchedule[cid];\\n    uint256 effectiveTimestamp = ((block.timestamp / PERIOD_DURATION) + effectiveDaysOnwards) * PERIOD_DURATION;\\n    _schedule.effectiveTimestamp = effectiveTimestamp;\\n    _schedule.commissionRate = commissionRate;\\n\\n    emit CommissionRateUpdateScheduled(cid, effectiveTimestamp, commissionRate);\\n  }\\n\\n  //                                             //\\n  // ----------- Profile's Callbacks ----------- //\\n  //                                             //\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execChangeConsensusAddr(\\n    address cid,\\n    TConsensus newConsensusAddr\\n  ) external override onlyContract(ContractType.PROFILE) {\\n    _candidateInfo[cid].__shadowedConsensus = newConsensusAddr;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execChangeAdminAddr(address cid, address newAdmin) external onlyContract(ContractType.PROFILE) {\\n    _candidateInfo[cid].__shadowedAdmin = newAdmin;\\n  }\\n\\n  /**\\n   * @inheritdoc ICandidateManagerCallback\\n   */\\n  function execChangeTreasuryAddr(address cid, address payable newTreasury) external onlyContract(ContractType.PROFILE) {\\n    _candidateInfo[cid].__shadowedTreasury = newTreasury;\\n  }\\n}\\n\",\"keccak256\":\"0xdec8d83395c359b514c728c1bb50c4370186983c069f61577a9297a7a0d83f5a\",\"license\":\"MIT\"},\"contracts/ronin/validator/CoinbaseExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/IProfile.sol\\\";\\nimport \\\"../../interfaces/IStakingVesting.sol\\\";\\nimport \\\"../../interfaces/IMaintenance.sol\\\";\\nimport \\\"../../interfaces/IRoninTrustedOrganization.sol\\\";\\nimport \\\"../../interfaces/IFastFinalityTracking.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../interfaces/slash-indicator/ISlashIndicator.sol\\\";\\nimport \\\"../../interfaces/random-beacon/IRandomBeacon.sol\\\";\\nimport \\\"../../interfaces/validator/ICoinbaseExecution.sol\\\";\\nimport \\\"../../libraries/EnumFlags.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { LibArray } from \\\"../../libraries/LibArray.sol\\\";\\nimport {\\n  HasStakingVestingDeprecated,\\n  HasBridgeTrackingDeprecated,\\n  HasMaintenanceDeprecated,\\n  HasSlashIndicatorDeprecated\\n} from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport { EmergencyExit } from \\\"./EmergencyExit.sol\\\";\\nimport { TPoolId } from \\\"../../udvts/Types.sol\\\";\\nimport { ErrCallerMustBeCoinbase } from \\\"../../utils/CommonErrors.sol\\\";\\n\\nabstract contract CoinbaseExecution is\\n  ICoinbaseExecution,\\n  RONTransferHelper,\\n  HasContracts,\\n  HasStakingVestingDeprecated,\\n  HasBridgeTrackingDeprecated,\\n  HasMaintenanceDeprecated,\\n  HasSlashIndicatorDeprecated,\\n  EmergencyExit\\n{\\n  using LibArray for uint256[];\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  modifier onlyCoinbase() {\\n    _requireCoinbase();\\n    _;\\n  }\\n\\n  modifier whenEpochEnding() {\\n    if (!epochEndingAt(block.number)) revert ErrAtEndOfEpochOnly();\\n    _;\\n  }\\n\\n  modifier oncePerEpoch() {\\n    if (epochOf(_lastUpdatedBlock) >= epochOf(block.number)) revert ErrAlreadyWrappedEpoch();\\n    _lastUpdatedBlock = block.number;\\n    _;\\n  }\\n\\n  function _requireCoinbase() private view {\\n    if (msg.sender != block.coinbase) revert ErrCallerMustBeCoinbase();\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function submitBlockReward() external payable override onlyCoinbase {\\n    address id = __css2cid(TConsensus.wrap(msg.sender));\\n\\n    bool requestForBlockProducer =\\n      _isBlockProducerById(id) && !_isJailedById(id) && !_miningRewardDeprecatedById(id, currentPeriod());\\n\\n    (, uint256 blockProducerBonus,, uint256 fastFinalityRewardPercentage) = IStakingVesting(\\n      getContract(ContractType.STAKING_VESTING)\\n    ).requestBonus({ forBlockProducer: requestForBlockProducer, forBridgeOperator: false });\\n\\n    // Deprecates reward for non-validator or slashed validator\\n    if (!requestForBlockProducer) {\\n      _totalDeprecatedReward += msg.value;\\n      emit BlockRewardDeprecated(id, msg.value, BlockRewardDeprecatedType.UNAVAILABILITY);\\n      return;\\n    }\\n\\n    emit BlockRewardSubmitted(id, msg.value, blockProducerBonus);\\n\\n    uint256 period = currentPeriod();\\n    uint256 reward = msg.value + blockProducerBonus;\\n    uint256 rewardFastFinality = (reward * fastFinalityRewardPercentage) / _MAX_PERCENTAGE; // reward for fast finality\\n    uint256 rewardProducingBlock = reward - rewardFastFinality; // reward for producing blocks\\n    uint256 cutOffReward;\\n\\n    // Add fast finality reward to total reward for current epoch, then split it later in the {wrapUpEpoch} method.\\n    _totalFastFinalityReward += rewardFastFinality;\\n\\n    if (_miningRewardBailoutCutOffAtPeriod[msg.sender][period]) {\\n      (,,, uint256 cutOffPercentage) =\\n        ISlashIndicator(getContract(ContractType.SLASH_INDICATOR)).getCreditScoreConfigs();\\n      cutOffReward = (rewardProducingBlock * cutOffPercentage) / _MAX_PERCENTAGE;\\n      _totalDeprecatedReward += cutOffReward;\\n      emit BlockRewardDeprecated(id, cutOffReward, BlockRewardDeprecatedType.AFTER_BAILOUT);\\n    }\\n\\n    rewardProducingBlock -= cutOffReward;\\n    (uint256 minRate, uint256 maxRate) = IStaking(getContract(ContractType.STAKING)).getCommissionRateRange();\\n    uint256 rate = Math.max(Math.min(_candidateInfo[id].commissionRate, maxRate), minRate);\\n    uint256 miningAmount = (rate * rewardProducingBlock) / _MAX_PERCENTAGE;\\n    _miningReward[id] += miningAmount;\\n    _delegatingReward[id] += (rewardProducingBlock - miningAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc ICoinbaseExecution\\n   */\\n  function wrapUpEpoch() external payable virtual override onlyCoinbase whenEpochEnding oncePerEpoch {\\n    uint256 newPeriod = _computePeriod(block.timestamp);\\n    bool periodEnding = _isPeriodEnding(newPeriod);\\n\\n    uint256 lastPeriod = currentPeriod();\\n    uint256 epoch = epochOf(block.number);\\n    uint256 nextEpoch = epoch + 1;\\n    address[] memory currValidatorIds = getValidatorIds();\\n\\n    IRandomBeacon randomBeacon = IRandomBeacon(getContract(ContractType.RANDOM_BEACON));\\n    // This request is actually only invoked at the first epoch of the period.\\n    randomBeacon.execRequestRandomSeedForNextPeriod(lastPeriod, newPeriod);\\n\\n    _syncFastFinalityReward(epoch, currValidatorIds);\\n\\n    if (periodEnding) {\\n      // Get all candidate ids\\n      address[] memory allCids = _candidateIds;\\n      randomBeacon.execWrapUpBeaconPeriod(lastPeriod, newPeriod);\\n      (uint256 totalDelegatingReward, uint256[] memory delegatingRewards) =\\n        _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(lastPeriod, allCids);\\n      _settleAndTransferDelegatingRewards(lastPeriod, allCids, totalDelegatingReward, delegatingRewards);\\n      _tryRecycleLockedFundsFromEmergencyExits();\\n      _recycleDeprecatedRewards();\\n\\n      ISlashIndicator slashIndicatorContract = ISlashIndicator(getContract(ContractType.SLASH_INDICATOR));\\n      slashIndicatorContract.execUpdateCreditScores(allCids, lastPeriod);\\n      address[] memory revokedCandidateIds = _syncCandidateSet(newPeriod);\\n      if (revokedCandidateIds.length > 0) {\\n        slashIndicatorContract.execResetCreditScores(revokedCandidateIds);\\n      }\\n      _currentPeriodStartAtBlock = block.number + 1;\\n    }\\n\\n    currValidatorIds = _syncValidatorSet(randomBeacon, newPeriod, nextEpoch);\\n    _revampRoles(newPeriod, nextEpoch, currValidatorIds);\\n\\n    emit WrappedUpEpoch(lastPeriod, epoch, periodEnding);\\n\\n    _periodOf[nextEpoch] = newPeriod;\\n    _lastUpdatedPeriod = newPeriod;\\n  }\\n\\n  /**\\n   * @dev This method calculate and update reward of each `validators` accordingly their fast finality voting performance\\n   * in the `epoch`. The leftover reward is added to the {_totalDeprecatedReward} and is recycled later to the\\n   * {StakingVesting} contract.\\n   *\\n   * Requirements:\\n   * - This method is only called once each epoch.\\n   */\\n  function _syncFastFinalityReward(uint256 epoch, address[] memory validatorIds) private {\\n    uint256[] memory scores = IFastFinalityTracking(getContract(ContractType.FAST_FINALITY_TRACKING))\\n      .getManyFinalityScoresById(epoch, validatorIds);\\n    uint256 divisor = scores.sum();\\n\\n    if (divisor == 0) return;\\n\\n    uint256 iReward;\\n    uint256 totalReward = _totalFastFinalityReward;\\n    uint256 totalDispensedReward = 0;\\n    uint256 length = validatorIds.length;\\n\\n    for (uint256 i; i < length; ++i) {\\n      iReward = (totalReward * scores[i]) / divisor;\\n      _fastFinalityReward[validatorIds[i]] += iReward;\\n      totalDispensedReward += iReward;\\n    }\\n\\n    _totalDeprecatedReward += (totalReward - totalDispensedReward);\\n    delete _totalFastFinalityReward;\\n  }\\n\\n  /**\\n   * @dev This loops over all current validators to:\\n   * - Update delegating reward for and calculate total delegating rewards to be sent to the staking contract,\\n   * - Distribute the reward of block producers and bridge operators to their treasury addresses,\\n   * - Update the total deprecated reward if the two previous conditions do not satisfy.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeRewardToTreasuriesAndCalculateTotalDelegatingReward(\\n    uint256 lastPeriod,\\n    address[] memory currValidatorIds\\n  ) private returns (uint256 totalDelegatingReward, uint256[] memory delegatingRewards) {\\n    address vId; // validator id\\n    address payable treasury;\\n    delegatingRewards = new uint256[](currValidatorIds.length);\\n\\n    for (uint _i; _i < currValidatorIds.length;) {\\n      vId = currValidatorIds[_i];\\n      treasury = _candidateInfo[vId].__shadowedTreasury;\\n\\n      if (!_isJailedById(vId) && !_miningRewardDeprecatedById(vId, lastPeriod)) {\\n        totalDelegatingReward += _delegatingReward[vId];\\n        delegatingRewards[_i] = _delegatingReward[vId];\\n        _distributeMiningReward(vId, treasury);\\n        _distributeFastFinalityReward(vId, treasury);\\n      } else {\\n        _totalDeprecatedReward += _miningReward[vId] + _delegatingReward[vId] + _fastFinalityReward[vId];\\n      }\\n\\n      delete _delegatingReward[vId];\\n      delete _miningReward[vId];\\n      delete _fastFinalityReward[vId];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Distributes bonus of staking vesting and mining fee for the block producer.\\n   *\\n   * Emits the `MiningRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `MiningRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _distributeMiningReward(address cid, address payable treasury) private {\\n    uint256 amount = _miningReward[cid];\\n    if (amount > 0) {\\n      if (_unsafeSendRONLimitGas(treasury, amount, DEFAULT_ADDITION_GAS)) {\\n        emit MiningRewardDistributed(cid, treasury, amount);\\n        return;\\n      }\\n\\n      emit MiningRewardDistributionFailed(cid, treasury, amount, address(this).balance);\\n    }\\n  }\\n\\n  function _distributeFastFinalityReward(address cid, address payable treasury) private {\\n    uint256 amount = _fastFinalityReward[cid];\\n    if (amount > 0) {\\n      if (_unsafeSendRONLimitGas(treasury, amount, DEFAULT_ADDITION_GAS)) {\\n        emit FastFinalityRewardDistributed(cid, treasury, amount);\\n        return;\\n      }\\n\\n      emit FastFinalityRewardDistributionFailed(cid, treasury, amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Helper function to settle rewards for delegators of `currValidatorIds` at the end of each period,\\n   * then transfer the rewards from this contract to the staking contract, in order to finalize a period.\\n   *\\n   * Emits the `StakingRewardDistributed` once the reward is distributed successfully.\\n   * Emits the `StakingRewardDistributionFailed` once the contract fails to distribute reward.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _settleAndTransferDelegatingRewards(\\n    uint256 period,\\n    address[] memory currValidatorIds,\\n    uint256 totalDelegatingReward,\\n    uint256[] memory delegatingRewards\\n  ) private {\\n    IStaking _staking = IStaking(getContract(ContractType.STAKING));\\n    if (totalDelegatingReward > 0) {\\n      if (_unsafeSendRON(payable(address(_staking)), totalDelegatingReward)) {\\n        _staking.execRecordRewards(currValidatorIds, delegatingRewards, period);\\n        emit StakingRewardDistributed(totalDelegatingReward, currValidatorIds, delegatingRewards);\\n        return;\\n      }\\n\\n      emit StakingRewardDistributionFailed(\\n        totalDelegatingReward, currValidatorIds, delegatingRewards, address(this).balance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Transfer the deprecated rewards e.g. the rewards that get deprecated when validator is slashed/maintained,\\n   * to the staking vesting contract\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   */\\n  function _recycleDeprecatedRewards() private {\\n    uint256 withdrawAmount = _totalDeprecatedReward;\\n\\n    if (withdrawAmount != 0) {\\n      address withdrawTarget = getContract(ContractType.STAKING_VESTING);\\n\\n      delete _totalDeprecatedReward;\\n\\n      (bool _success,) =\\n        withdrawTarget.call{ value: withdrawAmount }(abi.encodeWithSelector(IStakingVesting.receiveRON.selector));\\n\\n      if (_success) {\\n        emit DeprecatedRewardRecycled(withdrawTarget, withdrawAmount);\\n      } else {\\n        emit DeprecatedRewardRecycleFailed(withdrawTarget, withdrawAmount, address(this).balance);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the validator set based on the validator candidates from the Staking contract.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _syncValidatorSet(\\n    IRandomBeacon randomBeacon,\\n    uint256 newPeriod,\\n    uint256 nextEpoch\\n  ) private returns (address[] memory newValidatorIds) {\\n    newValidatorIds = randomBeacon.pickValidatorSet(nextEpoch);\\n    _setNewValidatorSet(newValidatorIds, newValidatorIds.length, newPeriod);\\n  }\\n\\n  /**\\n   * @dev Private helper function helps writing the new validator set into the contract storage.\\n   *\\n   * Emits the `ValidatorSetUpdated` event.\\n   *\\n   * Note: This method should be called once in the end of each period.\\n   *\\n   */\\n  function _setNewValidatorSet(address[] memory _newValidators, uint256 _newValidatorCount, uint256 _newPeriod) private {\\n    // Remove exceeding validators in the current set\\n    for (uint256 _i = _newValidatorCount; _i < _validatorCount;) {\\n      delete _validatorMap[_validatorIds[_i]];\\n      delete _validatorIds[_i];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // Remove flag for all validator in the current set\\n    for (uint _i; _i < _newValidatorCount;) {\\n      delete _validatorMap[_validatorIds[_i]];\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    // Update new validator set and set flag correspondingly.\\n    for (uint256 _i; _i < _newValidatorCount;) {\\n      address _newValidator = _newValidators[_i];\\n      _validatorMap[_newValidator] = EnumFlags.ValidatorFlag.Both;\\n      _validatorIds[_i] = _newValidator;\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n\\n    _validatorCount = _newValidatorCount;\\n    emit ValidatorSetUpdated(_newPeriod, _newValidators);\\n  }\\n\\n  /**\\n   * @dev Activate/Deactivate the validators from producing blocks, based on their in jail status and maintenance status.\\n   *\\n   * Requirements:\\n   * - This method is called at the end of each epoch\\n   *\\n   * Emits the `BlockProducerSetUpdated` event.\\n   * Emits the `BridgeOperatorSetUpdated` event.\\n   *\\n   */\\n  function _revampRoles(uint256 _newPeriod, uint256 _nextEpoch, address[] memory currValidatorIds) private {\\n    bool[] memory _maintainedList =\\n      IMaintenance(getContract(ContractType.MAINTENANCE)).checkManyMaintainedById(currValidatorIds, block.number + 1);\\n\\n    for (uint _i; _i < currValidatorIds.length;) {\\n      address validatorId = currValidatorIds[_i];\\n      bool emergencyExitRequested = block.timestamp <= _emergencyExitJailedTimestamp[validatorId];\\n      bool isProducerBefore = _isBlockProducerById(validatorId);\\n      bool isProducerAfter =\\n        !(_isJailedAtBlockById(validatorId, block.number + 1) || _maintainedList[_i] || emergencyExitRequested);\\n\\n      if (!isProducerBefore && isProducerAfter) {\\n        _validatorMap[validatorId] = _validatorMap[validatorId].addFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      } else if (isProducerBefore && !isProducerAfter) {\\n        _validatorMap[validatorId] = _validatorMap[validatorId].removeFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n    emit BlockProducerSetUpdated(_newPeriod, _nextEpoch, getBlockProducerIds());\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_isTrustedOrg`.\\n   */\\n  function _isTrustedOrg(address validatorId) internal view override returns (bool) {\\n    return IRoninTrustedOrganization(getContract(ContractType.RONIN_TRUSTED_ORGANIZATION)).getConsensusWeightById(\\n      validatorId\\n    ) > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9f7805ac120d2e9012016636e91724f6b0fbcd157c738d2757091af74902072f\",\"license\":\"MIT\"},\"contracts/ronin/validator/EmergencyExit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/RONTransferHelper.sol\\\";\\nimport \\\"../../interfaces/IRoninGovernanceAdmin.sol\\\";\\nimport \\\"../../interfaces/validator/IEmergencyExit.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\nimport \\\"./CandidateManagerCallback.sol\\\";\\n\\nabstract contract EmergencyExit is IEmergencyExit, RONTransferHelper, CandidateManagerCallback, CommonStorage {\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExitLockedAmount() external view returns (uint256) {\\n    return _emergencyExitLockedAmount;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function emergencyExpiryDuration() external view returns (uint256) {\\n    return _emergencyExpiryDuration;\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execRequestEmergencyExit(address cid, uint256 secLeftToRevoke) external onlyContract(ContractType.STAKING) {\\n    EmergencyExitInfo storage _info = _exitInfo[cid];\\n    if (_info.recyclingAt != 0) revert ErrAlreadyRequestedEmergencyExit();\\n\\n    uint256 revokingTimestamp = block.timestamp + secLeftToRevoke;\\n    _setRevokingTimestamp(_candidateInfo[cid], revokingTimestamp);\\n    _emergencyExitJailedTimestamp[cid] = revokingTimestamp;\\n\\n    uint256 deductedAmount = IStaking(msg.sender).execDeductStakingAmount(cid, _emergencyExitLockedAmount);\\n    if (deductedAmount > 0) {\\n      uint256 recyclingAt = block.timestamp + _emergencyExpiryDuration;\\n      _lockedConsensusList.push(cid);\\n      _info.lockedAmount = deductedAmount;\\n      _info.recyclingAt = recyclingAt;\\n      IRoninGovernanceAdmin(_getAdmin()).createEmergencyExitPoll(\\n        cid, _candidateInfo[cid].__shadowedTreasury, block.timestamp, recyclingAt\\n      );\\n    }\\n    emit EmergencyExitRequested(cid, deductedAmount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExitLockedAmount(uint256 amount) external onlyAdmin {\\n    _setEmergencyExitLockedAmount(amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function setEmergencyExpiryDuration(uint256 duration) external onlyAdmin {\\n    _setEmergencyExpiryDuration(duration);\\n  }\\n\\n  /**\\n   * @inheritdoc IEmergencyExit\\n   */\\n  function execReleaseLockedFundForEmergencyExitRequest(address cid, address payable recipient) external onlyAdmin {\\n    if (_exitInfo[cid].recyclingAt == 0) {\\n      revert ErrLockedFundReleaseInfoNotFound(cid);\\n    }\\n\\n    uint256 length = _lockedConsensusList.length;\\n    uint256 index = length;\\n\\n    for (uint i; i < length;) {\\n      if (_lockedConsensusList[i] == cid) {\\n        index = i;\\n        break;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // The locked amount might be recycled\\n    if (index == length) {\\n      revert ErrLockedFundMightBeRecycled(cid);\\n    }\\n\\n    uint256 amount = _exitInfo[cid].lockedAmount;\\n    if (amount > 0) {\\n      delete _exitInfo[cid];\\n      if (length > 1) {\\n        _lockedConsensusList[index] = _lockedConsensusList[length - 1];\\n      }\\n      _lockedConsensusList.pop();\\n\\n      _lockedFundReleased[cid] = true;\\n      if (_unsafeSendRONLimitGas(recipient, amount, DEFAULT_ADDITION_GAS)) {\\n        emit EmergencyExitLockedFundReleased(cid, recipient, amount);\\n        return;\\n      }\\n\\n      emit EmergencyExitLockedFundReleasingFailed(cid, recipient, amount, address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tries to recycle the locked funds from emergency exit requests.\\n   */\\n  function _tryRecycleLockedFundsFromEmergencyExits() internal {\\n    uint256 length = _lockedConsensusList.length;\\n\\n    uint256 i;\\n    address addr;\\n    EmergencyExitInfo storage _info;\\n\\n    while (i < length) {\\n      addr = _lockedConsensusList[i];\\n      _info = _exitInfo[addr];\\n\\n      if (_info.recyclingAt <= block.timestamp) {\\n        _totalDeprecatedReward += _info.lockedAmount;\\n\\n        delete _exitInfo[addr];\\n        if (--length > 0) {\\n          _lockedConsensusList[i] = _lockedConsensusList[length];\\n        }\\n        _lockedConsensusList.pop();\\n        continue;\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_emergencyExitLockedFundReleased`.\\n   */\\n  function _emergencyExitLockedFundReleased(address cid) internal virtual override returns (bool) {\\n    return _lockedFundReleased[cid];\\n  }\\n\\n  /**\\n   * @dev Override `CandidateManager-_removeCandidate`.\\n   */\\n  function _removeCandidate(address cid) internal override {\\n    delete _lockedFundReleased[cid];\\n    super._removeCandidate(cid);\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr)\\n    internal\\n    view\\n    virtual\\n    override(CandidateManager, CommonStorage)\\n    returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs)\\n    internal\\n    view\\n    virtual\\n    override(CandidateManager, CommonStorage)\\n    returns (address[] memory);\\n\\n  /// @dev See {RoninValidatorSet-__cid2cssBatch}\\n  function __cid2cssBatch(address[] memory cids)\\n    internal\\n    view\\n    virtual\\n    override(CandidateManager, ValidatorInfoStorageV2)\\n    returns (TConsensus[] memory);\\n\\n  /**\\n   * @dev See `setEmergencyExitLockedAmount.\\n   */\\n  function _setEmergencyExitLockedAmount(uint256 amount) internal {\\n    _emergencyExitLockedAmount = amount;\\n    emit EmergencyExitLockedAmountUpdated(amount);\\n  }\\n\\n  /**\\n   * @dev See `setEmergencyExpiryDuration`.\\n   */\\n  function _setEmergencyExpiryDuration(uint256 duration) internal {\\n    _emergencyExpiryDuration = duration;\\n    emit EmergencyExpiryDurationUpdated(duration);\\n  }\\n}\\n\",\"keccak256\":\"0x228c71765c9cedc625f04b0d050c7e3ac88f8058992fcccdb794300557ffdd2c\",\"license\":\"MIT\"},\"contracts/ronin/validator/RoninValidatorSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/validator/IRoninValidatorSet.sol\\\";\\nimport \\\"./CoinbaseExecution.sol\\\";\\nimport \\\"./SlashingExecution.sol\\\";\\n\\ncontract RoninValidatorSet is Initializable, CoinbaseExecution, SlashingExecution {\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  fallback() external payable {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Initializes the contract storage.\\n   */\\n  function initialize(\\n    address __slashIndicatorContract,\\n    address __stakingContract,\\n    address __stakingVestingContract,\\n    address __maintenanceContract,\\n    address __roninTrustedOrganizationContract,\\n    address, /* __bridgeTrackingContract */\\n    uint256, /* __maxValidatorNumber */\\n    uint256 __maxValidatorCandidate,\\n    uint256, /* __maxPrioritizedValidatorNumber */\\n    uint256 __minEffectiveDaysOnwards,\\n    uint256 __numberOfBlocksInEpoch,\\n    // __emergencyExitConfigs[0]: emergencyExitLockedAmount\\n    // __emergencyExitConfigs[1]: emergencyExpiryDuration\\n    uint256[2] calldata __emergencyExitConfigs\\n  ) external initializer {\\n    _setContract(ContractType.SLASH_INDICATOR, __slashIndicatorContract);\\n    _setContract(ContractType.STAKING, __stakingContract);\\n    _setContract(ContractType.STAKING_VESTING, __stakingVestingContract);\\n    _setContract(ContractType.MAINTENANCE, __maintenanceContract);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, __roninTrustedOrganizationContract);\\n\\n    _setMaxValidatorCandidate(__maxValidatorCandidate);\\n    _setMinEffectiveDaysOnwards(__minEffectiveDaysOnwards);\\n    _setEmergencyExitLockedAmount(__emergencyExitConfigs[0]);\\n    _setEmergencyExpiryDuration(__emergencyExitConfigs[1]);\\n    _numberOfBlocksInEpoch = __numberOfBlocksInEpoch;\\n  }\\n\\n  function initializeV2() external reinitializer(2) {\\n    _setContract(ContractType.STAKING, ______deprecatedStakingContract);\\n    _setContract(ContractType.MAINTENANCE, ______deprecatedMaintenance);\\n    _setContract(ContractType.SLASH_INDICATOR, ______deprecatedSlashIndicator);\\n    _setContract(ContractType.STAKING_VESTING, ______deprecatedStakingVesting);\\n    _setContract(ContractType.RONIN_TRUSTED_ORGANIZATION, ______deprecatedTrustedOrg);\\n\\n    delete ______deprecatedStakingContract;\\n    delete ______deprecatedMaintenance;\\n    delete ______deprecatedSlashIndicator;\\n    delete ______deprecatedStakingVesting;\\n    delete ______deprecatedBridgeTracking;\\n    delete ______deprecatedTrustedOrg;\\n  }\\n\\n  function initializeV3(address fastFinalityTrackingContract) external reinitializer(3) {\\n    _setContract(ContractType.FAST_FINALITY_TRACKING, fastFinalityTrackingContract);\\n  }\\n\\n  function initializeV4(address profileContract) external reinitializer(4) {\\n    _setContract(ContractType.PROFILE, profileContract);\\n  }\\n\\n  /**\\n   * @dev Only receives RON from staking vesting contract (for topping up bonus), and from staking contract (for transferring\\n   * deducting amount on slashing).\\n   */\\n  function _fallback() internal view {\\n    if (msg.sender != getContract(ContractType.STAKING_VESTING) && msg.sender != getContract(ContractType.STAKING)) {\\n      revert ErrUnauthorizedReceiveRON();\\n    }\\n  }\\n\\n  /**\\n   * @dev Convert consensus address to corresponding id from the Profile contract.\\n   */\\n  function __css2cid(TConsensus consensusAddr) internal view override(EmergencyExit, CommonStorage) returns (address) {\\n    return IProfile(getContract(ContractType.PROFILE)).getConsensus2Id(consensusAddr);\\n  }\\n\\n  /**\\n   * @dev Convert many consensus addresses to corresponding ids from the Profile contract.\\n   */\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs)\\n    internal\\n    view\\n    override(EmergencyExit, CommonStorage)\\n    returns (address[] memory)\\n  {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyConsensus2Id(consensusAddrs);\\n  }\\n\\n  /**\\n   * @dev Convert many id to corresponding consensus addresses from the Profile contract.\\n   */\\n  function __cid2cssBatch(address[] memory cids)\\n    internal\\n    view\\n    override(EmergencyExit, ValidatorInfoStorageV2)\\n    returns (TConsensus[] memory)\\n  {\\n    return IProfile(getContract(ContractType.PROFILE)).getManyId2Consensus(cids);\\n  }\\n}\\n\",\"keccak256\":\"0x480c6168130d984f8467493601b692d7effcc509361c4a61fac19ae1e1686307\",\"license\":\"MIT\"},\"contracts/ronin/validator/SlashingExecution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../interfaces/validator/ISlashingExecution.sol\\\";\\nimport \\\"../../interfaces/staking/IStaking.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\nimport { HasSlashIndicatorDeprecated, HasStakingDeprecated } from \\\"../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"./storage-fragments/CommonStorage.sol\\\";\\n\\nabstract contract SlashingExecution is\\n  ISlashingExecution,\\n  HasContracts,\\n  HasSlashIndicatorDeprecated,\\n  HasStakingDeprecated,\\n  CommonStorage\\n{\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execSlash(\\n    address validatorId,\\n    uint256 newJailedUntil,\\n    uint256 slashAmount,\\n    bool cannotBailout\\n  ) external override onlyContract(ContractType.SLASH_INDICATOR) {\\n    uint256 period = currentPeriod();\\n    _miningRewardDeprecatedAtPeriod[validatorId][period] = true;\\n\\n    _totalDeprecatedReward += _miningReward[validatorId] + _delegatingReward[validatorId];\\n\\n    delete _miningReward[validatorId];\\n    delete _delegatingReward[validatorId];\\n\\n    _blockProducerJailedBlock[validatorId] = Math.max(newJailedUntil, _blockProducerJailedBlock[validatorId]);\\n\\n    if (slashAmount > 0) {\\n      uint256 _actualAmount =\\n        IStaking(getContract(ContractType.STAKING)).execDeductStakingAmount(validatorId, slashAmount);\\n      _totalDeprecatedReward += _actualAmount;\\n    }\\n\\n    if (cannotBailout) {\\n      _cannotBailoutUntilBlock[validatorId] = Math.max(newJailedUntil, _cannotBailoutUntilBlock[validatorId]);\\n    }\\n\\n    emit ValidatorPunished(validatorId, period, _blockProducerJailedBlock[validatorId], slashAmount, true, false);\\n  }\\n\\n  /**\\n   * @inheritdoc ISlashingExecution\\n   */\\n  function execBailOut(\\n    address validatorId,\\n    uint256 period\\n  ) external override onlyContract(ContractType.SLASH_INDICATOR) {\\n    if (block.number <= _cannotBailoutUntilBlock[validatorId]) revert ErrCannotBailout(validatorId);\\n\\n    // Note: Removing rewards of validator in `bailOut` function is not needed, since the rewards have been\\n    // removed previously in the `slash` function.\\n    _miningRewardBailoutCutOffAtPeriod[validatorId][period] = true;\\n    _miningRewardDeprecatedAtPeriod[validatorId][period] = false;\\n    _blockProducerJailedBlock[validatorId] = block.number - 1;\\n\\n    emit ValidatorUnjailed(validatorId, period);\\n  }\\n}\\n\",\"keccak256\":\"0xa3fc4fb7aed2ac88245013dc09bf1c8a754b851e7a789958f38af4c098423c79\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/CommonStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/ICommonInfo.sol\\\";\\nimport \\\"./JailingStorage.sol\\\";\\nimport \\\"./TimingStorage.sol\\\";\\nimport \\\"./ValidatorInfoStorageV2.sol\\\";\\n\\nabstract contract CommonStorage is ICommonInfo, TimingStorage, JailingStorage, ValidatorInfoStorageV2 {\\n  /// @dev Mapping from consensus address => pending reward from producing block\\n  mapping(address => uint256) internal _miningReward;\\n  /// @dev Mapping from consensus address => pending reward from delegating\\n  mapping(address => uint256) internal _delegatingReward;\\n\\n  /// @dev The total reward for fast finality\\n  uint256 internal _totalFastFinalityReward;\\n  /// @dev Mapping from consensus address => pending reward for fast finality\\n  mapping(address => uint256) internal _fastFinalityReward;\\n\\n  /// @dev The deprecated reward that has not been withdrawn by admin\\n  uint256 internal _totalDeprecatedReward;\\n\\n  /// @dev The amount of RON to lock from a consensus address.\\n  uint256 internal _emergencyExitLockedAmount;\\n  /// @dev The duration that an emergency request is expired and the fund will be recycled.\\n  uint256 internal _emergencyExpiryDuration;\\n  /// @dev The address list of consensus addresses that being locked fund.\\n  address[] internal _lockedConsensusList;\\n  /// @dev Mapping from consensus => request exist info\\n  mapping(address => EmergencyExitInfo) internal _exitInfo;\\n  /// @dev Mapping from consensus => flag indicating whether the locked fund is released\\n  mapping(address => bool) internal _lockedFundReleased;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[44] private ______gap;\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function getEmergencyExitInfo(TConsensus consensus) external view override returns (EmergencyExitInfo memory _info) {\\n    _info = _exitInfo[__css2cid(consensus)];\\n    if (_info.recyclingAt == 0) revert NonExistentRecyclingInfo();\\n  }\\n\\n  /**\\n   * @inheritdoc ICommonInfo\\n   */\\n  function totalDeprecatedReward() external view override returns (uint256) {\\n    return _totalDeprecatedReward;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block)\\n    public\\n    view\\n    virtual\\n    override(ITimingInfo, JailingStorage, TimingStorage)\\n    returns (uint256)\\n  {\\n    return TimingStorage.epochOf(_block);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override(ITimingInfo, JailingStorage, TimingStorage) returns (uint256) {\\n    return TimingStorage.currentPeriod();\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr)\\n    internal\\n    view\\n    virtual\\n    override(JailingStorage, ValidatorInfoStorageV2)\\n    returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs)\\n    internal\\n    view\\n    virtual\\n    override(JailingStorage, ValidatorInfoStorageV2)\\n    returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6f395756f66c44f0c8566096ab46af6db67dc2eb5fc95e55b4724b1611f622d0\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/JailingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../interfaces/validator/info-fragments/IJailingInfo.sol\\\";\\n\\nabstract contract JailingStorage is IJailingInfo {\\n  /// @dev Mapping from candidate id => period number => block producer has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardDeprecatedAtPeriod;\\n  /// @dev Mapping from candidate id => period number => whether the block producer get cut off reward, due to bailout.\\n  mapping(address => mapping(uint256 => bool)) internal _miningRewardBailoutCutOffAtPeriod;\\n  /// @dev Mapping from candidate id => period number => block operator has no pending reward.\\n  mapping(address => mapping(uint256 => bool)) internal ______deprecatedBridgeRewardDeprecatedAtPeriod;\\n\\n  /// @dev Mapping from candidate id => the last block that the block producer is jailed.\\n  mapping(address => uint256) internal _blockProducerJailedBlock;\\n  /// @dev Mapping from candidate id => the last timestamp that the bridge operator is jailed.\\n  mapping(address => uint256) internal _emergencyExitJailedTimestamp;\\n  /// @dev Mapping from candidate id => the last block that the block producer cannot bailout.\\n  mapping(address => uint256) internal _cannotBailoutUntilBlock;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[48] private ______gap;\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailed(TConsensus consensus) external view override returns (bool) {\\n    address candidateId = __css2cid(consensus);\\n    return _isJailedAtBlockById(candidateId, block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkJailedAtBlock(TConsensus addr, uint256 blockNum) external view override returns (bool) {\\n    address candidateId = __css2cid(addr);\\n    return _isJailedAtBlockById(candidateId, blockNum);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeft(TConsensus consensus)\\n    external\\n    view\\n    override\\n    returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_)\\n  {\\n    return _getJailedTimeLeftAtBlockById(__css2cid(consensus), block.number);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function getJailedTimeLeftAtBlock(\\n    TConsensus consensus,\\n    uint256 _blockNum\\n  ) external view override returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_) {\\n    return _getJailedTimeLeftAtBlockById(__css2cid(consensus), _blockNum);\\n  }\\n\\n  function _getJailedTimeLeftAtBlockById(\\n    address candidateId,\\n    uint256 blockNum\\n  ) internal view returns (bool isJailed_, uint256 blockLeft_, uint256 epochLeft_) {\\n    uint256 jailedBlock = _blockProducerJailedBlock[candidateId];\\n    if (jailedBlock < blockNum) {\\n      return (false, 0, 0);\\n    }\\n\\n    isJailed_ = true;\\n    blockLeft_ = jailedBlock - blockNum + 1;\\n    epochLeft_ = epochOf(jailedBlock) - epochOf(blockNum) + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkManyJailed(TConsensus[] calldata consensusList) external view override returns (bool[] memory) {\\n    return _checkManyJailedById(__css2cidBatch(consensusList));\\n  }\\n\\n  function checkManyJailedById(address[] calldata candidateIds) external view override returns (bool[] memory) {\\n    return _checkManyJailedById(candidateIds);\\n  }\\n\\n  function _checkManyJailedById(address[] memory candidateIds) internal view returns (bool[] memory result) {\\n    result = new bool[](candidateIds.length);\\n    for (uint256 i; i < candidateIds.length;) {\\n      result[i] = _isJailedById(candidateIds[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecated(TConsensus consensus) external view override returns (bool) {\\n    uint256 period = currentPeriod();\\n    return _miningRewardDeprecatedById(__css2cid(consensus), period);\\n  }\\n\\n  /**\\n   * @inheritdoc IJailingInfo\\n   */\\n  function checkMiningRewardDeprecatedAtPeriod(\\n    TConsensus consensus,\\n    uint256 period\\n  ) external view override returns (bool) {\\n    return _miningRewardDeprecatedById(__css2cid(consensus), period);\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-epochOf`\\n   */\\n  function epochOf(uint256 _block) public view virtual returns (uint256);\\n\\n  /**\\n   * @dev See `ITimingInfo-currentPeriod`\\n   */\\n  function currentPeriod() public view virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) during the current period.\\n   */\\n  function _isJailedById(address validatorId) internal view returns (bool) {\\n    return _isJailedAtBlockById(validatorId, block.number);\\n  }\\n\\n  /**\\n   * @dev Returns whether the reward of the validator is put in jail (cannot join the set of validators) at a specific block.\\n   */\\n  function _isJailedAtBlockById(address validatorId, uint256 blockNum) internal view returns (bool) {\\n    return blockNum <= _blockProducerJailedBlock[validatorId];\\n  }\\n\\n  /**\\n   * @dev Returns whether the block producer has no pending reward in that period.\\n   */\\n  function _miningRewardDeprecatedById(address validatorId, uint256 period) internal view returns (bool) {\\n    return _miningRewardDeprecatedAtPeriod[validatorId][period];\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xd8aa63d3b156f7ed401344d4cdf27b666b20638292c0ae6b8cb4e46ef6b8bff5\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/TimingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../extensions/consumers/GlobalConfigConsumer.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/ITimingInfo.sol\\\";\\n\\nabstract contract TimingStorage is ITimingInfo, GlobalConfigConsumer {\\n  /// @dev The number of blocks in a epoch\\n  uint256 internal _numberOfBlocksInEpoch;\\n  /// @dev The last updated block\\n  uint256 internal _lastUpdatedBlock;\\n  /// @dev The last updated period\\n  uint256 internal _lastUpdatedPeriod;\\n  /// @dev The starting block of the last updated period\\n  uint256 internal _currentPeriodStartAtBlock;\\n\\n  /// @dev Mapping from epoch index => period index\\n  mapping(uint256 => uint256) internal _periodOf;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[49] private ______gap;\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function getLastUpdatedBlock() external view override returns (uint256) {\\n    return _lastUpdatedBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochOf(uint256 _block) public view virtual override returns (uint256) {\\n    return _block / _numberOfBlocksInEpoch + 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function tryGetPeriodOfEpoch(uint256 _epoch) external view returns (bool _filled, uint256 _periodNumber) {\\n    return (_epoch <= epochOf(block.number) || _periodOf[_epoch] > 0, _periodOf[_epoch]);\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function isPeriodEnding() external view override returns (bool) {\\n    return _isPeriodEnding(_computePeriod(block.timestamp));\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function epochEndingAt(uint256 _block) public view virtual override returns (bool) {\\n    return _block % _numberOfBlocksInEpoch == _numberOfBlocksInEpoch - 1;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriod() public view virtual override returns (uint256) {\\n    return _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function currentPeriodStartAtBlock() public view override returns (uint256) {\\n    return _currentPeriodStartAtBlock;\\n  }\\n\\n  /**\\n   * @inheritdoc ITimingInfo\\n   */\\n  function numberOfBlocksInEpoch() public view virtual override returns (uint256 _numberOfBlocks) {\\n    return _numberOfBlocksInEpoch;\\n  }\\n\\n  /**\\n   * @dev See `ITimingInfo-isPeriodEnding`\\n   */\\n  function _isPeriodEnding(uint256 _newPeriod) internal view virtual returns (bool) {\\n    return _newPeriod > _lastUpdatedPeriod;\\n  }\\n\\n  /**\\n   * @dev Returns the calculated period.\\n   */\\n  function _computePeriod(uint256 _timestamp) internal pure returns (uint256) {\\n    return _timestamp / PERIOD_DURATION;\\n  }\\n}\\n\",\"keccak256\":\"0xc545f119b8b8978d793b62f2495dc2d49c3f416791459b9833bdc65f4dae8e7f\",\"license\":\"MIT\"},\"contracts/ronin/validator/storage-fragments/ValidatorInfoStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../../libraries/EnumFlags.sol\\\";\\nimport { HasTrustedOrgDeprecated } from \\\"../../../utils/DeprecatedSlots.sol\\\";\\nimport \\\"../../../extensions/collections/HasContracts.sol\\\";\\nimport \\\"../../../interfaces/validator/info-fragments/IValidatorInfoV2.sol\\\";\\nimport { IProfile } from \\\"../../../interfaces/IProfile.sol\\\";\\nimport { IRandomBeacon } from \\\"../../../interfaces/random-beacon/IRandomBeacon.sol\\\";\\nimport { TConsensus } from \\\"../../../udvts/Types.sol\\\";\\n\\nabstract contract ValidatorInfoStorageV2 is IValidatorInfoV2, HasContracts, HasTrustedOrgDeprecated {\\n  using EnumFlags for EnumFlags.ValidatorFlag;\\n\\n  /// @dev The maximum number of validator.\\n  uint256 internal __deprecatedMaxValidatorNumber;\\n\\n  /// @dev The total of validators\\n  uint256 internal _validatorCount;\\n  /// @dev Mapping from validator index => validator id address\\n  mapping(uint256 => address) internal _validatorIds;\\n  /// @dev Mapping from validator id => flag indicating the validator ability: producing block, operating bridge\\n  mapping(address => EnumFlags.ValidatorFlag) internal _validatorMap;\\n  /// @dev The number of slot that is reserved for prioritized validators\\n  uint256 internal __deprecatedMaxPrioritizedValidatorNumber;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[50] private ______gap;\\n\\n  function validatorCount() external view returns (uint256) {\\n    return _validatorCount;\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getValidators() public view override returns (TConsensus[] memory consensusList) {\\n    return __cid2cssBatch(getValidatorIds());\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getValidatorIds() public view override returns (address[] memory cids) {\\n    cids = new address[](_validatorCount);\\n    address iValidator;\\n    for (uint i; i < cids.length;) {\\n      iValidator = _validatorIds[i];\\n      cids[i] = iValidator;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getBlockProducers() public view override returns (TConsensus[] memory consensusList) {\\n    return __cid2cssBatch(getBlockProducerIds());\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function getBlockProducerIds() public view override returns (address[] memory cids) {\\n    cids = new address[](_validatorCount);\\n    uint256 count = 0;\\n    for (uint i; i < cids.length;) {\\n      address validatorId = _validatorIds[i];\\n      if (_isBlockProducerById(validatorId)) {\\n        cids[count++] = validatorId;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      mstore(cids, count)\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function isBlockProducer(TConsensus consensusAddr) public view override returns (bool) {\\n    return _isBlockProducerById(__css2cid(consensusAddr));\\n  }\\n\\n  function isBlockProducerById(address id) external view override returns (bool) {\\n    return _isBlockProducerById(id);\\n  }\\n\\n  function _isBlockProducerById(address id) internal view returns (bool) {\\n    return _validatorMap[id].hasFlag(EnumFlags.ValidatorFlag.BlockProducer);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function totalBlockProducer() external view returns (uint256 total) {\\n    unchecked {\\n      for (uint i; i < _validatorCount; i++) {\\n        if (_isBlockProducerById(_validatorIds[i])) {\\n          total++;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function maxValidatorNumber() external view override returns (uint256 _maximumValidatorNumber) {\\n    return IRandomBeacon(getContract(ContractType.RANDOM_BEACON)).getValidatorThreshold(IRandomBeacon.ValidatorType.All);\\n  }\\n\\n  /**\\n   * @inheritdoc IValidatorInfoV2\\n   */\\n  function maxPrioritizedValidatorNumber() external view override returns (uint256 _maximumPrioritizedValidatorNumber) {\\n    return IRandomBeacon(getContract(ContractType.RANDOM_BEACON)).getValidatorThreshold(\\n      IRandomBeacon.ValidatorType.Governing\\n    );\\n  }\\n\\n  /// @dev See {RoninValidatorSet-__css2cid}\\n  function __css2cid(TConsensus consensusAddr) internal view virtual returns (address);\\n\\n  /// @dev See {RoninValidatorSet-__css2cidBatch}\\n  function __css2cidBatch(TConsensus[] memory consensusAddrs) internal view virtual returns (address[] memory);\\n\\n  /// @dev See {RoninValidatorSet-__cid2cssBatch}\\n  function __cid2cssBatch(address[] memory cids) internal view virtual returns (TConsensus[] memory);\\n}\\n\",\"keccak256\":\"0x17d322239b32e88a4195bf04527a624a80a4aeadc55ee497e782572afd40c6ac\",\"license\":\"MIT\"},\"contracts/udvts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ntype TPoolId is address;\\n\\ntype TConsensus is address;\\n\\nusing { TPoolIdEq as == } for TPoolId global;\\nusing { TConsensusEq as == } for TConsensus global;\\n\\nfunction TPoolIdEq(TPoolId a, TPoolId b) pure returns (bool) {\\n  return TPoolId.unwrap(a) == TPoolId.unwrap(b);\\n}\\n\\nfunction TConsensusEq(TConsensus a, TConsensus b) pure returns (bool) {\\n  return TConsensus.unwrap(a) == TConsensus.unwrap(b);\\n}\\n\",\"keccak256\":\"0x48a81c14acbe613ff334674f913cf287eb14d52134abba5a7e44ebaba3b3adfc\",\"license\":\"MIT\"},\"contracts/utils/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ContractType } from \\\"./ContractType.sol\\\";\\nimport { RoleAccess } from \\\"./RoleAccess.sol\\\";\\n\\nerror ErrSyncTooFarPeriod(uint256 period, uint256 latestRewardedPeriod);\\n\\n/**\\n * @dev Error raised when a bridge operator update operation fails.\\n * @param bridgeOperator The address of the bridge operator that failed to update.\\n */\\nerror ErrBridgeOperatorUpdateFailed(address bridgeOperator);\\n\\n/**\\n * @dev Error thrown when an address is expected to be an already created externally owned account (EOA).\\n * This error indicates that the provided address is invalid for certain contract operations that require already created EOA.\\n */\\nerror ErrAddressIsNotCreatedEOA(address addr, bytes32 codehash);\\n\\n/**\\n * @dev Error thrown when attempting to add a bridge operator that already exists in the contract.\\n * This error indicates that the provided bridge operator address is already registered as a bridge operator in the contract.\\n */\\nerror ErrBridgeOperatorAlreadyExisted(address bridgeOperator);\\n\\n/**\\n * @dev The error indicating an unsupported interface.\\n * @param interfaceId The bytes4 interface identifier that is not supported.\\n * @param addr The address where the unsupported interface was encountered.\\n */\\nerror ErrUnsupportedInterface(bytes4 interfaceId, address addr);\\n\\n/**\\n * @dev Error thrown when the return data from a callback function is invalid.\\n * @param callbackFnSig The signature of the callback function that returned invalid data.\\n * @param register The address of the register where the callback function was invoked.\\n * @param returnData The invalid return data received from the callback function.\\n */\\nerror ErrInvalidReturnData(bytes4 callbackFnSig, address register, bytes returnData);\\n\\n/**\\n * @dev Error of set to non-contract.\\n */\\nerror ErrZeroCodeContract(address addr);\\n\\n/**\\n * @dev Error indicating that arguments are invalid.\\n */\\nerror ErrInvalidArguments(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that given address is null when it should not.\\n */\\nerror ErrZeroAddress(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the provided threshold is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that the invalid threshold applies to.\\n */\\nerror ErrInvalidThreshold(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a function can only be called by the contract itself.\\n * @param msgSig The function signature (bytes4) that can only be called by the contract itself.\\n */\\nerror ErrOnlySelfCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n * @param expectedRole The role required to perform the function.\\n */\\nerror ErrUnauthorized(bytes4 msgSig, RoleAccess expectedRole);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4) that the caller is unauthorized to perform.\\n */\\nerror ErrUnauthorizedCall(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the caller is unauthorized to perform a specific function.\\n * @param msgSig The function signature (bytes4).\\n * @param expectedContractType The contract type required to perform the function.\\n * @param actual The actual address that called to the function.\\n */\\nerror ErrUnexpectedInternalCall(bytes4 msgSig, ContractType expectedContractType, address actual);\\n\\n/**\\n * @dev Error indicating that an array is empty when it should contain elements.\\n */\\nerror ErrEmptyArray();\\n\\n/**\\n * @dev Error indicating a mismatch in the length of input parameters or arrays for a specific function.\\n * @param msgSig The function signature (bytes4) that has a length mismatch.\\n */\\nerror ErrLengthMismatch(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a proxy call to an external contract has failed.\\n * @param msgSig The function signature (bytes4) of the proxy call that failed.\\n * @param extCallSig The function signature (bytes4) of the external contract call that failed.\\n */\\nerror ErrProxyCallFailed(bytes4 msgSig, bytes4 extCallSig);\\n\\n/**\\n * @dev Error indicating that a function tried to call a precompiled contract that is not allowed.\\n * @param msgSig The function signature (bytes4) that attempted to call a precompiled contract.\\n */\\nerror ErrCallPrecompiled(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a native token transfer has failed.\\n * @param msgSig The function signature (bytes4) of the token transfer that failed.\\n */\\nerror ErrNativeTransferFailed(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that an order is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid order.\\n */\\nerror ErrInvalidOrder(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the chain ID is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid chain ID.\\n * @param actual Current chain ID that executing function.\\n * @param expected Expected chain ID required for the tx to success.\\n */\\nerror ErrInvalidChainId(bytes4 msgSig, uint256 actual, uint256 expected);\\n\\n/**\\n * @dev Error indicating that a vote type is not supported.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an unsupported vote type.\\n */\\nerror ErrUnsupportedVoteType(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that the proposal nonce is invalid.\\n * @param msgSig The function signature (bytes4) of the operation that encountered an invalid proposal nonce.\\n */\\nerror ErrInvalidProposalNonce(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a voter has already voted.\\n * @param voter The address of the voter who has already voted.\\n */\\nerror ErrAlreadyVoted(address voter);\\n\\n/**\\n * @dev Error indicating that a signature is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid signature.\\n */\\nerror ErrInvalidSignatures(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a relay call has failed.\\n * @param msgSig The function signature (bytes4) of the relay call that failed.\\n */\\nerror ErrRelayFailed(bytes4 msgSig);\\n/**\\n * @dev Error indicating that a vote weight is invalid for a specific function signature.\\n * @param msgSig The function signature (bytes4) that encountered an invalid vote weight.\\n */\\nerror ErrInvalidVoteWeight(bytes4 msgSig);\\n\\n/**\\n * @dev Error indicating that a query was made for an outdated bridge operator set.\\n */\\nerror ErrQueryForOutdatedBridgeOperatorSet();\\n\\n/**\\n * @dev Error indicating that a request is invalid.\\n */\\nerror ErrInvalidRequest();\\n\\n/**\\n * @dev Error indicating that a token standard is invalid.\\n */\\nerror ErrInvalidTokenStandard();\\n\\n/**\\n * @dev Error indicating that a token is not supported.\\n */\\nerror ErrUnsupportedToken();\\n\\n/**\\n * @dev Error indicating that a receipt kind is invalid.\\n */\\nerror ErrInvalidReceiptKind();\\n\\n/**\\n * @dev Error indicating that a receipt is invalid.\\n */\\nerror ErrInvalidReceipt();\\n\\n/**\\n * @dev Error indicating that an address is not payable.\\n */\\nerror ErrNonpayableAddress(address);\\n\\n/**\\n * @dev Error indicating that the period is already processed, i.e. scattered reward.\\n */\\nerror ErrPeriodAlreadyProcessed(uint256 requestingPeriod, uint256 latestPeriod);\\n\\n/**\\n * @dev Error thrown when an invalid vote hash is provided.\\n */\\nerror ErrInvalidVoteHash();\\n\\n/**\\n * @dev Error thrown when querying for an empty vote.\\n */\\nerror ErrQueryForEmptyVote();\\n\\n/**\\n * @dev Error thrown when querying for an expired vote.\\n */\\nerror ErrQueryForExpiredVote();\\n\\n/**\\n * @dev Error thrown when querying for a non-existent vote.\\n */\\nerror ErrQueryForNonExistentVote();\\n\\n/**\\n * @dev Error indicating that the method is only called once per block.\\n */\\nerror ErrOncePerBlock();\\n\\n/**\\n * @dev Error of method caller must be coinbase\\n */\\nerror ErrCallerMustBeCoinbase();\\n\",\"keccak256\":\"0x7e228d0dbe377086fb2f7438b1e79b4e30b4eeb0225036b90a33effc5af06197\",\"license\":\"MIT\"},\"contracts/utils/ContractType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum ContractType {\\n  /*  0 */\\n  UNKNOWN,\\n  /*  1 */\\n  PAUSE_ENFORCER,\\n  /*  2 */\\n  BRIDGE,\\n  /*  3 */\\n  BRIDGE_TRACKING,\\n  /*  4 */\\n  GOVERNANCE_ADMIN,\\n  /*  5 */\\n  MAINTENANCE,\\n  /*  6 */\\n  SLASH_INDICATOR,\\n  /*  7 */\\n  STAKING_VESTING,\\n  /*  8 */\\n  VALIDATOR,\\n  /*  9 */\\n  STAKING,\\n  /* 10 */\\n  RONIN_TRUSTED_ORGANIZATION,\\n  /* 11 */\\n  BRIDGE_MANAGER,\\n  /* 12 */\\n  BRIDGE_SLASH,\\n  /* 13 */\\n  BRIDGE_REWARD,\\n  /* 14 */\\n  FAST_FINALITY_TRACKING,\\n  /* 15 */\\n  PROFILE,\\n  /* 16 */\\n  RANDOM_BEACON\\n}\\n\",\"keccak256\":\"0x2ef1b8fcaa991f1d856ca67d19e8ac1576319c03c874cedcc6a7da1860d65a78\",\"license\":\"MIT\"},\"contracts/utils/DeprecatedSlots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Deprecated Contracts\\n * @dev These abstract contracts are deprecated and should not be used in new implementations.\\n * They provide functionality related to various aspects of a smart contract but have been marked\\n * as deprecated to indicate that they are no longer actively maintained or recommended for use.\\n * The purpose of these contracts is to preserve the slots for already deployed contracts.\\n */\\ncontract HasSlashIndicatorDeprecated {\\n  /// @custom:deprecated Previously `_slashIndicatorContract` (non-zero value)\\n  address internal ______deprecatedSlashIndicator;\\n}\\n\\ncontract HasStakingVestingDeprecated {\\n  /// @custom:deprecated Previously `_stakingVestingContract` (non-zero value)\\n  address internal ______deprecatedStakingVesting;\\n}\\n\\ncontract HasBridgeDeprecated {\\n  /// @custom:deprecated Previously `_bridgeContract` (non-zero value)\\n  address internal ______deprecatedBridge;\\n}\\n\\ncontract HasValidatorDeprecated {\\n  /// @custom:deprecated Previously `_validatorContract` (non-zero value)\\n  address internal ______deprecatedValidator;\\n}\\n\\ncontract HasStakingDeprecated {\\n  /// @custom:deprecated Previously `_stakingContract` (non-zero value)\\n  address internal ______deprecatedStakingContract;\\n}\\n\\ncontract HasMaintenanceDeprecated {\\n  /// @custom:deprecated Previously `_maintenanceContract` (non-zero value)\\n  address internal ______deprecatedMaintenance;\\n}\\n\\ncontract HasTrustedOrgDeprecated {\\n  /// @custom:deprecated Previously `_trustedOrgContract` (non-zero value)\\n  address internal ______deprecatedTrustedOrg;\\n}\\n\\ncontract HasGovernanceAdminDeprecated {\\n  /// @custom:deprecated Previously `_governanceAdminContract` (non-zero value)\\n  address internal ______deprecatedGovernanceAdmin;\\n}\\n\\ncontract HasBridgeTrackingDeprecated {\\n  /// @custom:deprecated Previously `_bridgeTrackingContract` (non-zero value)\\n  address internal ______deprecatedBridgeTracking;\\n}\\n\",\"keccak256\":\"0xe93504aed9f67a6d399475c7162560f2ac4f793fab5b67fe504fc694ac9a2892\",\"license\":\"MIT\"},\"contracts/utils/IdentityGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { LibArray } from \\\"../libraries/LibArray.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { TransparentUpgradeableProxyV2 } from \\\"../extensions/TransparentUpgradeableProxyV2.sol\\\";\\nimport {\\n  ErrAddressIsNotCreatedEOA,\\n  ErrZeroAddress,\\n  ErrOnlySelfCall,\\n  ErrZeroCodeContract,\\n  ErrUnsupportedInterface\\n} from \\\"./CommonErrors.sol\\\";\\n\\nabstract contract IdentityGuard {\\n  using LibArray for address[];\\n\\n  /// @dev value is equal to keccak256(abi.encode())\\n  /// @dev see: https://eips.ethereum.org/EIPS/eip-1052\\n  bytes32 internal constant CREATED_ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * @dev Modifier to restrict functions to only be called by this contract.\\n   * @dev Reverts if the caller is not this contract.\\n   */\\n  modifier onlySelfCall() virtual {\\n    _requireSelfCall();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to ensure that the elements in the `arr` array are non-duplicates.\\n   * It calls the internal `_checkDuplicate` function to perform the duplicate check.\\n   *\\n   * Requirements:\\n   * - The elements in the `arr` array must not contain any duplicates.\\n   */\\n  modifier nonDuplicate(address[] memory arr) virtual {\\n    _requireNonDuplicate(arr);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal method to check the method caller.\\n   * @dev Reverts if the method caller is not this contract.\\n   */\\n  function _requireSelfCall() internal view virtual {\\n    if (msg.sender != address(this)) revert ErrOnlySelfCall(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to check if a contract address has code.\\n   * @param addr The address of the contract to check.\\n   * @dev Throws an error if the contract address has no code.\\n   */\\n  function _requireHasCode(address addr) internal view {\\n    if (addr.code.length == 0) revert ErrZeroCodeContract(addr);\\n  }\\n\\n  /**\\n   * @dev Checks if an address is zero and reverts if it is.\\n   * @param addr The address to check.\\n   */\\n  function _requireNonZeroAddress(address addr) internal pure {\\n    if (addr == address(0)) revert ErrZeroAddress(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Check if arr is empty and revert if it is.\\n   * Checks if an array contains any duplicate addresses and reverts if duplicates are found.\\n   * @param arr The array of addresses to check.\\n   */\\n  function _requireNonDuplicate(address[] memory arr) internal pure {\\n    if (arr.hasDuplicate()) revert LibArray.ErrDuplicated(msg.sig);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the provided address is a created externally owned account (EOA).\\n   * This internal function is used to ensure that the provided address is a valid externally owned account (EOA).\\n   * It checks the codehash of the address against a predefined constant to confirm that the address is a created EOA.\\n   * @notice This method only works with non-state EOA accounts\\n   */\\n  function _requireCreatedEOA(address addr) internal view {\\n    _requireNonZeroAddress(addr);\\n    bytes32 codehash = addr.codehash;\\n    if (codehash != CREATED_ACCOUNT_HASH) revert ErrAddressIsNotCreatedEOA(addr, codehash);\\n  }\\n\\n  /**\\n   * @dev Internal function to require that the specified contract supports the given interface. This method handle in\\n   * both case that the callee is either or not the proxy admin of the caller. If the contract does not support the\\n   * interface `interfaceId` or EIP165, a revert with the corresponding error message is triggered.\\n   *\\n   * @param contractAddr The address of the contract to check for interface support.\\n   * @param interfaceId The interface ID to check for support.\\n   */\\n  function _requireSupportsInterface(address contractAddr, bytes4 interfaceId) internal view {\\n    bytes memory supportsInterfaceParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n    (bool success, bytes memory returnOrRevertData) = contractAddr.staticcall(supportsInterfaceParams);\\n    if (!success) {\\n      (success, returnOrRevertData) = contractAddr.staticcall(\\n        abi.encodeCall(TransparentUpgradeableProxyV2.functionDelegateCall, (supportsInterfaceParams))\\n      );\\n      if (!success) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n    }\\n    if (!abi.decode(returnOrRevertData, (bool))) revert ErrUnsupportedInterface(interfaceId, contractAddr);\\n  }\\n}\\n\",\"keccak256\":\"0x7d525f577b73f76a4327fe3cb6ad410b2fa8ae7c5702b2128bb899cae3ee52b5\",\"license\":\"MIT\"},\"contracts/utils/RoleAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RoleAccess {\\n  /* 0 */\\n  UNKNOWN,\\n  /* 1 */\\n  ADMIN,\\n  /* 2 */\\n  COINBASE,\\n  /* 3 */\\n  GOVERNOR,\\n  /* 4 */\\n  CANDIDATE_ADMIN,\\n  /* 5 */\\n  WITHDRAWAL_MIGRATOR,\\n  /* 6 */\\n  __DEPRECATED_BRIDGE_OPERATOR,\\n  /* 7 */\\n  BLOCK_PRODUCER,\\n  /* 8 */\\n  VALIDATOR_CANDIDATE,\\n  /* 9 */\\n  CONSENSUS,\\n  /* 10 */\\n  TREASURY\\n}\\n\",\"keccak256\":\"0xb4be3fbf480504f85653a3f598dd90b32b1afd1c93de472cfbcc0a0741c1aece\",\"license\":\"MIT\"},\"lib/chainlink/contracts/src/v0.8/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\\n\\n  * @dev Bibliographic references:\\n\\n  * @dev Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draft\\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\\n\\n  * @dev Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", Cryptology\\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\\n  * ****************************************************************************\\n  * @dev USAGE\\n\\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\\n  * ****************************************************************************\\n  * @dev PURPOSE\\n\\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\\n  * @dev Reggie, he gives back a value which is computed completely\\n  * @dev deterministically from the seed and the secret key.\\n\\n  * @dev Reggie provides a proof by which Vera can verify that the output was\\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\\n  * @dev the output is computationally indistinguishable to her from a uniform\\n  * @dev random sample from the output space.\\n\\n  * @dev The purpose of this contract is to perform that verification.\\n  * ****************************************************************************\\n  * @dev DESIGN NOTES\\n\\n  * @dev The VRF algorithm verified here satisfies the full uniqueness, full\\n  * @dev collision resistance, and full pseudo-randomness security properties.\\n  * @dev See \\\"SECURITY PROPERTIES\\\" below, and\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\\n\\n  * @dev An elliptic curve point is generally represented in the solidity code\\n  * @dev as a uint256[2], corresponding to its affine coordinates in\\n  * @dev GF(FIELD_SIZE).\\n\\n  * @dev For the sake of efficiency, this implementation deviates from the spec\\n  * @dev in some minor ways:\\n\\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\\n\\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\\n\\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\\n  * @dev   nonce updated until a valid x-ordinate is found.\\n\\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\\n  * @dev   in the hash message, as recommended in step 5.B of the draft\\n  * @dev   standard. They are unnecessary here because no variation in the\\n  * @dev   cipher suite is allowed.\\n\\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\\n  * @dev   points, not the compressed points as recommended in step 3.\\n\\n  * @dev - In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.\\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\\n  * @dev   generator point, see steps 5 and 7 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\\n  * @dev   keccak hash of the original u. This is because we only verify the\\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\\n  * ****************************************************************************\\n  * @dev   SECURITY PROPERTIES\\n\\n  * @dev Here are the security properties for this VRF:\\n\\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\\n  * @dev   the sense that the proof will pass verifyVRFProof.\\n\\n  * @dev Full collision resistance: It's cryptographically infeasible to find\\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\\n\\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\\n  * @dev   derived from a given seed, the outputs are computationally\\n  * @dev   indistinguishable from randomness.\\n\\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\\n  * @dev for these properties.\\n\\n  * @dev For secp256k1, the key validation described in section\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\\n  * @dev representation of the public key used here (affine x- and y-ordinates\\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\\n  * @dev the point at infinity.\\n  * ****************************************************************************\\n  * @dev OTHER SECURITY CONSIDERATIONS\\n  *\\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\\n  * @dev However, under the Random Oracle Model the probability of choosing a\\n  * @dev point which forces n extra rounds in hashToCurve is 2\\u207b\\u207f. The base cost\\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\\n  * @dev try, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for any\\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\\n\\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\\n  * @dev this means it is infeasible for an adversary to prevent correct\\n  * @dev operation of this contract by choosing an adverse seed.\\n\\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\\n  * @dev hashToCurve.)\\n\\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\\n  * @dev See notes in hashToCurve docstring.\\n*/\\ncontract VRF {\\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\\n  // Number of points in Secp256k1\\n  uint256 private constant GROUP_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // Prime characteristic of the galois field over which Secp256k1 is defined\\n  uint256 private constant FIELD_SIZE =\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n  uint256 private constant WORD_LENGTH_BYTES = 0x20;\\n\\n  // (base^exponent) % FIELD_SIZE\\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\\n  function bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\\n    uint256 callResult;\\n    uint256[6] memory bigModExpContractInputs;\\n    bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\\n    bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\\n    bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\\n    bigModExpContractInputs[3] = base;\\n    bigModExpContractInputs[4] = exponent;\\n    bigModExpContractInputs[5] = FIELD_SIZE;\\n    uint256[1] memory output;\\n    assembly {\\n      // solhint-disable-line no-inline-assembly\\n      callResult := staticcall(\\n        not(0), // Gas cost: no limit\\n        0x05, // Bigmodexp contract address\\n        bigModExpContractInputs,\\n        0xc0, // Length of input segment: 6*0x20-bytes\\n        output,\\n        0x20 // Length of output segment\\n      )\\n    }\\n    if (callResult == 0) {\\n      revert(\\\"bigModExp failure!\\\");\\n    }\\n    return output[0];\\n  }\\n\\n  // Let q=FIELD_SIZE. q % 4 = 3, \\u2234 x\\u2261r^2 mod q \\u21d2 x^SQRT_POWER\\u2261\\u00b1r mod q.  See\\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\\n  uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\\n\\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\\n  function squareRoot(uint256 x) internal view returns (uint256) {\\n    return bigModExp(x, SQRT_POWER);\\n  }\\n\\n  // The value of y^2 given that (x,y) is on secp256k1.\\n  function ySquared(uint256 x) internal pure returns (uint256) {\\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\\n    return addmod(xCubed, 7, FIELD_SIZE);\\n  }\\n\\n  // True iff p is on secp256k1\\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\\n    // Section 2.3.6. in https://www.secg.org/sec1-v2.pdf\\n    // requires each ordinate to be in [0, ..., FIELD_SIZE-1]\\n    require(p[0] < FIELD_SIZE, \\\"invalid x-ordinate\\\");\\n    require(p[1] < FIELD_SIZE, \\\"invalid y-ordinate\\\");\\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\\n  }\\n\\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\\n    x_ = uint256(keccak256(b));\\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\\n    // string_to_point in the IETF draft\\n    while (x_ >= FIELD_SIZE) {\\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\\n    }\\n  }\\n\\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\\n  // is always even, due to\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  // step 5.C, which references arbitrary_string_to_point, defined in\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\\n  // returning the point with given x ordinate, and even y ordinate.\\n  function newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\\n    unchecked {\\n      p[0] = fieldHash(b);\\n      p[1] = squareRoot(ySquared(p[0]));\\n      if (p[1] % 2 == 1) {\\n        // Note that 0 <= p[1] < FIELD_SIZE\\n        // so this cannot wrap, we use unchecked to save gas.\\n        p[1] = FIELD_SIZE - p[1];\\n      }\\n    }\\n  }\\n\\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\\n  // vrf.go/hashToCurveHashPrefix\\n  uint256 internal constant HASH_TO_CURVE_HASH_PREFIX = 1;\\n\\n  // Cryptographic hash function onto the curve.\\n  //\\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\\n  // DESIGN NOTES above for slight differences.)\\n  //\\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\\n  // \\\"Construction of Rational Points on Elliptic Curves over Finite Fields\\\"\\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\\n  // and suggested by\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\\n  //\\n  // This would greatly simplify the analysis in \\\"OTHER SECURITY CONSIDERATIONS\\\"\\n  // https://www.pivotaltracker.com/story/show/171120900\\n  function hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\\n    rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\\n    while (!isOnCurve(rv)) {\\n      rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\\n    }\\n  }\\n\\n  /** *********************************************************************\\n   * @notice Check that product==scalar*multiplicand\\n   *\\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\\n   *\\n   * @param multiplicand: secp256k1 point\\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\\n   * @param product: secp256k1 expected to be multiplier * multiplicand\\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\\n   */\\n  function ecmulVerify(\\n    uint256[2] memory multiplicand,\\n    uint256 scalar,\\n    uint256[2] memory product\\n  ) internal pure returns (bool verifies) {\\n    require(scalar != 0, \\\"zero scalar\\\"); // Rules out an ecrecover failure case\\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\\n    // (x\\u207b\\u00b9 mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\\n    // Explicit conversion to address takes bottom 160 bits\\n    address expected = address(uint160(uint256(keccak256(abi.encodePacked(product)))));\\n    return (actual == expected);\\n  }\\n\\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveSub(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    unchecked {\\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\\n      // Note this cannot wrap since x2 is a point in [0, FIELD_SIZE-1]\\n      // we use unchecked to save gas.\\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n  }\\n\\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveMul(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n  }\\n\\n  /** **************************************************************************\\n        @notice Computes elliptic-curve sum, in projective co-ordinates\\n\\n        @dev Using projective coordinates avoids costly divisions\\n\\n        @dev To use this with p and q in affine coordinates, call\\n        @dev projectiveECAdd(px, py, qx, qy). This will return\\n        @dev the addition of (px, py, 1) and (qx, qy, 1), in the\\n        @dev secp256k1 group.\\n\\n        @dev This can be used to calculate the z which is the inverse to zInv\\n        @dev in isValidVRFOutput. But consider using a faster\\n        @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\\n\\n        @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\\n             coordinates of secp256k1 points. That is safe in this contract,\\n             because this method is only used by linearCombination, which checks\\n             points are on the curve via ecrecover.\\n        **************************************************************************\\n        @param px The first affine coordinate of the first summand\\n        @param py The second affine coordinate of the first summand\\n        @param qx The first affine coordinate of the second summand\\n        @param qy The second affine coordinate of the second summand\\n\\n        (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\\n        **************************************************************************\\n        Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\\n        on secp256k1, in P\\u00b2(\\ud835\\udd3d\\u2099)\\n        @return sx\\n        @return sy\\n        @return sz\\n    */\\n  function projectiveECAdd(\\n    uint256 px,\\n    uint256 py,\\n    uint256 qx,\\n    uint256 qy\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256 sx,\\n      uint256 sy,\\n      uint256 sz\\n    )\\n  {\\n    unchecked {\\n      // See \\\"Group law for E/K : y^2 = x^3 + ax + b\\\", in section 3.1.2, p. 80,\\n      // \\\"Guide to Elliptic Curve Cryptography\\\" by Hankerson, Menezes and Vanstone\\n      // We take the equations there for (sx,sy), and homogenize them to\\n      // projective coordinates. That way, no inverses are required, here, and we\\n      // only need the one inverse in affineECAdd.\\n\\n      // We only need the \\\"point addition\\\" equations from Hankerson et al. Can\\n      // skip the \\\"point doubling\\\" equations because p1 == p2 is cryptographically\\n      // impossible, and required not to be the case in linearCombination.\\n\\n      // Add extra \\\"projective coordinate\\\" to the two points\\n      (uint256 z1, uint256 z2) = (1, 1);\\n\\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\\n      // Cannot wrap since px and py are in [0, FIELD_SIZE-1]\\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\\n\\n      uint256 dx; // Accumulates denominator from sx calculation\\n      // sx=((qy-py)/(qx-px))^2-px-qx\\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\\n\\n      uint256 dy; // Accumulates denominator from sy calculation\\n      // sy=((qy-py)/(qx-px))(px-sx)-py\\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\\n\\n      if (dx != dy) {\\n        // Cross-multiply to put everything over a common denominator\\n        sx = mulmod(sx, dy, FIELD_SIZE);\\n        sy = mulmod(sy, dx, FIELD_SIZE);\\n        sz = mulmod(dx, dy, FIELD_SIZE);\\n      } else {\\n        // Already over a common denominator, use that for z ordinate\\n        sz = dx;\\n      }\\n    }\\n  }\\n\\n  // p1+p2, as affine points on secp256k1.\\n  //\\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\\n  // It is computed off-chain to save gas.\\n  //\\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\\n  // point doubling.\\n  function affineECAdd(\\n    uint256[2] memory p1,\\n    uint256[2] memory p2,\\n    uint256 invZ\\n  ) internal pure returns (uint256[2] memory) {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \\\"invZ must be inverse of z\\\");\\n    // Clear the z ordinate of the projective representation by dividing through\\n    // by it, to obtain the affine representation\\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\\n  }\\n\\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\\n  // cryptographically high probability.)\\n  function verifyLinearCombinationWithGenerator(\\n    uint256 c,\\n    uint256[2] memory p,\\n    uint256 s,\\n    address lcWitness\\n  ) internal pure returns (bool) {\\n    // Rule out ecrecover failure modes which return address 0.\\n    unchecked {\\n      require(lcWitness != address(0), \\\"bad witness\\\");\\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\\n      // Note this cannot wrap (X - Y % X), but we use unchecked to save\\n      // gas.\\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n      // The point corresponding to the address returned by\\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\\n      // (p[0]\\u207b\\u00b9 mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\\n      // See https://crypto.stackexchange.com/a/18106\\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\\n      return computed == lcWitness;\\n    }\\n  }\\n\\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\\n  // requires cp1Witness != sp2Witness (which is fine for this application,\\n  // since it is cryptographically impossible for them to be equal. In the\\n  // (cryptographically impossible) case that a prover accidentally derives\\n  // a proof with equal c*p1 and s*p2, they should retry with a different\\n  // proof nonce.) Assumes that all points are on secp256k1\\n  // (which is checked in verifyVRFProof below.)\\n  function linearCombination(\\n    uint256 c,\\n    uint256[2] memory p1,\\n    uint256[2] memory cp1Witness,\\n    uint256 s,\\n    uint256[2] memory p2,\\n    uint256[2] memory sp2Witness,\\n    uint256 zInv\\n  ) internal pure returns (uint256[2] memory) {\\n    unchecked {\\n      // Note we are relying on the wrap around here\\n      require((cp1Witness[0] % FIELD_SIZE) != (sp2Witness[0] % FIELD_SIZE), \\\"points in sum must be distinct\\\");\\n      require(ecmulVerify(p1, c, cp1Witness), \\\"First mul check failed\\\");\\n      require(ecmulVerify(p2, s, sp2Witness), \\\"Second mul check failed\\\");\\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\\n  uint256 internal constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\\n\\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  // The draft calls (in step 7, via the definition of string_to_int, in\\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\\n  // first hash without checking that it corresponds to a number less than the\\n  // group order, which will lead to a slight bias in the sample.\\n  //\\n  // TODO(alx): We could save a bit of gas by following the standard here and\\n  // using the compressed representation of the points, if we collated the y\\n  // parities into a single bytes32.\\n  // https://www.pivotaltracker.com/story/show/171120588\\n  function scalarFromCurvePoints(\\n    uint256[2] memory hash,\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    address uWitness,\\n    uint256[2] memory v\\n  ) internal pure returns (uint256 s) {\\n    return uint256(keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX, hash, pk, gamma, v, uWitness)));\\n  }\\n\\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\\n  // and seed. zInv must be the inverse of the third ordinate from\\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\\n  // section 5.3 of the IETF draft.\\n  //\\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\\n  // (which I could make a uint256 without using any extra space.) Would save\\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\\n  function verifyVRFProof(\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    uint256 c,\\n    uint256 s,\\n    uint256 seed,\\n    address uWitness,\\n    uint256[2] memory cGammaWitness,\\n    uint256[2] memory sHashWitness,\\n    uint256 zInv\\n  ) internal view {\\n    unchecked {\\n      require(isOnCurve(pk), \\\"public key is not on curve\\\");\\n      require(isOnCurve(gamma), \\\"gamma is not on curve\\\");\\n      require(isOnCurve(cGammaWitness), \\\"cGammaWitness is not on curve\\\");\\n      require(isOnCurve(sHashWitness), \\\"sHashWitness is not on curve\\\");\\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\\n      // we use the address of u instead of u itself. Also, here we add the\\n      // terms instead of taking the difference, and in the proof construction in\\n      // vrf.GenerateProof, we correspondingly take the difference instead of\\n      // taking the sum as they do in step 7 of section 5.1.)\\n      require(verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \\\"addr(c*pk+s*g)!=_uWitness\\\");\\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\\n      uint256[2] memory hash = hashToCurve(pk, seed);\\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\\n      uint256[2] memory v = linearCombination(c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\\n      // Steps 7. and 8. of IETF draft section 5.3\\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\\n      require(c == derivedC, \\\"invalid proof\\\");\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash used as the final VRF output.\\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\\n  uint256 internal constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\\n\\n  struct Proof {\\n    uint256[2] pk;\\n    uint256[2] gamma;\\n    uint256 c;\\n    uint256 s;\\n    uint256 seed;\\n    address uWitness;\\n    uint256[2] cGammaWitness;\\n    uint256[2] sHashWitness;\\n    uint256 zInv;\\n  }\\n\\n  /* ***************************************************************************\\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n     * @param proof vrf proof components\\n     * @param seed  seed used to generate the vrf output\\n     *\\n     * Throws if proof is invalid, otherwise:\\n     * @return output i.e., the random output implied by the proof\\n     * ***************************************************************************\\n     */\\n  function randomValueFromVRFProof(Proof memory proof, uint256 seed) internal view returns (uint256 output) {\\n    verifyVRFProof(\\n      proof.pk,\\n      proof.gamma,\\n      proof.c,\\n      proof.s,\\n      seed,\\n      proof.uWitness,\\n      proof.cGammaWitness,\\n      proof.sHashWitness,\\n      proof.zInv\\n    );\\n    output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, proof.gamma)));\\n  }\\n}\\n\",\"keccak256\":\"0x6e9617ea33bf761d89dfc9ec2f0a55123a6737c753d67bc313c386da451b4b6a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"}},\"version\":1}",
  "nonce": 194390,
  "storageLayout": {
    "storage": [
      {
        "astId": 106616,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 106619,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 44306,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_numberOfBlocksInEpoch",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 44309,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 44312,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lastUpdatedPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 44315,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_currentPeriodStartAtBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 44320,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_periodOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 44325,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 43910,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 43917,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningRewardBailoutCutOffAtPeriod",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 43924,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedBridgeRewardDeprecatedAtPeriod",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 43929,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_blockProducerJailedBlock",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43934,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitJailedTimestamp",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43939,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_cannotBailoutUntilBlock",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43944,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "61",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 45336,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedStakingVesting",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      },
      {
        "astId": 45364,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedBridgeTracking",
        "offset": 0,
        "slot": "110",
        "type": "t_address"
      },
      {
        "astId": 45352,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedMaintenance",
        "offset": 0,
        "slot": "111",
        "type": "t_address"
      },
      {
        "astId": 45332,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedSlashIndicator",
        "offset": 0,
        "slot": "112",
        "type": "t_address"
      },
      {
        "astId": 45348,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedStakingContract",
        "offset": 0,
        "slot": "113",
        "type": "t_address"
      },
      {
        "astId": 40004,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_maxValidatorCandidate",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 40008,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIds",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 40013,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateIndex",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40019,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateInfo",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_address,t_struct(ValidatorCandidate)10505_storage)"
      },
      {
        "astId": 40022,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_minEffectiveDaysOnwards",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 40028,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_candidateCommissionChangeSchedule",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_struct(CommissionSchedule)10512_storage)"
      },
      {
        "astId": 40033,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "120",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 45356,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______deprecatedTrustedOrg",
        "offset": 0,
        "slot": "168",
        "type": "t_address"
      },
      {
        "astId": 44495,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "__deprecatedMaxValidatorNumber",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 44498,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorCount",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 44503,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorIds",
        "offset": 0,
        "slot": "171",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 44509,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_validatorMap",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_enum(ValidatorFlag)11562)"
      },
      {
        "astId": 44512,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "__deprecatedMaxPrioritizedValidatorNumber",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 44517,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "174",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 43758,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_miningReward",
        "offset": 0,
        "slot": "224",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43763,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_delegatingReward",
        "offset": 0,
        "slot": "225",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43766,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalFastFinalityReward",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 43771,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_fastFinalityReward",
        "offset": 0,
        "slot": "227",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 43774,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_totalDeprecatedReward",
        "offset": 0,
        "slot": "228",
        "type": "t_uint256"
      },
      {
        "astId": 43777,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExitLockedAmount",
        "offset": 0,
        "slot": "229",
        "type": "t_uint256"
      },
      {
        "astId": 43780,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_emergencyExpiryDuration",
        "offset": 0,
        "slot": "230",
        "type": "t_uint256"
      },
      {
        "astId": 43784,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedConsensusList",
        "offset": 0,
        "slot": "231",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 43790,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_exitInfo",
        "offset": 0,
        "slot": "232",
        "type": "t_mapping(t_address,t_struct(EmergencyExitInfo)11119_storage)"
      },
      {
        "astId": 43795,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "_lockedFundReleased",
        "offset": 0,
        "slot": "233",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 43800,
        "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
        "label": "______gap",
        "offset": 0,
        "slot": "234",
        "type": "t_array(t_uint256)44_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32",
        "base": "t_address"
      },
      "t_array(t_uint256)44_storage": {
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408",
        "base": "t_uint256"
      },
      "t_array(t_uint256)48_storage": {
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536",
        "base": "t_uint256"
      },
      "t_array(t_uint256)49_storage": {
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568",
        "base": "t_uint256"
      },
      "t_array(t_uint256)50_storage": {
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600",
        "base": "t_uint256"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ValidatorFlag)11562": {
        "encoding": "inplace",
        "label": "enum EnumFlags.ValidatorFlag",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ValidatorFlag)11562)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum EnumFlags.ValidatorFlag)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidatorFlag)11562"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(CommissionSchedule)10512_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.CommissionSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(CommissionSchedule)10512_storage"
      },
      "t_mapping(t_address,t_struct(EmergencyExitInfo)11119_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICommonInfo.EmergencyExitInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(EmergencyExitInfo)11119_storage"
      },
      "t_mapping(t_address,t_struct(ValidatorCandidate)10505_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICandidateManager.ValidatorCandidate)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorCandidate)10505_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CommissionSchedule)10512_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.CommissionSchedule",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 10508,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "effectiveTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10511,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(EmergencyExitInfo)11119_storage": {
        "encoding": "inplace",
        "label": "struct ICommonInfo.EmergencyExitInfo",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 11116,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "lockedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11118,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "recyclingAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_struct(ValidatorCandidate)10505_storage": {
        "encoding": "inplace",
        "label": "struct ICandidateManager.ValidatorCandidate",
        "numberOfBytes": "224",
        "members": [
          {
            "astId": 10485,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "__shadowedAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10489,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "__shadowedConsensus",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(TConsensus)45044"
          },
          {
            "astId": 10492,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "__shadowedTreasury",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 10495,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "____deprecatedBridgeOperatorAddr",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 10498,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "commissionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10501,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "revokingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10504,
            "contract": "contracts/ronin/validator/RoninValidatorSet.sol:RoninValidatorSet",
            "label": "topupDeadline",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(TConsensus)45044": {
        "encoding": "inplace",
        "label": "TConsensus",
        "numberOfBytes": "20"
      }
    }
  },
  "timestamp": 1717148297,
  "userdoc": {
    "version": 1,
    "kind": "user"
  }
}